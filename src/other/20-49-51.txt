Training fitness: [0.4748603351955307, 0.49604012610398934]
Test TPR: 0.6153846153846154
Test AUC: 0.5647162410950133
def p():
  x = 0.0
  index = 49
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x + 0.9)
  return x
XXX_output_XXX = p()


Training fitness: [0.5483870967741935, 0.5316254228709943]
Test TPR: 0.6153846153846154
Test AUC: 0.5647162410950133
def p():
  x = 0.0
  index = 19
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x + 1.0)
  return x
XXX_output_XXX = p()


Training fitness: [0.021505376344086023, 0.49267664412467127]
Test TPR: 0.02564102564102564
Test AUC: 0.4868059446623442
def p():
  x = 0.0
  index = 31
  if sum(opposite) / 52 < main[index]:
    x = (x + 0.9)
  return x
XXX_output_XXX = p()


Training fitness: [0.0, 0.5]
Test TPR: 0.48717948717948717
Test AUC: 0.5037354251714293
def p():
  x = 0.0
  index = 22
  if opposite[index] < sum(opposite) / 52:
    x = (x - 1.0)
  return x
XXX_output_XXX = p()


Training fitness: [0.5986842105263158, 0.5379433018796217]
Test TPR: 0.6410256410256411
Test AUC: 0.5468395634888872
def p():
  x = 0.0
  index = 15
  if main[index] > opposite[index]:
    x = (x - 0.2)
  return x
XXX_output_XXX = p()


Training fitness: [0.0, 0.5]
Test TPR: 0.6153846153846154
Test AUC: 0.5553509965580725
def p():
  x = 0.0
  index = 23
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x - 0.1)
  return x
XXX_output_XXX = p()


Training fitness: [0.0, 0.5]
Test TPR: 0.8974358974358975
Test AUC: 0.5741081672403212
def p():
  x = 0.0
  index = 9
  if main[index] < 1:
    if main[index] > main[index] + 0.6:
      x = (x + 0.001)
  else:
    if opposite[index] < opposite[index] + 2:
      x = (x + 0.4)
    else:
      x = (x + 0.001)
  index = 3
  if opposite[index] < main[index]:
    x = (x + 0.5)
  index = 30
  if sum(opposite) / 52 < sum(opposite) / 52:
    x = (x - 0.5)
  index = 21
  if sum(main) / 52 < main[index]:
    x = (x - 0.0000001)
  return x
XXX_output_XXX = p()


Training fitness: [0.8176470588235294, 0.6207721730232785]
Test TPR: 0.7435897435897436
Test AUC: 0.5845940393286908
def p():
  x = 0.0
  index = 0
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.000001)
  index = 21
  if sum(opposite) / 52 > sum(opposite) / 52:
    x = (x - 0.6)
  index = 10
  if main[index] < sum(opposite) / 52:
    x = (x + 0.6)
  return x
XXX_output_XXX = p()


Training fitness: [0.7251184834123223, 0.5754873954237886]
Test TPR: 0.7435897435897436
Test AUC: 0.57522879479175
def p():
  x = 0.0
  index = 28
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.000001)
  index = 41
  if opposite[index] < sum(opposite) / 52:
    x = (x + 0.5)
  index = 30
  if main[index] > sum(main) / 52:
    x = (x - 0.0001)
  index = 32
  if sum(main) / 52 < opposite[index]:
    x = (x - 0.0001)
  return x
XXX_output_XXX = p()


Training fitness: [0.5024154589371981, 0.4855566443266959]
Test TPR: 0.8974358974358975
Test AUC: 0.5564182608927666
def p():
  x = 0.0
  index = 4
  if main[index] - opposite[index] > sum(main) / 52 + opposite[index]:
    x = (x - 0.8)
  index = 3
  if main[index] < 1:
    if main[index] < main[index] + 0.000001:
      x = (x + 0.9)
  else:
    if opposite[index] < opposite[index] + 3:
      x = (x + 0.000001)
    else:
      x = (x - 0.0000001)
  index = 45
  if sum(main) / 52 > main[index]:
    x = (x + 0.001)
  index = 41
  if sum(main) / 52 < sum(main) / 52:
    x = (x + 0.01)
  index = 35
  if sum(main) / 52 > sum(main) / 52:
    x = (x + 0.2)
  index = 13
  if opposite[index] > sum(main[-index:]):
    x = (x + 0.001)
  index = 36
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x - 0.8)
  index = 25
  if sum(main) / 52 > sum(main) / 52:
    x = (x + 0.3)
  return x
XXX_output_XXX = p()


Training fitness: [0.0, 0.482389289392379]
Test TPR: 0.9487179487179487
Test AUC: 0.5768563729021585
def p():
  x = 0.0
  index = 42
  if sum(opposite[:-index]) > sum(main) / 52 + main[index]:
    x = (x + 0.001)
  index = 1
  if sum(main) / 52 + sum(opposite) / 52 < sum(opposite) / 52:
    x = (x + 0.4)
  index = 13
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.2)
  index = 40
  if opposite[index] > sum(opposite) / 52:
    x = (x - 0.000001)
  index = 35
  if main[index] < 1:
    if main[index] > opposite[index] + 0.000001:
      x = (x - 0.2)
  else:
    if main[index] < main[index] + 4:
      x = (x + 0.6)
    else:
      x = (x + 0.7)
  index = 46
  if opposite[index] > opposite[index]:
    x = (x + 0.2)
  index = 49
  if main[index] < opposite[index]:
    x = (x - 0.001)
  index = 41
  if main[index] < opposite[index]:
    x = (x + 0.0001)
  index = 27
  if main[index] < sum(main) / 52:
    x = (x + 0.5)
  index = 6
  if main[index] < 1:
    if main[index] < main[index] + 0.4:
      x = (x - 1.0)
  else:
    if main[index] < opposite[index] + 1:
      x = (x - 0.1)
    else:
      x = (x + 0.1)
  index = 14
  if main[index] > opposite[index]:
    x = (x + 0.3)
  index = 23
  if main[index] < 1:
    if main[index] > main[index] + 0.6:
      x = (x + 0.0000001)
  else:
    if main[index] > main[index] + 6:
      x = (x + 0.7)
    else:
      x = (x - 0.7)
  index = 33
  if opposite[index] > opposite[index]:
    x = (x - 0.4)
  index = 4
  if sum(main) / 52 < sum(main) / 52:
    x = (x + 0.0001)
  index = 44
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 5000:
    x = (x + 0.00001)
  index = 41
  if main[index] > sum(opposite) / 52:
    x = (x - 0.8)
  index = 34
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.1)
  index = 16
  if opposite[index] < opposite[index]:
    x = (x + 0.0001)
  return x
XXX_output_XXX = p()


