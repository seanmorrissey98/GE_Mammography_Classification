Training fitness: [0.011235955056179775, 0.4927941094307332]
Test TPR: 0.05128205128205128
Test AUC: 0.5157554897409216
def p():
  x = 0.0
  index = 20
  if sum(main) / 52 < main[index]:
    x = (x + 0.001)
  return x
XXX_output_XXX = p()


Training fitness: [0.4438202247191011, 0.4946135931237484]
Test TPR: 0.358974358974359
Test AUC: 0.45576189332692973
def p():
  x = 0.0
  index = 22
  if sum(main) / 52 < opposite[index]:
    x = (x + 0.6)
  return x
XXX_output_XXX = p()


Training fitness: [0.0, 0.5]
Test TPR: 0.6153846153846154
Test AUC: 0.5553509965580725
def p():
  x = 0.0
  index = 24
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x - 0.9)
  return x
XXX_output_XXX = p()


Training fitness: [0.0, 0.5]
Test TPR: 0.6153846153846154
Test AUC: 0.5553509965580725
def p():
  x = 0.0
  index = 15
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x - 0.000001)
  return x
XXX_output_XXX = p()


Training fitness: [0.0, 0.5]
Test TPR: 0.6153846153846154
Test AUC: 0.5647162410950133
def p():
  x = 0.0
  index = 35
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x + 0.1)
  return x
XXX_output_XXX = p()


Training fitness: [0.0, 0.5]
Test TPR: 0.5641025641025641
Test AUC: 0.531270845006537
def p():
  x = 0.0
  index = 36
  if main[index] > opposite[index]:
    x = (x + 0.9)
  return x
XXX_output_XXX = p()


Training fitness: [0.46629213483146065, 0.5110837800564003]
Test TPR: 0.8974358974358975
Test AUC: 0.5902371994983857
def p():
  x = 0.0
  index = 5
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 50:
    x = (x + 0.1)
  index = 51
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x - 0.001)
  index = 42
  if main[index] > sum(main) / 52:
    x = (x - 0.0001)
  index = 6
  if sum(opposite) / 52 > main[index]:
    x = (x - 0.2)
  return x
XXX_output_XXX = p()


Training fitness: [0.6966292134831461, 0.5172494405547109]
Test TPR: 0.8974358974358975
Test AUC: 0.5647429227033806
def p():
  x = 0.0
  index = 28
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.7)
  index = 17
  if main[index] < 1:
    if opposite[index] < main[index] + 0.001:
      x = (x + 0.0001)
  else:
    if opposite[index] < opposite[index] + 9:
      x = (x + 0.9)
    else:
      x = (x + 0.4)
  index = 5
  if sum(opposite) / 52 < sum(main) / 52:
    x = (x + 0.3)
  index = 20
  if main[index] < sum(opposite) / 52:
    x = (x - 0.8)
  index = 16
  if main[index] < main[index]:
    x = (x - 0.4)
  index = 6
  if sum(main) / 52 < sum(main) / 52:
    x = (x - 0.000001)
  index = 3
  if opposite[index] + sum(main) / 52 < main[index] - sum(main) / 52:
    x = (x + 0.2)
  index = 17
  if main[index] < 1:
    if opposite[index] > main[index] + 0.7:
      x = (x + 0.2)
  else:
    if main[index] < main[index] + 1:
      x = (x - 0.3)
    else:
      x = (x + 0.4)
  index = 7
  if main[index] < 1:
    if opposite[index] < main[index] + 1.0:
      x = (x - 0.7)
  else:
    if opposite[index] > main[index] + 4:
      x = (x - 0.1)
    else:
      x = (x - 0.1)
  index = 2
  if main[index] < sum(main) / 52:
    x = (x - 0.5)
  index = 34
  if main[index] < 1:
    if opposite[index] > main[index] + 0.1:
      x = (x - 0.1)
  else:
    if main[index] < main[index] + 1:
      x = (x + 0.00001)
    else:
      x = (x + 0.5)
  return x
XXX_output_XXX = p()


Training fitness: [0.0, 0.5]
Test TPR: 0.7435897435897436
Test AUC: 0.5799114170602204
def p():
  x = 0.0
  index = 41
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.9)
  return x
XXX_output_XXX = p()


Training fitness: [0.33707865168539325, 0.5143911970805924]
Test TPR: 0.8205128205128205
Test AUC: 0.5835134341898129
def p():
  x = 0.0
  index = 3
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.6)
  index = 33
  if main[index] < 1:
    if main[index] > opposite[index] + 0.01:
      x = (x - 0.3)
  else:
    if opposite[index] > main[index] + 5:
      x = (x + 0.8)
    else:
      x = (x + 0.000001)
  index = 20
  if main[index] < 1:
    if opposite[index] < main[index] + 0.2:
      x = (x + 0.4)
  else:
    if opposite[index] < opposite[index] + 4:
      x = (x + 0.001)
    else:
      x = (x - 0.2)
  index = 26
  if opposite[index] + sum(main) / 52 < sum(main) / 52 - main[index]:
    x = (x - 0.5)
  index = 19
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.5:
      x = (x - 0.3)
  else:
    if opposite[index] > main[index] + 3:
      x = (x - 0.000001)
    else:
      x = (x - 0.000001)
  index = 6
  if opposite[index] < opposite[index]:
    x = (x - 1.0)
  index = 46
  if main[index] < 1:
    if opposite[index] > main[index] + 0.8:
      x = (x - 0.2)
  else:
    if main[index] < opposite[index] + 3:
      x = (x + 0.9)
    else:
      x = (x + 1.0)
  index = 17
  if main[index] - main[index] < sum(opposite) / 52:
    x = (x - 0.4)
  return x
XXX_output_XXX = p()


Training fitness: [0.0, 0.5]
Test TPR: 0.8974358974358975
Test AUC: 0.5584994263454202
def p():
  x = 0.0
  index = 42
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x + 0.8)
  return x
XXX_output_XXX = p()


Training fitness: [0.0449438202247191, 0.490281384072056]
Test TPR: 0.8974358974358975
Test AUC: 0.6016836094879799
def p():
  x = 0.0
  index = 19
  if main[index] > sum(opposite) / 52:
    x = (x + 0.2)
  index = 36
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.00001)
  index = 14
  if main[index] < 1:
    if opposite[index] < main[index] + 0.3:
      x = (x + 0.000001)
  else:
    if main[index] < opposite[index] + 2:
      x = (x - 0.01)
    else:
      x = (x + 0.3)
  return x
XXX_output_XXX = p()


Training fitness: [0.38461538461538464, 0.5278956215480669]
Test TPR: 0.38461538461538464
Test AUC: 0.5278956215480669
def p():
  x = 0.0
  index = 18
  if main[index] < 1:
    if main[index] > main[index] + 0.4:
      x = (x + 0.01)
  else:
    if main[index] < opposite[index] + 7:
      x = (x + 0.7)
    else:
      x = (x + 0.000001)
  index = 0
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.0001)
  index = 33
  if sum(main) / 52 - sum(opposite) / 52 > main[index]:
    x = (x - 0.0001)
  index = 40
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x + 0.00001)
  return x
XXX_output_XXX = p()


