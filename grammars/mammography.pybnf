<p>::= <defp>{::}<callp>
<defp> ::= def p():{:x = 0.0{::}<code>{::}return x:}
<callp> ::= XXX_output_XXX = p()

# These are used to define indexes in data
<a> ::= n = <n>
<b> ::= b = <n>
<c> ::= c = <data>
<d> ::= GE_RANGE:10
<n> ::= GE_RANGE:51
<smaller> ::= 50 | 100 | 500 | 1000 | 5000
<larger> ::= 1000 | 5000 | 10000 
<index> ::= index = <n>

# Potential Recursion of comparison
<code> ::= <index>{::}<a>{::}<b>{::}<c>{::}<if> | <index>{::}<a>{::}<b>{::}<c>{::}<if>{::}<code> | <index>{::}<a>{::}<b>{::}<c>{::}<if>{::}<code>{::}<code> | <index>{::}<a>{::}<b>{::}<c>{::}<if>{::}<code>{::}<code>{::}<code>

# If statements to fill out the trees
<if> ::= <compareSum> | if <data> <eval> <data>:{:x = <expr>:} | if c <eval> <data>:{:x = <expr>:} | if <point> > <point> + <d>:{:x = <expr>:} | if <point> < <point> + <d>:{:x = <expr>:}
<compareSum> ::= if abs(<mainPartial> - <oppositePartial>) > <smaller>:{:x = <expr>:} | if abs(sum(main) - sum(opposite)) > <larger>:{:x = <expr>:}
<data> ::= <n_avg> | <point> | <combo>
<eval> ::= > | <
<expr> ::= <const> | (x + <const>) | (x - <const>) | (x * <const>) | (x / <const>)
<const> ::= 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8 | 0.9 | 1.0

<combo> ::= <data> <combine> <data>
# Operation set
<combine> ::= + | - | * | /

# Values of features for each breast
<point> ::= main[b] | opposite[b] | main[<n>] | opposite[<n>]
<n_avg> ::= <mainPartial> | <oppositePartial>
<mainPartial> ::= sum(main[-index:]) | sum(main[:-index])
<oppositePartial> ::= sum(opposite[-index:]) | sum(opposite[:-index])
<n_avg_total> ::= sum(main) | sum(opposite)
