Generation:
60

Phenotype:
def p():
  x = 0.0
  index = 19
  if main[index] - opposite[index] + main[index] - opposite[index] + opposite[index] - opposite[index] + opposite[index] - opposite[index] + sum(main[:-index]) - sum(main[:-index]) > opposite[index] + main[index] - main[index] + opposite[index] + opposite[index] + opposite[index] - main[index] - opposite[index] + sum(main[-index:]) - main[index]:
    x = (x + 0.7)
  index = 7
  if sum(opposite[:-index]) > main[index]:
    x = (x + 1.0)
  index = 38
  if main[index] + main[index] - opposite[index] + main[index] > main[index] - main[index]:
    x = (x - 0.8)
  index = 43
  if sum(opposite[-index:]) < opposite[index] - opposite[index] + opposite[index]:
    x = (x - 0.001)
  index = 10
  if sum(main[-index:]) > main[index] - opposite[index] + sum(opposite[:-index]):
    x = (x - 0.000001)
  index = 4
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x - 1.0)
  index = 36
  if main[index] < 1:
    if opposite[index] < main[index] + 0.001:
      x = (x + 0.8)
  else:
    if main[index] < main[index] + 8:
      x = (x + 0.7)
    else:
      x = (x - 0.5)
  index = 25
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.6:
      x = (x - 0.2)
  else:
    if opposite[index] > main[index] + 6:
      x = (x + 0.001)
    else:
      x = (x - 0.7)
  index = 34
  if opposite[index] < opposite[index]:
    x = (x - 0.4)
  index = 46
  if opposite[index] < opposite[index]:
    x = (x + 0.7)
  index = 44
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.3)
  index = 43
  if opposite[index] < opposite[index]:
    x = (x + 0.1)
  index = 15
  if opposite[index] > opposite[index]:
    x = (x - 0.01)
  index = 12
  if main[index] < 1:
    if main[index] > opposite[index] + 0.7:
      x = (x + 0.3)
  else:
    if main[index] > main[index] + 8:
      x = (x - 0.01)
    else:
      x = (x + 0.1)
  index = 18
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.00001)
  index = 4
  if main[index] < 1:
    if main[index] < main[index] + 0.0001:
      x = (x - 0.0000001)
  else:
    if main[index] > main[index] + 8:
      x = (x + 0.00001)
    else:
      x = (x - 0.6)
  index = 22
  if sum(opposite[-index:]) < sum(opposite[:-index]):
    x = (x + 0.1)
  index = 35
  if sum(main[-index:]) < sum(main[:-index]):
    x = (x + 0.6)
  index = 31
  if main[index] < main[index]:
    x = (x - 0.8)
  index = 20
  if main[index] < main[index]:
    x = (x - 0.7)
  index = 27
  if main[index] < opposite[index]:
    x = (x + 0.2)
  index = 10
  if main[index] < 1:
    if main[index] > opposite[index] + 0.01:
      x = (x - 0.0000001)
  else:
    if opposite[index] > main[index] + 1:
      x = (x + 0.0000001)
    else:
      x = (x + 0.5)
  index = 11
  if opposite[index] < sum(main[:-index]):
    x = (x - 0.000001)
  index = 31
  if main[index] < opposite[index]:
    x = (x - 0.9)
  index = 8
  if main[index] > main[index]:
    x = (x - 0.5)
  index = 12
  if sum(opposite[-index:]) > opposite[index]:
    x = (x - 0.5)
  index = 30
  if opposite[index] > main[index]:
    x = (x + 0.7)
  index = 40
  if main[index] > main[index]:
    x = (x + 0.0001)
  index = 36
  if main[index] < main[index]:
    x = (x + 0.000001)
  index = 26
  if main[index] < 1:
    if opposite[index] > opposite[index] + 1.0:
      x = (x + 0.6)
  else:
    if opposite[index] < main[index] + 5:
      x = (x - 0.5)
    else:
      x = (x - 0.001)
  index = 19
  if main[index] > opposite[index]:
    x = (x - 1.0)
  index = 26
  if main[index] > opposite[index]:
    x = (x - 0.001)
  index = 42
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.6:
      x = (x + 0.3)
  else:
    if main[index] > opposite[index] + 9:
      x = (x + 0.2)
    else:
      x = (x + 0.0000001)
  index = 8
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x - 0.8)
  index = 14
  if main[index] < 1:
    if opposite[index] > main[index] + 0.8:
      x = (x + 0.5)
  else:
    if main[index] > main[index] + 7:
      x = (x - 0.0001)
    else:
      x = (x - 0.2)
  index = 16
  if main[index] > opposite[index]:
    x = (x - 0.5)
  index = 35
  if opposite[index] > main[index]:
    x = (x + 0.001)
  index = 17
  if opposite[index] - opposite[index] - opposite[index] - opposite[index] > sum(main[-index:]):
    x = (x - 0.3)
  index = 50
  if opposite[index] > main[index]:
    x = (x - 0.9)
  index = 20
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.6)
  index = 16
  if main[index] < opposite[index] + opposite[index] - main[index]:
    x = (x + 0.000001)
  index = 6
  if main[index] < 1:
    if main[index] < main[index] + 0.3:
      x = (x + 0.6)
  else:
    if main[index] > main[index] + 5:
      x = (x + 0.6)
    else:
      x = (x + 0.00001)
  index = 47
  if main[index] < 1:
    if main[index] < opposite[index] + 0.4:
      x = (x - 0.3)
  else:
    if main[index] > opposite[index] + 9:
      x = (x - 0.9)
    else:
      x = (x - 0.3)
  index = 2
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x - 0.0000001)
  index = 16
  if main[index] < 1:
    if opposite[index] > main[index] + 1.0:
      x = (x + 0.2)
  else:
    if opposite[index] > main[index] + 0:
      x = (x + 0.1)
    else:
      x = (x - 1.0)
  index = 12
  if sum(opposite[-index:]) - sum(main[-index:]) < sum(main[-index:]) + sum(main[:-index]):
    x = (x - 0.01)
  index = 2
  if main[index] < 1:
    if main[index] > main[index] + 0.0001:
      x = (x + 0.2)
  else:
    if main[index] > opposite[index] + 0:
      x = (x - 0.0000001)
    else:
      x = (x + 0.000001)
  index = 46
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.00001)
  index = 33
  if main[index] < main[index]:
    x = (x + 0.9)
  index = 26
  if main[index] > opposite[index]:
    x = (x + 0.9)
  index = 40
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x + 0.2)
  index = 48
  if main[index] < main[index]:
    x = (x - 0.0001)
  index = 8
  if main[index] > opposite[index]:
    x = (x - 0.9)
  index = 23
  if opposite[index] < sum(opposite[:-index]):
    x = (x + 0.1)
  index = 14
  if main[index] < main[index]:
    x = (x + 0.8)
  index = 41
  if main[index] < opposite[index]:
    x = (x - 0.00001)
  index = 17
  if opposite[index] > main[index]:
    x = (x + 0.2)
  index = 4
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 1000:
    x = (x - 0.0000001)
  index = 43
  if sum(main[-index:]) + main[index] + main[index] + sum(main[:-index]) > sum(main[:-index]):
    x = (x - 0.7)
  index = 32
  if main[index] > sum(main[:-index]):
    x = (x - 0.1)
  index = 9
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.000001)
  index = 0
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.9)
  index = 1
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.3)
  index = 36
  if opposite[index] < sum(main[-index:]):
    x = (x + 0.7)
  index = 15
  if opposite[index] - main[index] > sum(opposite[-index:]):
    x = (x - 0.00001)
  index = 10
  if main[index] < 1:
    if opposite[index] > main[index] + 0.00001:
      x = (x - 0.4)
  else:
    if main[index] < opposite[index] + 1:
      x = (x + 0.9)
    else:
      x = (x + 0.2)
  index = 4
  if opposite[index] < main[index]:
    x = (x - 0.01)
  index = 3
  if main[index] < opposite[index]:
    x = (x - 0.6)
  index = 16
  if opposite[index] > opposite[index]:
    x = (x + 0.3)
  index = 28
  if main[index] - main[index] < main[index]:
    x = (x + 0.4)
  index = 7
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.9)
  index = 39
  if opposite[index] < main[index]:
    x = (x - 0.00001)
  index = 37
  if main[index] < main[index]:
    x = (x + 0.9)
  index = 13
  if opposite[index] < opposite[index]:
    x = (x - 0.0001)
  index = 33
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.7)
  index = 9
  if opposite[index] < main[index]:
    x = (x + 0.7)
  index = 8
  if main[index] > opposite[index]:
    x = (x - 0.3)
  index = 7
  if opposite[index] < sum(opposite[-index:]):
    x = (x + 0.001)
  index = 12
  if opposite[index] > opposite[index]:
    x = (x - 0.2)
  index = 41
  if opposite[index] > opposite[index]:
    x = (x + 0.001)
  index = 28
  if main[index] + main[index] < opposite[index] + main[index]:
    x = (x + 0.7)
  index = 18
  if opposite[index] + opposite[index] - main[index] < main[index]:
    x = (x + 0.01)
  index = 47
  if sum(main[:-index]) > opposite[index] - main[index]:
    x = (x + 0.8)
  index = 33
  if main[index] < sum(main[-index:]) + sum(opposite[-index:]):
    x = (x + 0.1)
  index = 39
  if main[index] - main[index] > main[index] - main[index]:
    x = (x - 0.6)
  index = 27
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.3)
  index = 40
  if main[index] < opposite[index]:
    x = (x + 0.00001)
  index = 39
  if main[index] > main[index]:
    x = (x + 0.00001)
  index = 4
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.5)
  index = 35
  if main[index] < 1:
    if main[index] > main[index] + 0.4:
      x = (x - 0.000001)
  else:
    if main[index] < main[index] + 3:
      x = (x + 0.3)
    else:
      x = (x - 0.2)
  index = 13
  if opposite[index] > opposite[index]:
    x = (x - 0.01)
  index = 13
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.3)
  index = 31
  if main[index] < 1:
    if opposite[index] > main[index] + 1.0:
      x = (x + 0.01)
  else:
    if main[index] > opposite[index] + 5:
      x = (x + 1.0)
    else:
      x = (x + 0.5)
  index = 43
  if main[index] < 1:
    if main[index] < opposite[index] + 0.7:
      x = (x - 0.0000001)
  else:
    if main[index] < main[index] + 5:
      x = (x + 0.7)
    else:
      x = (x + 0.9)
  index = 0
  if main[index] > opposite[index]:
    x = (x + 1.0)
  index = 48
  if sum(main[:-index]) + main[index] - sum(opposite[:-index]) < sum(main[-index:]):
    x = (x + 0.0000001)
  index = 13
  if opposite[index] + main[index] - opposite[index] + main[index] < sum(opposite[:-index]) + main[index] - main[index]:
    x = (x + 0.2)
  index = 10
  if main[index] < 1:
    if main[index] < opposite[index] + 0.0000001:
      x = (x + 0.0000001)
  else:
    if opposite[index] > main[index] + 6:
      x = (x + 0.8)
    else:
      x = (x + 0.01)
  index = 27
  if main[index] < main[index] - opposite[index] + main[index] + opposite[index]:
    x = (x + 0.3)
  index = 11
  if main[index] + opposite[index] < main[index] - sum(opposite[-index:]) - opposite[index]:
    x = (x + 0.1)
  index = 4
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 1000:
    x = (x - 0.00001)
  index = 37
  if opposite[index] - sum(opposite[-index:]) + main[index] + main[index] > sum(main[:-index]) - sum(main[:-index]) + sum(main[:-index]):
    x = (x - 0.0001)
  index = 33
  if main[index] + main[index] - main[index] < main[index] + main[index] + sum(opposite[:-index]) - sum(opposite[:-index]):
    x = (x - 0.4)
  index = 2
  if opposite[index] + sum(opposite[-index:]) > main[index] + main[index] - sum(opposite[:-index]):
    x = (x + 0.6)
  index = 31
  if opposite[index] - opposite[index] < sum(opposite[:-index]) + opposite[index] + opposite[index] - sum(main[-index:]):
    x = (x + 0.0000001)
  index = 27
  if main[index] > sum(main[:-index]) - sum(opposite[-index:]) + opposite[index]:
    x = (x - 0.000001)
  index = 49
  if opposite[index] < opposite[index]:
    x = (x + 0.4)
  index = 37
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.2:
      x = (x + 0.0001)
  else:
    if opposite[index] < main[index] + 0:
      x = (x + 0.5)
    else:
      x = (x - 0.5)
  index = 29
  if main[index] < 1:
    if main[index] < opposite[index] + 0.2:
      x = (x - 0.000001)
  else:
    if main[index] > opposite[index] + 8:
      x = (x + 0.01)
    else:
      x = (x - 0.3)
  index = 40
  if main[index] < main[index] - sum(main[:-index]):
    x = (x + 0.1)
  index = 3
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.1)
  index = 26
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.7)
  index = 18
  if main[index] > sum(main[-index:]):
    x = (x - 0.5)
  index = 2
  if sum(main[:-index]) > sum(main[:-index]) - sum(opposite[:-index]):
    x = (x + 0.4)
  index = 50
  if opposite[index] - opposite[index] + opposite[index] - main[index] < sum(main[:-index]):
    x = (x + 0.001)
  index = 25
  if sum(main[-index:]) - main[index] + opposite[index] - opposite[index] + opposite[index] < main[index] + opposite[index] + opposite[index] + main[index] + main[index]:
    x = (x + 1.0)
  index = 2
  if sum(opposite[:-index]) < sum(main[:-index]) - sum(opposite[-index:]) + sum(main[:-index]):
    x = (x + 0.3)
  index = 21
  if sum(main[:-index]) > opposite[index]:
    x = (x - 0.001)
  index = 16
  if opposite[index] - sum(opposite[:-index]) > opposite[index]:
    x = (x + 0.0001)
  index = 7
  if sum(opposite[-index:]) > opposite[index] - sum(main[-index:]):
    x = (x + 0.000001)
  index = 28
  if main[index] < opposite[index] - main[index]:
    x = (x + 0.2)
  index = 30
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.5:
      x = (x + 0.9)
  else:
    if opposite[index] > opposite[index] + 9:
      x = (x + 0.7)
    else:
      x = (x + 0.0001)
  index = 20
  if opposite[index] + sum(opposite[-index:]) < sum(opposite[-index:]):
    x = (x - 0.0001)
  index = 10
  if main[index] < 1:
    if opposite[index] > main[index] + 0.000001:
      x = (x - 0.0000001)
  else:
    if main[index] > opposite[index] + 8:
      x = (x + 0.001)
    else:
      x = (x - 0.000001)
  index = 32
  if sum(main[:-index]) < main[index]:
    x = (x + 0.5)
  index = 11
  if main[index] < 1:
    if main[index] < opposite[index] + 0.8:
      x = (x - 0.00001)
  else:
    if main[index] < opposite[index] + 3:
      x = (x - 0.9)
    else:
      x = (x - 0.0001)
  index = 1
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.0000001)
  index = 30
  if opposite[index] > opposite[index]:
    x = (x + 0.001)
  index = 33
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.9)
  index = 40
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.001)
  index = 27
  if main[index] > main[index]:
    x = (x - 0.7)
  index = 29
  if main[index] > opposite[index]:
    x = (x + 0.7)
  index = 40
  if sum(opposite[-index:]) < main[index]:
    x = (x + 0.0000001)
  return x
XXX_output_XXX = p()

Genotype:
[5409, 62045, 99966, 39107, 45187, 4312, 13553, 4116, 61688, 7746, 5166, 19723, 85852, 52367, 17308, 13628, 12803, 95621, 22499, 3435, 34696, 31249, 35547, 80618, 52364, 88563, 61388, 51798, 80288, 21202, 59608, 95025, 97453, 49376, 45128, 61792, 63439, 25534, 67193, 766, 39414, 72216, 26475, 71950, 34251, 99194, 55354, 4658, 53850, 4747, 86683, 73316, 94253, 21577, 62500, 42938, 54424, 27598, 75568, 50517, 43611, 49619, 1144, 65724, 21620, 88849, 70585, 14768, 42304, 60707, 78023, 22167, 39675, 39395, 88209, 53477, 62518, 13013, 74809, 48585, 74908, 57417, 76219, 34897, 66461, 66934, 78574, 2531, 69394, 78628, 83453, 27051, 75694, 57558, 48058, 81598, 16864, 71780, 19762, 54234, 37495, 60960, 60263, 39266, 28834, 7998, 50017, 30154, 64513, 5116, 43354, 35139, 93168, 18975, 28172, 7810, 75575, 10496, 55330, 64991, 18608, 9724, 50489, 15545, 41872, 66309, 36413, 24692, 9736, 4951, 10823, 75751, 46330, 64231, 28809, 5525, 70480, 86591, 86117, 44904, 46850, 20812, 97316, 87143, 85378, 20497, 22965, 81366, 25017, 58620, 61201, 64209, 10148, 85712, 63059, 42678, 20663, 84922, 80864, 4034, 2318, 93231, 48176, 54609, 80187, 35261, 90430, 96309, 67352, 69274, 3005, 38203, 99816, 645, 53384, 95149, 40325, 77875, 44285, 91323, 77992, 67827, 78850, 6556, 78241, 38900, 7573, 8760, 53777, 17890, 69011, 56985, 61252, 1081, 71962, 71558, 78735, 97617, 79759, 20865, 14475, 25807, 75254, 67096, 89123, 93556, 86087, 17076, 55155, 54823, 3953, 6272, 84469, 5872, 42365, 46845, 99751, 79044, 99980, 20485, 21876, 88462, 36971, 37088, 70978, 57937, 44721, 63249, 2745, 68949, 62411, 96061, 35103, 90350, 76389, 21798, 88126, 38945, 49216, 94386, 59415, 92720, 20267, 26691, 5165, 3525, 48427, 41623, 62138, 91024, 54556, 15524, 71377, 46628, 61350, 87666, 50896, 91834, 77094, 66481, 25064, 1489, 86674, 63850, 11811, 61272, 4601, 97282, 49423, 79905, 21068, 17641, 24651, 69459, 15343, 84191, 49750, 85768, 24059, 51950, 30289, 48940, 32731, 42103, 26845, 85810, 29528, 5872, 64379, 23807, 24216, 33271, 99850, 51710, 87152, 10073, 30355, 95504, 54284, 70036, 44992, 31155, 36223, 63860, 56607, 35444, 69745, 43276, 50711, 36166, 66829, 16203, 15037, 18227, 30560, 19080, 57271, 23043, 60930, 28488, 78933, 80591, 60000, 56171, 23228, 58347, 7399, 65224, 68290, 82216, 90584, 93667, 97900, 74068, 14811, 40766, 77801, 97708, 84450, 53731, 59374, 5263, 73706, 61867, 99627, 20786, 56857, 24727, 26683, 81322, 90587, 36186, 25824, 11418, 76659, 77998, 15539, 46715, 95045, 65366, 46001, 48992, 72097, 94064, 3336, 13464, 56700, 59368, 35155, 14155, 95182, 37432, 84622, 85359, 568, 28740, 85116, 86626, 19480, 75700, 15624, 1341, 62127, 15442, 46035, 27325, 54137, 57245, 96946, 18852, 7051, 64768, 88052, 92870, 57224, 93353, 46675, 77332, 37571, 8418, 28395, 12242, 86306, 37839, 74280, 51932, 12802, 38888, 17757, 77186, 8900, 7920, 3575, 34888, 37540, 53703, 83211, 92257, 68769, 51949, 69604, 66129, 87383, 43539, 991, 8519, 26615, 64854, 85430, 76289, 52391, 94411, 53365, 41842, 35023, 7497, 73780, 83210, 89064, 50713, 31381, 739, 57094, 7292, 41770, 96448, 85132, 51071, 67720, 75737, 89056, 64669, 16866, 94347, 84478, 32733, 27668, 14472, 17459, 20503, 88517, 53566, 27220, 22082, 92171, 95348, 82480, 3832, 58025, 41579, 59984, 68545, 10251, 4170, 79330, 45541, 49804, 95700, 82331, 78608, 59845, 48111, 65253, 34058, 30571, 4500, 65730, 75708, 11129, 37492, 56792, 9703, 61925, 53351, 80242, 43189, 5686, 20588, 9072, 51044, 26337, 18932, 21742, 9802, 85609, 17201, 33370, 97388, 52224, 38410, 68690, 31945, 19572, 87080, 17856, 62547, 34303, 89985, 79310, 76590, 59866, 52749, 52206, 71123, 62467, 6274, 52936, 73693, 75127, 36231, 53727, 77693, 45188, 9575, 33110, 74586, 56155, 64496, 42523, 57356, 15104, 17772, 24284, 75924, 16148, 74446, 34506, 27458, 11779, 34864, 10519, 17032, 94305, 63904, 65461, 3197, 76171, 34639, 90138, 97718, 3699, 91694, 43678, 60633, 58194, 40446, 24167, 82530, 5807, 30131, 66943, 42198, 65242, 46888, 939, 89090, 17657, 78621, 52585, 70113, 84107, 98863, 38201, 70182, 40961, 50362, 87112, 33335, 299, 26935, 13882, 11350, 36754, 13001, 481, 16939, 24207, 64361, 69750, 32102, 1453, 72942, 66284, 52856, 4582, 61317, 97225, 42373, 6707, 64587, 65439, 65479, 55380, 47365, 21652, 1922, 80500, 4229, 14581, 1562, 2368, 69503, 54016, 63157, 14127, 38593, 59626, 5080, 24404, 91504, 34277, 81998, 35563, 83074, 65900, 5673, 24938, 24915, 24474, 27916, 67235, 97175, 28001, 91079, 65794, 90228, 49046, 3300, 46116, 30805, 61138, 44896, 98353, 97166, 9114, 38257, 84184, 92933, 31313, 52448, 70090, 85459, 19468, 68423, 6940, 68032, 55854, 75200, 74495, 46757, 24144, 9440, 6984, 28259, 74441, 69535, 14351, 90162, 64133, 20370, 98804, 5750, 27939, 62579, 82449, 24491, 35423, 67752, 57624, 3728, 19125, 20221, 65520, 87099, 55074, 64624, 38774, 87843, 19024, 57474, 51637, 75228, 18284, 69761, 38867, 81509, 53741, 66333, 31201, 82568, 92372, 1646, 91128, 87377, 37407, 65781, 583, 62972, 91413, 57696, 74932, 20992, 29591, 31344, 2889, 2868, 9776, 53066, 50140, 63377, 46358, 48301, 83439, 79502, 96991, 91447, 46848, 8676, 22597, 52606, 71382, 47575, 10041, 28361, 88733, 42721, 96325, 66832, 53459, 25071, 21034, 70086, 22836, 57475, 45960, 89679, 87593, 91116, 57085, 93713, 94633, 99974, 65969, 62828, 53649, 53463, 80553, 76411, 36475, 30226, 86012, 93782, 13716, 99755, 40823, 69268, 87907, 20736, 51063, 85998, 36708, 17968, 32942, 77349, 37730, 85004, 70512, 43230, 21617, 59352, 83646, 28933, 97127, 89300, 9111, 70083, 84392, 21743, 73462, 9911, 37053, 67159, 83110, 38624, 21201, 38665, 40375, 89822, 94488, 128, 73582, 42680, 36742, 69082, 29836, 77619, 68392, 24281, 7900, 1468, 17479, 35746, 62834, 49656, 46020, 94132, 70108, 62120, 73360, 50647, 33225, 14890, 52148, 94045, 70558, 39597, 82170, 82194, 16340, 80102, 76880, 24587, 31864, 37238, 32255, 16141, 55144, 90387, 68436, 49949, 72320, 7458, 75861, 58400, 27154, 45990, 95890, 26866, 49605, 54390, 47023, 37126, 46871, 62576, 73477, 84351, 81439, 24450, 97065, 21387, 73763, 48556, 20898, 1067, 91481, 3656, 23442, 96998, 29450, 90614, 44445, 13190, 27536, 56785, 33999, 30805, 12712, 85814, 69154, 99213, 60375, 97501, 20107, 28449, 96376, 6565, 83985, 78463, 46273, 46937, 41407, 25972, 47500, 69011, 4826, 37115, 89104, 28067, 41557, 92912, 99609, 49860, 7096, 16450, 54453, 95622, 47715, 8706, 36779, 24465, 9212, 28984, 9365, 3009, 21685, 42559, 4893, 89839, 12024, 17310, 60089, 29218, 53816, 74153, 91344, 61745, 3312, 66898, 66324, 55968, 59125, 46292, 23243, 92488, 52800, 99253, 8379, 32275, 91106, 69196, 56554, 58942, 27275, 61804, 82174, 43120, 79467, 55972, 21774, 75242, 71470, 91053, 59263, 76999, 29741, 57057, 12857, 64376, 19897, 93591, 7873, 13497, 1561, 4822, 96233, 70755, 20965, 50407, 1573, 75092, 27584, 4057, 63389, 59543, 76509, 77868, 6460, 91750, 31420, 30937, 49856, 54361, 31763, 54052, 38191, 39904, 30432, 43276, 37593, 18434, 46576, 40678, 82509, 11682, 39808, 28622, 42882, 87717, 50979, 47734, 26711, 79709, 4152, 35774, 80426, 67765, 33721, 79793, 6756, 20201, 73085, 48073, 42925, 14173, 63591, 63864, 42327, 54072, 7819, 69537, 50906, 25663, 8380, 8055, 15850, 46701, 818, 45326, 79060, 23116, 98168, 43846, 27358, 75768, 28191, 2779, 94669, 39368, 41957, 78732, 92199, 83199, 87661, 74572, 14945, 24772, 54231, 56325, 74755, 934, 62711, 84411, 12283, 99795, 5849, 72679, 58828, 73851, 34506, 35522, 17018, 61019, 89949, 22934, 8968, 66269, 99411, 40876, 91821, 18161, 7485, 98874, 10468, 67049, 32489, 20694, 40726, 27879, 25455, 71107, 19861, 17689, 73039, 38286, 52017, 88252, 9983, 87290, 16266, 60152, 5591, 53959, 29330, 34569, 3856, 46197, 23434, 84640, 51796, 15507, 96672, 4704, 55416, 55990, 43589, 61339, 16596, 19230, 40184, 55167, 67948, 11422, 70868, 4573, 62943, 82925, 12374, 39720, 32770, 44958, 34278, 48075, 17971, 16624, 49474, 96929, 57078, 77644, 32465, 98545, 25990, 48575, 15730, 84917, 12023, 75274, 52108, 38999, 84653, 71112, 7302, 11323, 89131, 85772, 86186, 54057, 65548, 20710, 143, 15706, 93877, 38063, 87847, 91864, 30588, 56179, 17661, 91164, 1154, 94351, 55365, 19450, 85036, 60851, 46419, 44808, 84014, 19904, 32281, 38200, 59737, 72226, 73861, 44916, 47491, 72860, 32874, 68104, 69730, 49334, 70085, 7129, 6680, 26120, 38059, 92828, 79878, 8107, 13585, 50566, 57815, 35748, 93623, 62919, 52398, 71820, 47234, 9606, 72187, 19544, 14476, 85726, 74323, 98551, 23143, 22794, 66136, 85141, 11968, 60980, 90303, 57866, 65319, 91120, 49774, 36626, 25785, 3268, 77847, 26145, 3260, 80648, 87603, 20800, 30755, 20733, 83897, 84781, 98526, 75222, 82949, 1237, 73286, 90904, 31705, 47814, 92884, 79159, 11722, 82104, 67426, 13915, 64567, 86785, 70087, 54694, 51703, 54407, 3805, 26589, 82116, 96273, 25529, 27795, 38812, 50980, 19546, 86651, 32496, 4727, 46212, 61624, 37916, 24353, 97236, 79478, 42154, 83932, 83496, 64712, 51782, 92481, 79313, 45006, 14814, 57074, 60176, 87741, 48122, 7830, 99527, 34787, 49906, 51540, 43284, 9784, 31133, 52757, 85410, 48614, 59495, 55382, 87723, 52689, 4072, 88598, 92878, 65822, 11353, 53776, 82829, 23401, 65470, 559, 89406, 45541, 61711, 7168, 30623, 50551, 12476, 90695, 5128, 9079, 75635, 78180, 25399, 25061, 62330, 35894, 68711, 11344, 25686, 46312, 30106, 88253, 17636, 13628, 81826, 75167, 50692, 29734, 36916, 2733, 94541, 12033, 96849, 69553, 92594, 2890, 88023, 3741, 85330, 73459, 74915, 98154, 15018, 34846, 48820, 58249, 44789, 935, 84210, 37464, 48871, 73309, 7132, 39343, 82234, 33130, 19617, 64830, 56860, 43999, 95239, 34477, 3637, 45744, 62682, 59142, 57230, 6938, 91627, 7907, 55847, 51211, 67306, 81595, 84554, 66120, 75176, 80624, 16523, 52552, 57109, 96878, 25088, 52894, 96870, 7204, 54758, 53402, 96365, 96531, 53000, 3823, 34699, 44181, 83467, 97972, 17512, 95663, 54184, 17437, 33294, 49815, 53436, 84743, 39272, 22510, 2041, 35700, 97124, 85006, 7266, 13678, 20446, 76380, 16713, 44697, 15263, 11302, 41921, 67921, 37367, 25525, 8175, 47055, 4492, 57190, 79367, 62016, 54961, 36400, 1601, 97707, 76252, 68596, 93487, 45324, 49110, 95626, 53837, 85321, 75655, 31266, 74519, 52403, 64471, 77020, 60815, 85138, 4320, 94505, 79893, 25326, 1285, 12923, 93898, 21354, 10385, 48337, 28438, 47552, 40804, 19668, 46358, 80492, 62978, 99620, 16879, 28447, 84363, 13145, 28082, 54031, 15064, 34283, 83084, 12254, 44501, 42763, 76427, 47618, 27920, 92230, 94234, 83741, 76824, 23655, 13428, 37075, 72366, 16506, 17504, 19282, 49039, 46318, 30073, 49665, 17167, 4825, 61006, 65590, 1224, 12293, 77727, 65590, 52627, 78086, 32743, 60383, 32548, 65561, 63820, 18086, 48791, 67638, 49146, 89442, 23869, 83930, 13844, 98917, 76798, 7978, 54058, 8261, 76036, 94885, 93670, 49684, 25383, 42915, 80158, 13644, 38830, 57946, 79084, 1348, 39247, 74467, 86186, 41980, 30658, 52280, 66619, 68912, 8263, 59794, 24195, 22085, 56010, 69385, 36391, 46818, 59876, 22546, 72702, 30210, 850, 7631, 63024, 78673, 17469, 55095, 20471, 51121, 2137, 83098, 93877, 24176, 49704, 10776, 15523, 57241, 57656, 52451, 51829, 42291, 27476, 73109, 10222, 85051, 77391, 94211, 77328, 68098, 21975, 61792, 88721, 90163, 45070, 40043, 50271, 62551, 58963, 39947, 75826, 59571, 60430, 75946, 10972, 13669, 5969, 43562, 25610, 32152, 43020, 93519, 58621, 36946, 21382, 98449, 24349, 7187, 92803, 33711, 87913, 19154, 26801, 42261, 1656, 42353, 73967, 51415, 82718, 15592, 9241, 9846, 60463, 33074, 7671, 77232, 95943, 78529, 83137, 19395, 28416, 77793, 58586, 29647, 96548, 31684, 29270, 37002, 61838, 8321, 7296, 27603, 10757, 4465, 2479, 19746, 6164, 17698, 96964, 83852, 3836, 17739, 64461, 22471, 28846, 75643, 1008, 57822, 93763, 61626, 8272, 80744, 26076, 45630, 15679, 32291, 23191, 54816, 71471, 31977, 49429, 55405, 42557, 47499, 84874, 99311, 11059, 5131, 49397, 80926, 37438, 15657, 75253, 2594, 18218, 59455, 11843, 74972, 24692, 59256, 71888, 45201, 75802, 42902, 81448, 44510, 93737, 74793, 13987, 95319, 14356, 48288, 10463, 85008, 80935, 26632, 31806, 27913, 94168, 68362, 42933, 2389, 21430, 22342, 27196, 99750, 36493, 18651, 13395, 25481, 14708, 23242, 66337, 1569, 45593, 69410, 86260, 23645, 35496, 19531, 12702, 93978, 3513, 73836, 12781, 57990, 58426, 69418, 31030, 19928, 34747, 3553, 31294, 25183, 72223, 78580, 60155, 35137, 91950, 23091, 20534, 46243, 96975, 40850, 86080, 51629, 70705, 82671, 16613, 59414, 66411, 69432, 1644, 70785, 82068, 81461, 98545, 70932, 13724, 91484, 54718, 82518, 67796, 25965, 49659, 88026, 53515, 64755, 27126, 66913, 36848, 81038, 41263, 92570, 84591, 54343, 30824, 94978, 70513, 55155, 9538, 57777, 23396, 65138, 22754, 39851, 22481, 68639, 8533, 52178, 10473, 90773, 46215, 43691, 27342, 30919, 39231, 13059, 86063, 90942, 34814, 46210, 76084, 51379, 59095, 27698, 77659, 84470, 22127, 25980, 6318, 31675, 73860, 75107, 47300, 11887, 31489, 1940, 73160, 8128, 1702, 30187, 83094, 51226, 78482, 41966, 20784, 68484, 80473, 48100, 54013, 20700, 25404, 99555, 74508, 81672, 76559, 84535, 30493, 30749, 142, 54242, 35520, 28971, 86352, 82998, 73888, 36368, 2057, 60417, 80216, 26345, 11443, 13368, 43712, 1630, 6811, 88699, 35432, 80647, 70690, 62284, 82867, 96970, 60685, 26718, 92723, 9962, 94409, 63159, 28896, 17570, 86008, 21664, 72114, 85070, 10870, 14150, 94949, 90452, 34336, 95708, 66537, 71100, 95293, 66699, 25220, 89744, 45565, 41018, 55122, 25417, 35627, 85645, 77144, 22700, 82117, 8697, 87614, 26881, 37, 50257, 1507, 80632, 21566, 80936, 51753, 59690, 33260, 45726, 82682, 75489, 86019, 90372, 94834, 31074, 33856, 75468, 92027, 88368, 27159, 94240, 2876, 16072, 98109, 53944, 28849, 26188, 23818, 88157, 94168, 57622, 61703, 82661, 33736, 2871, 22406, 37061, 68442, 3575, 66831, 40398, 12396, 70354, 67980, 51224, 81449, 17637, 5209, 48132, 52642, 56665, 32274, 67418, 77342, 73967, 45697, 17212, 53005, 77826, 96635, 40374, 2263, 19155, 11564, 4708, 15101, 34530, 6058, 14976, 60328, 22542, 94127, 97129, 3104, 78452, 7562, 85496, 34263, 91573, 18335, 46806, 52488, 42850, 4692, 50923, 78609, 93069, 9656, 19849, 44081, 24604, 46817, 34429, 63703, 39658, 28215, 55963, 10018, 59806, 86474, 54001, 88684, 54724, 26575, 37244, 27865, 170, 56350, 48551, 88530, 94081, 95040, 55909, 32709, 17297, 95970, 10399, 80658, 68718, 42960, 12641, 48952, 45557, 53868, 62937, 38758, 94965, 19449, 85092, 52499, 63295, 89741, 41986, 12963, 18654, 54102, 61933, 9234, 38395, 57606, 67228, 83640, 85480, 17588, 5679, 38620, 86086, 89434, 51345, 31231, 16342, 89420, 22738, 70912, 60752, 48252, 47542, 17034, 29607, 83139, 92713, 55084, 65158, 45114, 5455, 3201, 19536, 80025, 97470, 11004, 8389, 38970, 4772, 60318, 36880, 91159, 79410, 32485, 24231, 84891, 19765, 7803, 22123, 55549, 90680, 1965, 14918, 85800, 30673, 58370, 206, 76084, 65940, 69525, 88035, 93923, 47610, 85697, 35963, 410, 66066, 86631, 36294, 30546, 74583, 3695, 7904, 98519, 66869, 68632, 56618, 62096, 37884, 44231, 45088, 95254, 87532, 64337, 7053, 21869, 13973, 33734, 12382, 48980, 97623, 21905, 38750, 82121, 81823, 37185, 82040, 13951, 96857, 97019, 73532, 98564, 38494, 40671, 56904, 71306, 29604, 82417, 92599, 11829, 37789, 53105, 24621, 36018, 60274, 61104, 27936, 86859, 79787, 9071, 70954, 65567, 46893, 11063, 61298, 29708, 8412, 21581, 61305, 23293, 5968, 71437, 69496, 48603, 10159, 40211, 7129, 27458, 4320, 8914, 52713, 45954, 22213, 8787, 67705, 52875, 3935, 20912, 98511, 1567, 84085, 36646, 62398, 9511, 26422, 1259, 99891, 33290, 69683, 38090, 95390, 90276, 42871, 30054, 49225, 98194, 54164, 38154, 31356, 69667, 87301, 55400, 2056, 17341, 95598, 59796, 41038, 40987, 89349, 67300, 86809, 90144, 94536, 17338, 51470, 64912, 5986, 5359, 30505, 69008, 21032, 94672, 35829, 3316, 22597, 9043, 89590, 45636, 59625, 7627, 88716, 55135, 60467, 76714, 82611, 79090, 11564, 99034, 51432, 63972, 72280, 2498, 91043, 3566, 70886, 87846, 3717, 93536, 64990, 13631, 75521, 14359, 39497, 80403, 84186, 30214, 90171, 750, 82101, 23589, 95637, 50597, 91243, 79654, 75223, 11360, 45673, 74465, 46665, 66950, 67397, 93108, 93437, 1251, 84721, 35948, 60805, 80675, 86017, 82658, 98925, 97130, 82622, 1806, 30213, 91861, 92949, 55143, 13177, 9204, 28273, 61854, 27002, 42832, 72566, 49562, 52872, 32098, 63947, 53498, 15617, 60146, 12631, 46881, 19624, 60052, 26127, 7592, 84686, 39469, 88422, 19196, 53280, 84033, 90766, 27641, 86287, 65523, 80450, 88212, 48400, 35854, 32023, 24927, 73688, 25680, 14739, 5605, 94657, 39107, 36921, 17936, 14848, 2737, 44670, 94816, 37603, 19770, 49841, 73318, 23589, 41263, 56843, 79388, 11774, 28851, 45997, 68488, 17026, 74579, 57476, 84061, 19171, 92878, 88857, 34164, 99640, 74409, 70344, 13886, 95666, 33138, 6049, 88938, 3622, 79174, 58625, 92697, 33822, 84830, 94069, 64667, 20302, 98351, 74570, 55637, 57945, 26514, 83747, 22123, 36107, 9503, 36205, 67144, 3874, 8674, 90072, 6858, 69885, 2382, 44543, 80444, 16935, 76734, 53618, 20210, 46982, 41328, 59420, 12588, 30266, 22862, 14016, 20396, 43030, 73584, 250, 19013, 83440, 28725, 40604, 61410, 65394, 48875, 77824, 85295, 29187, 69344, 24627, 42196, 14777, 10884, 30485, 9617, 89073, 48811, 31232, 48098, 96669, 5193, 85979, 96205, 61500, 43467, 45639, 45708, 63387, 16284, 54148, 32598, 6585, 49395, 4701, 15722, 9905, 36195, 21521, 56643, 99062, 1537, 4380, 82194, 667, 50125, 36179, 71913, 97088, 42842, 81917, 94139, 45315, 95857, 19087, 87951, 71204, 74494, 39146, 54290, 56557, 30711, 4644, 55909, 32029, 82199, 71223, 32918, 67732, 81914, 80266, 2465, 86012, 91902, 47167, 20959, 44648, 23047, 73086, 15051, 26340, 93911, 72469, 89768, 91815, 17658, 57047, 25875, 2284, 43207, 10284, 3193, 70730, 48737, 46354, 94632, 79960, 15192, 15297, 54783, 57687, 8142, 83214, 72626, 4427, 99283, 51501, 50153, 79931, 73276, 47167, 91164, 71283, 23891, 40091, 16804, 41910, 8993, 30760, 58933, 68238, 95225, 88549, 23592, 65886, 12772, 73299, 73690, 54871, 89886, 78573, 93435, 89237, 10810, 22363, 88046, 58732, 95041, 62539, 49318, 48501, 81614, 26116, 77951, 29364, 62627, 82930, 55989, 34856, 73749, 15758, 45827, 4900, 50218, 92332, 56169, 96601, 42411, 12585, 80691, 28807, 63725, 66427, 88012, 45668, 59546, 70737, 33809, 37744, 16214, 66386, 50643, 80388, 81365, 28549, 99628, 98168, 29840, 75768, 52100, 49610, 29472, 44468, 26263, 14832, 25781, 52368, 55436, 96075, 23139, 33425, 61800, 99590, 14814, 45469, 28650, 83812, 92667, 32677, 3349, 3513, 95874, 45174, 59212, 75240, 39649, 56796, 25304, 94736, 79049, 61464, 20129, 12021, 33153, 72405, 42956, 97124, 90390, 8840, 67890, 20180, 98625, 7200, 77534, 82775, 36834, 28902, 79851, 56229, 55523, 33953, 53446, 49266, 48000, 90503, 79285, 33805, 59680, 77126, 9484, 42733, 22436, 59727, 25141, 53209, 27678, 74792, 33137, 38088, 24062, 9347, 78609, 81694, 56772, 39300, 28944, 70973, 64102, 61025, 38484, 57041, 69264, 61826, 27215, 53438, 35184, 86023, 78892, 77675, 8953, 43183, 29668, 50394, 37290, 73772, 49115, 38447, 3911, 80649, 82924, 86610, 59216, 39799, 17644, 74300, 91414, 23790, 97138, 44508, 30115, 91866, 24444, 89902, 43844, 19365, 81046, 54732, 53256, 19639, 38332, 93578, 19715, 18104, 80929, 6126, 95062, 58582, 51483, 65518, 11977, 70315, 65474, 73246, 14555, 23400, 20070, 66148, 58775, 79812, 95755, 37799, 40990, 74154, 31557, 2206, 46915, 35271, 20863, 61395, 72223, 53200, 18390, 66172, 3142, 11438, 29476, 70438, 20040, 95052, 68995, 78052, 53444, 37548, 84493, 34036, 57465, 40747, 74991, 40184, 48299, 69838, 45673, 4001, 98313, 27904, 99953, 39768, 65536, 92295, 14051, 21374, 44453, 79949, 66538, 21486, 95614, 73544, 49699, 38890, 80212, 64050, 39593, 74155, 71112, 94234, 99933, 15886, 61300, 47032, 50409, 63663, 49737, 68887, 93654, 76785, 61962, 68663, 56226, 81228, 37542, 52968, 53556, 90132, 97268, 27722, 88392, 32889, 97069, 53918, 42336, 75873, 40578, 76522, 98391, 39592, 12204, 52647, 17727, 76090, 5704, 1645, 64122, 53414, 52195, 97395, 91438, 72208, 66161, 41289, 38167, 84803, 17084, 45831, 38124, 10202, 56845, 20170, 66011, 29488, 58036, 53825, 24194, 50545, 21180, 91737, 88847, 20825, 71345, 75175, 67107, 68668, 22210, 28325, 76356, 8283, 40323, 31346, 51894, 35507, 18378, 94386, 98496, 49598, 12018, 60160, 61426, 33627, 98988, 97391, 67705, 40822, 84118, 97601, 66970, 54002, 453, 59314, 43191, 91413, 19628, 38467, 65576, 84705, 3467, 47620, 32536, 91842, 28556, 50959, 63471, 94747, 12782, 45261, 50881, 2549, 40626, 42742, 68155, 79715, 93017, 8746, 91016, 62244, 14273, 35659, 12107, 41172, 10007, 13211, 4477, 27210, 87741, 73398, 77253, 87249, 89353, 93400, 26638, 41906, 41072, 19185, 67239, 92691, 4866, 58519, 88012, 50007, 72667, 7477, 93166, 79266, 95040, 6344, 95769, 39225, 88362, 33510, 81938, 3288, 46208, 97087, 97089, 62398, 91109, 70896, 61728, 33283, 98421, 83075, 6514, 48180, 23396, 10529, 56225, 5034, 58978, 22413, 82002, 21882, 57492, 89233, 80653, 67509, 17000, 39815, 42872, 98749, 79248, 55528, 13413, 94754, 56691, 47452, 7429, 72325, 96392, 42514, 16707, 33283, 21698, 75296, 86052, 2474, 95227, 13820, 74742, 60648, 24848, 61909, 37684, 1544, 87402, 83900, 9395, 88030, 85394, 6599, 83680, 27619, 96443, 6078, 87093, 42705, 89283, 2982, 45372, 92208, 44753, 90555, 37360, 74788, 70580, 35066, 64190, 72751, 35902, 46563, 42224, 94953, 51845, 94852, 17080, 37036, 13418, 51091, 68910, 37797, 38131, 94282, 75658, 95515, 87246, 88470, 75354, 54574, 44826, 72123, 13265, 63632, 83750, 26560, 17068, 3242, 5747, 12512, 83700, 34257, 54713, 97634, 79869, 29838, 39382, 60293, 77839, 23758, 60349, 86011, 84075, 35352, 23475, 32880, 20097, 21997, 24184, 83162, 84648, 4275, 54492, 6412, 85915, 6069, 44075, 90078, 48169, 38225, 37799, 97796, 22358, 35574, 43189, 36490, 95474, 5798, 81871, 23085, 25440, 26676, 85722, 12463, 21200, 94455, 29774, 26843, 92597, 58992, 42003, 30596, 11711, 99758, 90753, 4010, 12630, 73967, 73904, 6148, 66350, 47932, 60208, 10236, 52061, 65273, 35892, 15207, 3310, 27408, 29140, 58777, 93796, 91418, 40537, 18416, 4403, 79202, 53298, 79939, 24388, 96197, 68431, 73595, 55890, 7969, 46423, 53141, 4633, 7722, 34829, 98798, 59939, 31089, 10079, 67503, 30136, 54590, 15760]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}))) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})))) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}))))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))))))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})))))) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})))) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))))))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}))))) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))))) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index])))))))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :})))) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}))))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Training fitness:
[0.9118723849372385, 0.5047995318989824]
Test fitness:
[0.5125, 0.5133328961175236]