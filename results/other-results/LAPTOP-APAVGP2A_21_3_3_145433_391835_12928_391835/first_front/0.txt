Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 2
  n = 24
  b = 47
  c = sum(opposite[:-index]) * main[30] - sum(main[:-index])
  if sum(main[:-index]) > opposite[27] / sum(main[:-index]) * sum(main[:-index]):
    x = (x * 0.7)
  index = 22
  n = 49
  b = 23
  c = sum(main[:-index])
  if opposite[b] < opposite[41] + 5:
    x = (x * 0.9)
  index = 34
  n = 29
  b = 32
  c = sum(main[-index:])
  if opposite[35] < main[b] + 8:
    x = 0.1
  index = 41
  n = 14
  b = 49
  c = opposite[40]
  if opposite[44] < main[37] + 8:
    x = (x + 0.4)
  index = 36
  n = 34
  b = 17
  c = sum(opposite[:-index])
  if main[b] < main[b] + 4:
    x = 0.4
  index = 36
  n = 19
  b = 9
  c = sum(opposite[-index:])
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.7)
  index = 6
  n = 9
  b = 46
  c = main[b]
  if main[32] < opposite[43] + 7:
    x = (x * 0.4)
  index = 1
  n = 4
  b = 3
  c = opposite[b]
  if opposite[b] > main[b]:
    x = (x - 0.4)
  index = 30
  n = 26
  b = 15
  c = sum(opposite[-index:])
  if opposite[b] < sum(main[:-index]):
    x = 0.4
  index = 13
  n = 43
  b = 39
  c = opposite[b]
  if main[b] > main[17] + 3:
    x = (x * 0.2)
  index = 41
  n = 44
  b = 38
  c = opposite[b]
  if main[b] > opposite[b] + 6:
    x = (x + 0.6)
  index = 35
  n = 6
  b = 2
  c = sum(opposite[-index:])
  if c > opposite[b]:
    x = (x / 0.1)
  index = 5
  n = 41
  b = 36
  c = opposite[b] * main[b]
  if c > opposite[b] + main[b]:
    x = (x * 0.5)
  index = 4
  n = 48
  b = 4
  c = opposite[49]
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x * 0.8)
  index = 30
  n = 48
  b = 12
  c = main[b]
  if c < main[b]:
    x = (x - 0.9)
  index = 43
  n = 12
  b = 27
  c = main[b]
  if main[b] > main[b]:
    x = (x * 0.5)
  index = 9
  n = 36
  b = 15
  c = main[b]
  if main[b] > opposite[b]:
    x = (x * 0.8)
  index = 4
  n = 18
  b = 30
  c = opposite[b]
  if main[19] < main[39] - main[b] * main[b]:
    x = (x + 0.6)
  index = 43
  n = 10
  b = 38
  c = sum(opposite[-index:])
  if opposite[b] > main[b] + 4:
    x = (x / 0.9)
  index = 4
  n = 18
  b = 29
  c = main[b]
  if opposite[19] > opposite[b] + 9:
    x = (x / 0.6)
  index = 21
  n = 44
  b = 36
  c = sum(main[:-index])
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.6)
  index = 11
  n = 26
  b = 3
  c = main[b]
  if main[32] > main[b] + 6:
    x = (x - 0.4)
  index = 15
  n = 40
  b = 20
  c = opposite[b]
  if opposite[5] > main[b] + 9:
    x = (x * 0.9)
  index = 27
  n = 15
  b = 44
  c = sum(main[:-index])
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 5000:
    x = 0.5
  index = 41
  n = 33
  b = 5
  c = main[b]
  if opposite[36] > main[31] + 7:
    x = 0.8
  index = 36
  n = 6
  b = 3
  c = opposite[b]
  if c < main[b]:
    x = (x / 0.7)
  index = 39
  n = 26
  b = 29
  c = opposite[b] * main[b]
  if c > opposite[b] - main[b]:
    x = (x + 0.4)
  index = 4
  n = 45
  b = 36
  c = opposite[1]
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 1000:
    x = (x + 0.8)
  index = 26
  n = 19
  b = 11
  c = opposite[b]
  if opposite[8] > opposite[5] + 2:
    x = (x - 1.0)
  index = 47
  n = 28
  b = 37
  c = main[b]
  if main[32] < opposite[b] + 6:
    x = (x / 0.8)
  index = 1
  n = 40
  b = 13
  c = opposite[b]
  if main[32] > main[25] + 6:
    x = (x + 0.1)
  return x
XXX_output_XXX = p()

Genotype:
[49265, 10517, 807, 58306, 49716, 55066, 50463, 73555, 56606, 61541, 42928, 94751, 71475, 98673, 37366, 66605, 79182, 98725, 43374, 569, 46054, 97765, 52080, 93337, 34751, 34021, 55961, 68551, 54757, 54676, 12934, 70928, 96646, 3080, 14318, 1145, 90782, 68001, 14125, 92187, 60273, 6074, 33078, 71109, 60887, 16615, 97424, 99368, 22676, 15795, 58707, 74055, 23962, 46780, 55059, 95075, 30994, 21818, 88010, 39874, 31897, 16465, 74503, 9574, 39609, 11667, 68461, 85067, 5815, 25229, 49206, 77108, 46077, 25222, 99161, 1390, 11130, 62696, 86692, 18832, 64801, 36576, 66777, 16166, 54160, 75589, 95138, 22831, 74155, 92468, 1682, 14048, 77619, 19720, 10678, 66808, 92450, 44271, 99475, 9022, 10628, 48227, 53936, 96768, 17644, 35402, 63352, 39236, 18236, 67254, 17499, 89437, 31174, 56495, 53435, 45242, 97495, 16710, 84300, 13653, 99522, 49813, 26202, 66184, 63889, 60641, 34980, 41689, 15030, 50620, 40985, 30224, 86080, 67125, 17320, 83607, 46463, 52763, 9566, 28, 34463, 71165, 11615, 30479, 48554, 43398, 85222, 21558, 86374, 27848, 73715, 72359, 24176, 14992, 66923, 10510, 81803, 67602, 82643, 4055, 32819, 19968, 68925, 41140, 94576, 8620, 64628, 80473, 21359, 59923, 77519, 98890, 61032, 98800, 5988, 87663, 53891, 59168, 66879, 4416, 21284, 43265, 10561, 3680, 51273, 32648, 90305, 229, 76861, 83736, 3826, 32132, 89828, 26273, 17346, 48423, 18724, 64670, 46604, 84556, 95001, 69779, 52924, 93116, 67039, 41977, 57629, 12478, 56760, 71326, 86756, 88830, 11901, 69201, 41484, 39284, 26611, 39457, 41784, 79309, 66415, 94212, 96349, 74791, 29503, 46003, 33879, 34972, 48781, 67906, 77702, 31483, 16070, 13823, 497, 31504, 98562, 81600, 53351, 32408, 45308, 19786, 36687, 25665, 38672, 78669, 22925, 60556, 24926, 7634, 72635, 90174, 20681, 68412, 20060, 75514, 22506, 21442, 53927, 9079, 98802, 74419, 99949, 41495, 28961, 30450, 35772, 49843, 17860, 95381, 77200, 54088, 5047, 27619, 10417, 74190, 35225, 47511, 31907, 10093, 42704, 98054, 68474, 10168, 6016, 63553, 97735, 82038, 56563, 87751, 56505, 21994, 9964, 30458, 50020, 31363, 60946, 57168, 1673, 52648, 90837, 94216, 39442, 58610, 94078, 77092, 43825, 17514, 74765, 88722, 86269, 32455, 27708, 67564, 84382, 36532, 15802, 35503, 42433, 7859, 26189, 62026, 11472, 29776, 77823, 86018, 82036, 76204, 36051, 27481, 16848, 54500, 15788, 31203, 39856, 38701, 33358, 38950, 49471, 13443, 20664, 5896, 31796, 81861, 4849, 84517, 96490, 97985, 89161, 61472, 67611, 76332, 22272, 54492, 46807, 21026, 2549, 36478, 42607, 87783, 97372, 5614, 61063, 86239, 88741, 31371, 35285, 23861, 62426, 95561, 85083, 90433, 36202, 98706, 46301, 94232, 89313, 59048, 77643, 72183, 80029, 83411, 99145, 855, 40366, 58149, 77425, 59952, 62642, 98532, 45943, 14896, 24890, 45395, 77949, 89000, 58806, 36410, 3291, 28626, 53043, 57486, 3289, 1387, 38182, 86226, 30897, 71755, 93726, 91256, 33190, 69604, 63475, 66113, 30342, 32009, 51933, 75306, 80088, 25457, 38185, 21470, 22352, 13018, 42154, 27906, 48659, 58869, 56183, 74200, 78505, 44955, 50772, 25653, 23227, 1870, 45879, 13318, 41774, 71767, 20403, 2877, 17647, 67784, 6683, 3466, 65873, 59591, 6819, 58078, 53020, 47238, 58414, 10896, 86908, 7971, 55290, 7736, 26991, 76881, 95591, 47473, 7696, 50906, 7272, 35006, 36873, 99288, 38237, 30646, 30746, 36915, 99783, 20876, 18956, 10105, 84052, 10900, 11773, 99121, 83134, 91783, 95114, 43965, 92823, 33750, 12287, 15916, 3939, 51535, 64898, 20208, 32359, 41609, 60685, 10632, 1280, 20549, 66939, 86495, 41565, 86551, 16767, 757, 23288, 59292, 89389, 57949, 90987, 55682, 36474, 83069, 46878, 62485, 39274, 20363, 58630, 1761, 28191, 85041, 61144, 73039, 80798, 1612, 86668, 48282, 91813, 23876, 89588, 67393, 95416, 80216, 71676, 70493, 1962, 66245, 9821, 10588, 41948, 75007, 44849, 11312, 3496, 79391, 8467, 24572, 87906, 71258, 19431, 79529, 62359, 29823, 33006, 68160, 86601, 63952, 1699, 60735, 97314, 3467, 71305, 79277, 31875, 10605, 68327, 16222, 86246, 47721, 65672, 30903, 64251, 42511, 60165, 4095, 90238, 84831, 88939, 71456, 12968, 75973, 24568, 33701, 60489, 80389, 82180, 96120, 94257, 34160, 53245, 33796, 82006, 63517, 88729, 75197, 17194, 12806, 18747, 16913, 91009, 45856, 98173, 78932, 12448, 89276, 91285, 1503, 65644, 66162, 30468, 68411, 87254, 16285, 41173, 85809, 39575, 97076, 381, 92356, 72757, 36771, 74153, 22808, 57217, 6922, 37245, 62206, 28491, 34926, 8069, 43427, 76587, 64330, 10336, 60522, 82865, 78307, 55081, 54864, 15570, 20733, 57152, 10979, 42746, 64909, 25858, 19022, 24598, 52939, 46144, 12764, 49018, 36697, 60786, 44915, 58346, 62191, 19588, 67062, 34085, 29662, 94605, 45801, 56851, 64678, 11272, 12446, 10463, 70873, 33936, 69685, 71380, 19007, 59655, 44795, 81477, 87489, 34514, 92808, 14704, 59115, 35681, 19997, 85705, 85355, 64297, 80251, 16580, 58763, 1622, 16185, 73393, 14539, 38667, 77738, 18885, 4352, 80581, 5094, 23599, 30159, 56282, 13829, 90634, 74012, 56744, 82345, 30800, 44631, 67108, 82416, 51540, 64345, 7409, 45113, 17610, 30560, 2957, 68151, 60517, 43323, 21005, 61885, 45752, 20188, 25724, 62546, 79886, 95729, 87171, 48838, 29749, 80951, 29989, 38099, 21823, 16739, 76282, 63766, 91834, 49167, 8518, 23475, 14828, 87777, 41138, 82999, 42940, 78582, 65043, 1241, 79823, 44578, 88668, 84121, 34629, 64345, 84030, 15339, 11853, 83636, 97558, 80294, 18691, 16744, 32743, 64516, 57789, 72521, 42344, 11547, 3774, 28022, 45513, 13611, 81913, 77907, 70331, 6173, 73332, 81279, 38052, 50172, 43310, 11118, 46812, 68414, 414, 79861, 45431, 13493, 11335, 66051, 62289, 13106, 94440, 30778, 15849, 81045, 66535, 14267, 99868, 32178, 41454, 43463, 20211, 92429, 29680, 35541, 41391, 23430, 16958, 27694, 4631, 76768, 74319, 84676, 41826, 99614, 60277, 4194, 56445, 45927, 70226, 75481, 17323, 59420, 46714, 1165, 74703, 57094, 12054, 44358, 37086, 57532, 90918, 66992, 25608, 62654, 4624, 77695, 98330, 42907, 22106, 47696, 64798, 20421, 41199, 57871, 54942, 95672, 61133, 90100, 71191, 94277, 16970, 9085, 5337, 53674, 94611, 13428, 94332, 85933, 75034, 46212, 16297, 41294, 42005, 4006, 97426, 59462, 19159, 23585, 84832, 2754, 33851, 85601, 62007, 35913, 76924, 89606, 74365, 78626, 38236, 32446, 46150, 9970, 9009, 4649, 17082, 69207, 14271, 2658, 46445, 2, 68002, 13299, 69934, 87785]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 2)) {::} (<a> n =  (<n> 24)) {::} (<b> b =  (<n> 47)) {::} (<c> c =  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> *)   (<data> (<combo> (<data> (<point> main[ (<n> 30) ]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))))) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[ (<n> 27) ]))   (<combine> /)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> *)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))))) :{:x =  (<expr> (x *  (<const> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<a> n =  (<n> 49)) {::} (<b> b =  (<n> 23)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> if  (<point> opposite[b])  <  (<point> opposite[ (<n> 41) ])  +  (<d> 5) :{:x =  (<expr> (x *  (<const> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<a> n =  (<n> 29)) {::} (<b> b =  (<n> 32)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> if  (<point> opposite[ (<n> 35) ])  <  (<point> main[b])  +  (<d> 8) :{:x =  (<expr> (<const> 0.1)) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<a> n =  (<n> 14)) {::} (<b> b =  (<n> 49)) {::} (<c> c =  (<data> (<point> opposite[ (<n> 40) ]))) {::} (<if> if  (<point> opposite[ (<n> 44) ])  <  (<point> main[ (<n> 37) ])  +  (<d> 8) :{:x =  (<expr> (x +  (<const> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<a> n =  (<n> 34)) {::} (<b> b =  (<n> 17)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))) {::} (<if> if  (<point> main[b])  <  (<point> main[b])  +  (<d> 4) :{:x =  (<expr> (<const> 0.4)) :}) {::} (<code> (<index> index =  (<n> 36)) {::} (<a> n =  (<n> 19)) {::} (<b> b =  (<n> 9)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<a> n =  (<n> 9)) {::} (<b> b =  (<n> 46)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[ (<n> 32) ])  <  (<point> opposite[ (<n> 43) ])  +  (<d> 7) :{:x =  (<expr> (x *  (<const> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<a> n =  (<n> 4)) {::} (<b> b =  (<n> 3)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<data> (<point> opposite[b]))   (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x -  (<const> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 30)) {::} (<a> n =  (<n> 26)) {::} (<b> b =  (<n> 15)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))) {::} (<if> if  (<data> (<point> opposite[b]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (<const> 0.4)) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<a> n =  (<n> 43)) {::} (<b> b =  (<n> 39)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[b])  >  (<point> main[ (<n> 17) ])  +  (<d> 3) :{:x =  (<expr> (x *  (<const> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<a> n =  (<n> 44)) {::} (<b> b =  (<n> 38)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[b])  >  (<point> opposite[b])  +  (<d> 6) :{:x =  (<expr> (x +  (<const> 0.6) )) :}))))) {::} (<code> (<index> index =  (<n> 35)) {::} (<a> n =  (<n> 6)) {::} (<b> b =  (<n> 2)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))) {::} (<if> if c  (<eval> >)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x /  (<const> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<a> n =  (<n> 41)) {::} (<b> b =  (<n> 36)) {::} (<c> c =  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> *)   (<data> (<point> main[b]))))) {::} (<if> if c  (<eval> >)   (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> +)   (<data> (<point> main[b])))) :{:x =  (<expr> (x *  (<const> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 4)) {::} (<c> c =  (<data> (<point> opposite[ (<n> 49) ]))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x *  (<const> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 12)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x -  (<const> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<a> n =  (<n> 12)) {::} (<b> b =  (<n> 27)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x *  (<const> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<a> n =  (<n> 36)) {::} (<b> b =  (<n> 15)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> >)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x *  (<const> 0.8) )) :})))))) {::} (<code> (<index> index =  (<n> 4)) {::} (<a> n =  (<n> 18)) {::} (<b> b =  (<n> 30)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<data> (<point> main[ (<n> 19) ]))   (<eval> <)   (<data> (<combo> (<data> (<point> main[ (<n> 39) ]))   (<combine> -)   (<data> (<combo> (<data> (<point> main[b]))   (<combine> *)   (<data> (<point> main[b])))))) :{:x =  (<expr> (x +  (<const> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<a> n =  (<n> 10)) {::} (<b> b =  (<n> 38)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))) {::} (<if> if  (<point> opposite[b])  >  (<point> main[b])  +  (<d> 4) :{:x =  (<expr> (x /  (<const> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<a> n =  (<n> 18)) {::} (<b> b =  (<n> 29)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 19) ])  >  (<point> opposite[b])  +  (<d> 9) :{:x =  (<expr> (x /  (<const> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<a> n =  (<n> 44)) {::} (<b> b =  (<n> 36)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<const> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<a> n =  (<n> 26)) {::} (<b> b =  (<n> 3)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[ (<n> 32) ])  >  (<point> main[b])  +  (<d> 6) :{:x =  (<expr> (x -  (<const> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<a> n =  (<n> 40)) {::} (<b> b =  (<n> 20)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 5) ])  >  (<point> main[b])  +  (<d> 9) :{:x =  (<expr> (x *  (<const> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 27)) {::} (<a> n =  (<n> 15)) {::} (<b> b =  (<n> 44)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (<const> 0.5)) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<a> n =  (<n> 33)) {::} (<b> b =  (<n> 5)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 36) ])  >  (<point> main[ (<n> 31) ])  +  (<d> 7) :{:x =  (<expr> (<const> 0.8)) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<a> n =  (<n> 6)) {::} (<b> b =  (<n> 3)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x /  (<const> 0.7) )) :})))) {::} (<code> (<index> index =  (<n> 39)) {::} (<a> n =  (<n> 26)) {::} (<b> b =  (<n> 29)) {::} (<c> c =  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> *)   (<data> (<point> main[b]))))) {::} (<if> if c  (<eval> >)   (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> -)   (<data> (<point> main[b])))) :{:x =  (<expr> (x +  (<const> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<a> n =  (<n> 45)) {::} (<b> b =  (<n> 36)) {::} (<c> c =  (<data> (<point> opposite[ (<n> 1) ]))) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<const> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 26)) {::} (<a> n =  (<n> 19)) {::} (<b> b =  (<n> 11)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 8) ])  >  (<point> opposite[ (<n> 5) ])  +  (<d> 2) :{:x =  (<expr> (x -  (<const> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<a> n =  (<n> 28)) {::} (<b> b =  (<n> 37)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[ (<n> 32) ])  <  (<point> opposite[b])  +  (<d> 6) :{:x =  (<expr> (x /  (<const> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<a> n =  (<n> 40)) {::} (<b> b =  (<n> 13)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[ (<n> 32) ])  >  (<point> main[ (<n> 25) ])  +  (<d> 6) :{:x =  (<expr> (x +  (<const> 0.1) )) :}))))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9731515022373748, 0.9804905584209187]