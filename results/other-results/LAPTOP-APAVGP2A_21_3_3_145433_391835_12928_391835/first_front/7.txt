Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 24
  n = 37
  b = 13
  c = sum(opposite[:-index])
  if sum(main[-index:]) > sum(main[-index:]):
    x = (x + 1.0)
  index = 38
  n = 14
  b = 33
  c = sum(main[:-index])
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.5)
  index = 28
  n = 33
  b = 10
  c = sum(opposite[:-index])
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 100:
    x = 0.9
  return x
XXX_output_XXX = p()

Genotype:
[53530, 55184, 95445, 98340, 88790, 96490, 25677, 91565, 44536, 53271, 79850, 67341, 45136, 16130, 13532, 31296, 1485, 24976, 68927, 47609, 141, 96036, 75493, 37448, 40644, 78883, 15651, 89589, 9463, 79773, 7070, 41630, 8652, 69840, 30802, 54334, 68786, 15200, 32659, 88029, 35557, 26151, 82311, 1269, 5970, 20328, 85278, 24798, 42750, 74697, 84620, 15159, 18113, 97227, 76623, 22748, 65622, 72144, 57194, 32227, 48088, 53943, 9973, 93253, 75925, 73370, 58782, 28202, 69573, 66099, 55585, 57188, 7805, 28586, 7792, 13834, 40564, 54584, 60459, 79552, 49714, 65059, 29375, 18825, 50436, 478, 50047]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 24)) {::} (<a> n =  (<n> 37)) {::} (<b> b =  (<n> 13)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<const> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<a> n =  (<n> 14)) {::} (<b> b =  (<n> 33)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<const> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<a> n =  (<n> 33)) {::} (<b> b =  (<n> 10)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (<const> 0.9)) :}))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9965906669507778, 0.5522169021028398]