Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 24
  n = 5
  b = 37
  c = opposite[b] - opposite[b]
  if main[14] > opposite[42] + 2:
    x = (x / 0.1)
  index = 39
  n = 4
  b = 38
  c = main[10]
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 5000:
    x = (x / 0.5)
  index = 50
  n = 5
  b = 35
  c = main[b]
  if opposite[34] > main[b] + 7:
    x = (x / 0.7)
  index = 46
  n = 21
  b = 49
  c = opposite[b]
  if c > main[b]:
    x = 0.7
  index = 8
  n = 26
  b = 34
  c = opposite[b]
  if main[b] < main[b]:
    x = (x * 0.1)
  index = 23
  n = 5
  b = 33
  c = sum(main[-index:])
  if main[b] < main[41] + 3:
    x = (x * 0.5)
  index = 16
  n = 42
  b = 43
  c = opposite[b]
  if opposite[20] > main[40] + 5:
    x = 1.0
  index = 33
  n = 45
  b = 41
  c = opposite[b]
  if main[b] < main[b]:
    x = (x - 1.0)
  index = 4
  n = 41
  b = 31
  c = opposite[b]
  if opposite[b] < opposite[b] + 6:
    x = (x + 0.7)
  index = 46
  n = 37
  b = 7
  c = sum(opposite[-index:])
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.5)
  index = 42
  n = 43
  b = 16
  c = main[b]
  if opposite[b] < opposite[26] + 6:
    x = 0.3
  return x
XXX_output_XXX = p()

Genotype:
[22519, 58212, 41139, 34227, 27831, 7807, 89705, 71458, 42469, 72675, 87799, 43951, 38733, 80208, 8516, 32320, 13698, 46076, 55100, 74272, 48208, 40286, 77680, 22648, 55060, 93939, 14593, 87080, 86980, 3711, 5439, 19243, 27442, 60542, 8621, 36880, 24209, 82861, 70920, 35947, 48436, 43787, 8349, 12517, 64723, 13250, 42565, 19947, 70015, 57880, 32016, 76188, 37179, 14656, 5709, 36354, 81748, 28133, 52106, 43864, 86248, 45880, 93771, 75967, 14329, 667, 42356, 22579, 56939, 67606, 38938, 58798, 76999, 1527, 88173, 44270, 65536, 33685, 15262, 11590, 3566, 8949, 69860, 4847, 44279, 28522, 93285, 25779, 29041, 27012, 69553, 57141, 32168, 94988, 12056, 40771, 92342, 6133, 20242, 85009, 70484, 96810, 32581, 20187, 31948, 21397, 12169, 13650, 3682, 10189, 69121, 99441, 37545, 8504, 50676, 76834, 60254, 85740, 89210, 84473, 75287, 85956, 97292, 70468, 21550, 40317, 43824, 87005, 68632, 21479, 11204, 78668, 77933, 13819, 19596, 85535, 47779, 49056, 91057, 86727, 35665, 48556, 26093, 20140, 85555, 55196, 13954, 96020, 34141, 23299, 35112, 81200, 78268, 84472, 98904, 63503, 46843, 38647, 28879, 69941, 34051, 14817, 63309, 17613, 6810, 73961, 83513, 96096, 86513, 8079, 53644, 25074, 25199, 13939, 12729, 46915, 66899, 46160, 71820, 80905, 35254, 65725, 23137, 87338, 60396, 79240, 38884, 89801, 29086, 57352, 77934, 22020, 73507, 37278, 70951, 95865, 87729, 31762, 79154, 78201, 14351, 49084, 52417, 74070, 24229, 91469, 12277, 87702, 52315, 13888, 72782, 44307, 22897, 49680, 58947, 14389, 94585, 4922, 27399, 17849, 70416, 28270, 1140, 67117, 45129, 13150, 92149, 18194, 49073, 52814, 54649, 26913, 26052, 63163, 6947, 80232, 47835, 14763, 26856, 37608, 72152, 91873, 88896, 41333, 42364, 8827, 71770, 20681, 37287, 7896, 51832, 34761, 29120, 12084, 59085, 79917, 69940, 68310, 86446, 5587, 88653, 68731, 93517, 66833, 84425, 18093, 98874, 27225, 81727, 28213, 80888, 80747, 93047, 16276, 63196, 43608, 77643, 21300, 94070, 84362, 1846, 28143, 54571, 75720, 95855, 55947, 67582, 80477, 91332, 59861, 62651, 71836, 83267, 8199, 73475, 53378, 42418]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 24)) {::} (<a> n =  (<n> 5)) {::} (<b> b =  (<n> 37)) {::} (<c> c =  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> -)   (<data> (<point> opposite[b]))))) {::} (<if> if  (<point> main[ (<n> 14) ])  >  (<point> opposite[ (<n> 42) ])  +  (<d> 2) :{:x =  (<expr> (x /  (<const> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<a> n =  (<n> 4)) {::} (<b> b =  (<n> 38)) {::} (<c> c =  (<data> (<point> main[ (<n> 10) ]))) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x /  (<const> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<a> n =  (<n> 5)) {::} (<b> b =  (<n> 35)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 34) ])  >  (<point> main[b])  +  (<d> 7) :{:x =  (<expr> (x /  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<a> n =  (<n> 21)) {::} (<b> b =  (<n> 49)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (<const> 0.7)) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<a> n =  (<n> 26)) {::} (<b> b =  (<n> 34)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x *  (<const> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<a> n =  (<n> 5)) {::} (<b> b =  (<n> 33)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> if  (<point> main[b])  <  (<point> main[ (<n> 41) ])  +  (<d> 3) :{:x =  (<expr> (x *  (<const> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<a> n =  (<n> 42)) {::} (<b> b =  (<n> 43)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 20) ])  >  (<point> main[ (<n> 40) ])  +  (<d> 5) :{:x =  (<expr> (<const> 1.0)) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<a> n =  (<n> 45)) {::} (<b> b =  (<n> 41)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x -  (<const> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<a> n =  (<n> 41)) {::} (<b> b =  (<n> 31)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[b])  <  (<point> opposite[b])  +  (<d> 6) :{:x =  (<expr> (x +  (<const> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 46)) {::} (<a> n =  (<n> 37)) {::} (<b> b =  (<n> 7)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<const> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<a> n =  (<n> 43)) {::} (<b> b =  (<n> 16)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[b])  <  (<point> opposite[ (<n> 26) ])  +  (<d> 6) :{:x =  (<expr> (<const> 0.3)) :})))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[1.0, 0.5]