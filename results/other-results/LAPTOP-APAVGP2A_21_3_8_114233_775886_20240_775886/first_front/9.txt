Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 10
  n = 32
  b = 26
  c = main[b]
  if main[b] < main[17] + 9:
    x = (x + 0.8)
  index = 34
  n = 10
  b = 42
  c = opposite[b]
  if c > main[b]:
    x = (x / 0.3)
  index = 30
  n = 21
  b = 8
  c = opposite[b]
  if main[47] > opposite[b] + 6:
    x = (x / 0.6)
  index = 6
  n = 0
  b = 26
  c = main[b]
  if main[b] > main[21] + 0:
    x = 0.5
  return x
XXX_output_XXX = p()

Genotype:
[93202, 43835, 77168, 37139, 75404, 72887, 77830, 30514, 30492, 60078, 68456, 99404, 36805, 37228, 15393, 7099, 96711, 43722, 23834, 20132, 78276, 4915, 92157, 52487, 16920, 44758, 4509, 9969, 61020, 13133, 6940, 79634, 62025, 79847, 37083, 73677, 72530, 22042, 44341, 24632, 49249, 23868, 76958, 58519, 4004, 28539, 88760, 5024, 1764, 72652, 98132, 56376, 74815, 26405, 76146, 66045, 34678, 66347, 26200, 18004, 32870, 2696, 63689, 87476, 2372, 80193, 37087, 87970, 36372, 65865, 98071, 52877, 87794, 95183, 8960, 54575, 56563, 84997, 83088, 18628, 74364, 17456, 74315, 97323, 7512, 5102, 71148, 94175, 51102, 75906, 18764, 82489, 94726, 90621, 77315, 45099, 51585, 9676, 57995, 42027, 28805, 9120, 96719, 4622, 77013]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 10)) {::} (<a> n =  (<n> 32)) {::} (<b> b =  (<n> 26)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[b])  <  (<point> main[ (<n> 17) ])  +  (<d> 9) :{:x =  (<expr> (x +  (<const> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<a> n =  (<n> 10)) {::} (<b> b =  (<n> 42)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x /  (<const> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<a> n =  (<n> 21)) {::} (<b> b =  (<n> 8)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[ (<n> 47) ])  >  (<point> opposite[b])  +  (<d> 6) :{:x =  (<expr> (x /  (<const> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<a> n =  (<n> 0)) {::} (<b> b =  (<n> 26)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[b])  >  (<point> main[ (<n> 21) ])  +  (<d> 0) :{:x =  (<expr> (<const> 0.5)) :}))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[1.0, 0.5]