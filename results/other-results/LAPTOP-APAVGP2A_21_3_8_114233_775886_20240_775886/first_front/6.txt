Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 7
  n = 48
  b = 19
  c = sum(opposite[:-index])
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.7)
  index = 41
  n = 41
  b = 48
  c = opposite[10]
  if opposite[b] - main[b] < opposite[b] - main[b]:
    x = (x * 0.6)
  index = 30
  n = 49
  b = 25
  c = opposite[b] + main[b]
  if opposite[b] > main[b] + 6:
    x = (x / 0.6)
  index = 33
  n = 15
  b = 23
  c = sum(opposite[-index:])
  if sum(main[:-index]) > opposite[b]:
    x = (x / 1.0)
  index = 8
  n = 36
  b = 23
  c = sum(opposite[-index:])
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x * 0.7)
  index = 49
  n = 5
  b = 0
  c = main[b]
  if c < main[b]:
    x = 0.1
  index = 5
  n = 48
  b = 47
  c = opposite[b]
  if opposite[b] < main[1] + 0:
    x = (x + 0.4)
  index = 45
  n = 22
  b = 20
  c = sum(main[:-index])
  if main[10] > main[15] + 4:
    x = (x - 0.7)
  index = 47
  n = 42
  b = 43
  c = main[b]
  if main[34] > main[b] + 9:
    x = (x * 0.6)
  index = 31
  n = 32
  b = 25
  c = main[b]
  if opposite[b] < main[12] + 8:
    x = (x * 0.3)
  index = 42
  n = 29
  b = 13
  c = main[b] + opposite[b]
  if opposite[22] > main[b] + 3:
    x = (x / 0.3)
  index = 21
  n = 7
  b = 50
  c = sum(opposite[-index:])
  if c > main[46]:
    x = (x + 1.0)
  index = 10
  n = 5
  b = 9
  c = opposite[b]
  if main[8] < main[10] + 6:
    x = 0.2
  return x
XXX_output_XXX = p()

Genotype:
[46334, 40893, 66361, 84035, 56370, 90397, 85043, 1098, 74174, 62294, 77043, 16495, 464, 61473, 98132, 25796, 44600, 39971, 24142, 71122, 19903, 99998, 41432, 35312, 38021, 12, 61081, 96318, 3038, 63080, 67889, 60837, 60763, 88597, 66667, 20438, 21886, 50283, 60903, 84761, 66576, 2542, 64604, 28273, 33358, 58733, 65681, 28890, 18192, 8945, 24492, 16914, 32331, 92580, 32893, 42938, 77879, 2179, 52520, 61640, 28276, 71709, 69085, 59635, 5318, 13300, 69074, 67374, 43063, 48214, 64010, 50653, 8734, 55186, 98615, 22763, 39238, 33311, 24730, 23453, 83695, 37173, 23176, 65223, 1496, 96822, 89142, 71085, 90763, 40836, 15477, 29653, 82116, 89404, 31702, 32385, 76644, 65722, 57686, 82743, 48600, 89947, 12244, 58415, 48584, 71178, 60042, 13301, 87438, 51246, 20320, 23306, 31543, 50462, 74204, 53134, 14278, 63426, 9860, 77988, 45876, 96449, 80973, 71061, 49505, 52084, 64658, 72716, 87895, 30310, 71382, 17392, 76756, 92544, 72661, 60818, 78688, 50418, 73693, 11850, 51084, 60663, 65644, 48972, 21349, 1511, 76964, 95429, 81087, 99548, 8476, 56455, 97280, 74786, 10984, 96606, 74854, 77833, 66025, 55184, 96182, 28896, 90548, 46713, 43220, 95227, 70058, 29022, 15857, 3948, 78528, 99391, 44878, 74816, 49255, 12388, 87869, 90933, 66763, 86305, 88366, 4230, 87624, 83629, 93546, 2860, 11977, 58040, 3974, 62240, 11515, 91422, 3484, 91304, 34830, 91453, 40582, 88546, 58376, 69166, 82519, 46572, 36783, 37601, 41970, 18595, 26365, 80857, 6029, 59731, 87854, 46435, 50189, 67191, 68066, 44188, 1161, 6116, 35020, 29773, 85494, 18073, 55289, 54852, 46777, 99060, 8737, 69555, 66388, 84162, 30936, 74839, 38973, 73385, 76286, 80396, 25038, 75083, 73945, 6409, 65501, 4848, 67629, 67681, 95079, 45895, 66366, 16933, 12240, 42218, 14711, 59791, 10251, 4775, 10186, 39362, 43064, 86804, 7077, 35367, 54275, 70505, 39722, 83601, 14979, 48108, 2474, 13758, 24999, 80192, 59005, 87665, 92228, 78381, 73455, 32185, 31151, 56898, 85220, 81795, 66307, 73464, 74176, 4790, 9689, 64411, 88836, 14129, 84215, 60512, 1229, 27631, 31031, 78378, 62544, 93606, 96115, 66538, 176, 26890, 40515, 62239, 75542, 67535, 27707, 30794, 70244, 47941, 15184, 12346, 48593, 41329, 74708, 28828, 95173, 31609, 39741, 73359, 87178, 84248, 57670, 64868, 49940, 45861, 39970, 26451, 84261, 17994, 24804, 2386, 26456, 77885, 70947, 51461, 81454, 7872, 37302, 76141, 95129, 8631, 58721, 66106, 31487, 5179, 47413, 35493, 22333, 55693, 45622, 62739, 31539, 84001, 51314, 43973, 29647, 69113, 52196, 78133, 54108, 65345, 17123, 91016, 22450, 86010, 67637, 12954, 83757, 61658, 16550, 33076, 65246, 94965, 24451]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 7)) {::} (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 19)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<a> n =  (<n> 41)) {::} (<b> b =  (<n> 48)) {::} (<c> c =  (<data> (<point> opposite[ (<n> 10) ]))) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> -)   (<data> (<point> main[b]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> -)   (<data> (<point> main[b])))) :{:x =  (<expr> (x *  (<const> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<a> n =  (<n> 49)) {::} (<b> b =  (<n> 25)) {::} (<c> c =  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> +)   (<data> (<point> main[b]))))) {::} (<if> if  (<point> opposite[b])  >  (<point> main[b])  +  (<d> 6) :{:x =  (<expr> (x /  (<const> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<a> n =  (<n> 15)) {::} (<b> b =  (<n> 23)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x /  (<const> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<a> n =  (<n> 36)) {::} (<b> b =  (<n> 23)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x *  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<a> n =  (<n> 5)) {::} (<b> b =  (<n> 0)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (<const> 0.1)) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 47)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[b])  <  (<point> main[ (<n> 1) ])  +  (<d> 0) :{:x =  (<expr> (x +  (<const> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 45)) {::} (<a> n =  (<n> 22)) {::} (<b> b =  (<n> 20)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> if  (<point> main[ (<n> 10) ])  >  (<point> main[ (<n> 15) ])  +  (<d> 4) :{:x =  (<expr> (x -  (<const> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<a> n =  (<n> 42)) {::} (<b> b =  (<n> 43)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[ (<n> 34) ])  >  (<point> main[b])  +  (<d> 9) :{:x =  (<expr> (x *  (<const> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<a> n =  (<n> 32)) {::} (<b> b =  (<n> 25)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[b])  <  (<point> main[ (<n> 12) ])  +  (<d> 8) :{:x =  (<expr> (x *  (<const> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 42)) {::} (<a> n =  (<n> 29)) {::} (<b> b =  (<n> 13)) {::} (<c> c =  (<data> (<combo> (<data> (<point> main[b]))   (<combine> +)   (<data> (<point> opposite[b]))))) {::} (<if> if  (<point> opposite[ (<n> 22) ])  >  (<point> main[b])  +  (<d> 3) :{:x =  (<expr> (x /  (<const> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<a> n =  (<n> 7)) {::} (<b> b =  (<n> 50)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))) {::} (<if> if c  (<eval> >)   (<data> (<point> main[ (<n> 46) ])) :{:x =  (<expr> (x +  (<const> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<a> n =  (<n> 5)) {::} (<b> b =  (<n> 9)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[ (<n> 8) ])  <  (<point> main[ (<n> 10) ])  +  (<d> 6) :{:x =  (<expr> (<const> 0.2)) :}))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[1.0, 0.5]