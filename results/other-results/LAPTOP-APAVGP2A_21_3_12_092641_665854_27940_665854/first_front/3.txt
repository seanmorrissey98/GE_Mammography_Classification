Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 34
  if main[index] - opposite[index] + main[index] + sum(opposite[-index:]) > main[index] + opposite[index] + opposite[index] + opposite[index] + sum(main[-index:]):
    x = (x - 0.0001)
  index = 39
  if opposite[index] - sum(main[-index:]) + main[index] + opposite[index] - opposite[index] < opposite[index] + main[index] - sum(main[:-index]) + main[index]:
    x = (x - 0.9)
  index = 39
  if main[index] + main[index] - sum(main[-index:]) - sum(opposite[:-index]) - sum(opposite[-index:]) > sum(opposite[:-index]) + opposite[index] - sum(opposite[-index:]) - main[index]:
    x = (x + 0.00001)
  index = 7
  if main[index] < 1:
    if opposite[index] < main[index] + 0.01:
      x = (x - 0.9)
  else:
    if opposite[index] > opposite[index] + 6:
      x = (x - 0.0000001)
    else:
      x = (x + 0.2)
  index = 5
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.0000001)
  index = 7
  if sum(opposite[-index:]) < sum(main[-index:]) - sum(main[:-index]):
    x = (x - 0.9)
  index = 47
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 100:
    x = (x - 0.001)
  index = 17
  if main[index] < 1:
    if main[index] < opposite[index] + 0.8:
      x = (x + 0.4)
  else:
    if main[index] < opposite[index] + 4:
      x = (x - 0.0000001)
    else:
      x = (x + 0.8)
  index = 16
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 50:
    x = (x - 0.0001)
  index = 13
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 1.0)
  index = 18
  if main[index] < 1:
    if main[index] > opposite[index] + 0.0000001:
      x = (x + 0.6)
  else:
    if opposite[index] < main[index] + 2:
      x = (x - 0.7)
    else:
      x = (x + 0.4)
  index = 5
  if opposite[index] > main[index]:
    x = (x - 1.0)
  index = 14
  if main[index] < opposite[index]:
    x = (x - 0.5)
  index = 47
  if opposite[index] < main[index]:
    x = (x + 0.3)
  index = 5
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 100:
    x = (x + 0.01)
  index = 11
  if main[index] > main[index]:
    x = (x - 0.7)
  index = 27
  if main[index] > opposite[index]:
    x = (x - 0.01)
  index = 43
  if main[index] < opposite[index]:
    x = (x + 0.6)
  index = 15
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.01)
  index = 23
  if main[index] > opposite[index]:
    x = (x + 0.000001)
  index = 16
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 1000:
    x = (x + 0.0000001)
  index = 23
  if sum(opposite[-index:]) > sum(main[:-index]):
    x = (x + 0.3)
  index = 43
  if sum(opposite[-index:]) < opposite[index]:
    x = (x - 1.0)
  index = 32
  if sum(opposite[:-index]) > opposite[index]:
    x = (x + 0.000001)
  index = 6
  if opposite[index] > opposite[index]:
    x = (x + 0.001)
  index = 41
  if opposite[index] < opposite[index]:
    x = (x + 0.0001)
  index = 14
  if opposite[index] < opposite[index]:
    x = (x + 0.8)
  index = 16
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.9)
  index = 48
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.4)
  index = 23
  if main[index] < 1:
    if opposite[index] < main[index] + 0.4:
      x = (x + 0.7)
  else:
    if main[index] < main[index] + 1:
      x = (x + 0.01)
    else:
      x = (x + 0.000001)
  index = 19
  if main[index] < 1:
    if main[index] > main[index] + 0.0001:
      x = (x - 0.0001)
  else:
    if opposite[index] > main[index] + 7:
      x = (x - 0.9)
    else:
      x = (x - 0.01)
  index = 9
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 1000:
    x = (x - 0.0000001)
  index = 48
  if main[index] > opposite[index]:
    x = (x - 0.00001)
  index = 8
  if main[index] < main[index]:
    x = (x + 0.8)
  index = 3
  if opposite[index] + main[index] + main[index] + main[index] < sum(opposite[:-index]):
    x = (x + 0.0001)
  index = 46
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.001)
  index = 11
  if main[index] - opposite[index] > sum(main[-index:]):
    x = (x - 0.6)
  index = 38
  if sum(main[:-index]) < sum(main[:-index]):
    x = (x + 0.01)
  index = 35
  if main[index] < 1:
    if main[index] > main[index] + 0.001:
      x = (x - 0.00001)
  else:
    if opposite[index] > main[index] + 6:
      x = (x + 0.1)
    else:
      x = (x - 0.3)
  index = 24
  if opposite[index] > opposite[index]:
    x = (x - 0.6)
  index = 23
  if opposite[index] > opposite[index]:
    x = (x + 0.2)
  index = 16
  if main[index] > opposite[index]:
    x = (x - 0.3)
  index = 37
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 1.0)
  index = 26
  if main[index] < opposite[index] - main[index]:
    x = (x + 0.01)
  index = 16
  if main[index] < 1:
    if main[index] > main[index] + 0.00001:
      x = (x - 0.0000001)
  else:
    if opposite[index] > main[index] + 8:
      x = (x + 0.8)
    else:
      x = (x - 0.4)
  index = 7
  if sum(main[:-index]) > main[index]:
    x = (x - 0.0001)
  index = 40
  if opposite[index] < opposite[index]:
    x = (x - 0.0000001)
  index = 45
  if opposite[index] > sum(main[:-index]):
    x = (x - 0.01)
  index = 33
  if opposite[index] < main[index]:
    x = (x + 0.1)
  index = 40
  if opposite[index] < opposite[index]:
    x = (x + 0.4)
  index = 14
  if main[index] + main[index] > opposite[index] - opposite[index]:
    x = (x + 0.9)
  index = 13
  if main[index] > sum(main[:-index]):
    x = (x + 0.6)
  index = 1
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 1000:
    x = (x - 0.9)
  index = 13
  if sum(main[:-index]) < main[index] + opposite[index] - main[index]:
    x = (x - 0.2)
  index = 9
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 100:
    x = (x + 0.9)
  index = 15
  if main[index] > opposite[index] - sum(opposite[:-index]):
    x = (x - 0.8)
  index = 47
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.00001)
  index = 12
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 50:
    x = (x + 0.000001)
  index = 43
  if main[index] > main[index]:
    x = (x + 0.5)
  index = 22
  if main[index] > main[index]:
    x = (x - 0.01)
  index = 32
  if main[index] < opposite[index]:
    x = (x + 0.6)
  index = 20
  if main[index] < 1:
    if opposite[index] < main[index] + 0.3:
      x = (x + 0.00001)
  else:
    if main[index] < main[index] + 0:
      x = (x + 0.4)
    else:
      x = (x - 0.9)
  index = 5
  if sum(main[:-index]) > sum(main[-index:]):
    x = (x - 0.2)
  index = 45
  if opposite[index] < main[index]:
    x = (x + 0.6)
  index = 4
  if main[index] < opposite[index]:
    x = (x - 0.00001)
  index = 0
  if opposite[index] < main[index]:
    x = (x + 0.1)
  index = 25
  if main[index] < 1:
    if opposite[index] > main[index] + 0.6:
      x = (x - 0.7)
  else:
    if main[index] > main[index] + 6:
      x = (x + 0.000001)
    else:
      x = (x + 1.0)
  index = 44
  if opposite[index] > opposite[index]:
    x = (x - 0.4)
  index = 31
  if main[index] > opposite[index]:
    x = (x - 0.2)
  index = 38
  if main[index] < opposite[index]:
    x = (x - 1.0)
  index = 50
  if opposite[index] < main[index]:
    x = (x - 0.00001)
  index = 14
  if main[index] > opposite[index]:
    x = (x - 0.1)
  index = 0
  if main[index] > sum(main[:-index]) - main[index]:
    x = (x - 0.01)
  index = 15
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.9)
  index = 18
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.1)
  index = 44
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.001)
  index = 32
  if opposite[index] < main[index]:
    x = (x - 0.6)
  index = 2
  if main[index] > main[index]:
    x = (x - 0.7)
  index = 43
  if opposite[index] < opposite[index]:
    x = (x - 0.1)
  index = 41
  if main[index] < 1:
    if main[index] > opposite[index] + 0.00001:
      x = (x - 1.0)
  else:
    if main[index] < main[index] + 7:
      x = (x + 0.8)
    else:
      x = (x + 0.3)
  index = 26
  if opposite[index] > opposite[index]:
    x = (x - 1.0)
  index = 41
  if opposite[index] > opposite[index]:
    x = (x - 1.0)
  index = 11
  if opposite[index] < opposite[index]:
    x = (x + 0.3)
  index = 30
  if main[index] > sum(opposite[:-index]):
    x = (x + 0.7)
  index = 11
  if main[index] < sum(opposite[-index:]):
    x = (x - 0.0001)
  index = 12
  if opposite[index] > opposite[index]:
    x = (x + 0.8)
  index = 43
  if sum(main[:-index]) > main[index]:
    x = (x - 0.9)
  index = 10
  if main[index] > opposite[index]:
    x = (x + 0.9)
  index = 30
  if sum(opposite[-index:]) + sum(opposite[:-index]) < sum(opposite[-index:]) - sum(main[-index:]):
    x = (x - 0.0001)
  index = 4
  if main[index] > opposite[index]:
    x = (x + 0.8)
  index = 7
  if sum(main[-index:]) + opposite[index] + opposite[index] > opposite[index]:
    x = (x - 0.0000001)
  index = 43
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.9:
      x = (x + 0.5)
  else:
    if opposite[index] > main[index] + 4:
      x = (x + 1.0)
    else:
      x = (x - 1.0)
  index = 29
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 1000:
    x = (x - 0.9)
  index = 35
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.2)
  index = 32
  if main[index] < 1:
    if main[index] > main[index] + 0.00001:
      x = (x + 0.6)
  else:
    if opposite[index] < opposite[index] + 9:
      x = (x + 0.8)
    else:
      x = (x + 0.000001)
  index = 48
  if opposite[index] > main[index]:
    x = (x + 0.3)
  index = 17
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.01)
  index = 4
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 5000:
    x = (x - 0.2)
  index = 4
  if opposite[index] < main[index]:
    x = (x - 0.2)
  index = 41
  if opposite[index] > main[index]:
    x = (x + 0.7)
  index = 21
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.4:
      x = (x + 0.00001)
  else:
    if opposite[index] < opposite[index] + 2:
      x = (x - 0.01)
    else:
      x = (x - 0.4)
  index = 19
  if main[index] > main[index]:
    x = (x + 0.1)
  index = 4
  if main[index] > opposite[index]:
    x = (x + 0.0001)
  index = 12
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x + 0.7)
  index = 45
  if opposite[index] > opposite[index]:
    x = (x + 0.0000001)
  index = 27
  if main[index] > main[index]:
    x = (x - 0.5)
  index = 45
  if sum(main[-index:]) + opposite[index] < main[index]:
    x = (x - 0.00001)
  index = 25
  if sum(opposite[:-index]) + sum(main[-index:]) + main[index] < sum(opposite[-index:]):
    x = (x - 0.2)
  index = 38
  if main[index] > sum(main[:-index]) + opposite[index]:
    x = (x - 0.2)
  index = 46
  if main[index] < sum(main[-index:]) + opposite[index]:
    x = (x - 0.01)
  index = 39
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.4)
  index = 20
  if sum(opposite[:-index]) < sum(opposite[-index:]):
    x = (x + 0.5)
  index = 9
  if opposite[index] < sum(opposite[:-index]):
    x = (x - 1.0)
  index = 46
  if main[index] < opposite[index]:
    x = (x - 0.9)
  index = 29
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.00001:
      x = (x + 0.4)
  else:
    if opposite[index] > main[index] + 0:
      x = (x + 0.001)
    else:
      x = (x - 0.9)
  index = 6
  if main[index] < 1:
    if opposite[index] > main[index] + 0.8:
      x = (x - 0.01)
  else:
    if opposite[index] < opposite[index] + 7:
      x = (x - 0.8)
    else:
      x = (x - 0.8)
  index = 9
  if opposite[index] < sum(opposite[:-index]):
    x = (x - 0.4)
  index = 5
  if opposite[index] > main[index]:
    x = (x - 0.4)
  index = 39
  if opposite[index] > opposite[index]:
    x = (x + 1.0)
  index = 49
  if main[index] < opposite[index]:
    x = (x + 0.01)
  index = 17
  if main[index] < 1:
    if main[index] < main[index] + 0.3:
      x = (x + 0.7)
  else:
    if main[index] < main[index] + 3:
      x = (x + 0.8)
    else:
      x = (x + 0.7)
  index = 37
  if opposite[index] < opposite[index]:
    x = (x - 0.5)
  index = 5
  if opposite[index] < opposite[index]:
    x = (x - 1.0)
  index = 27
  if sum(opposite[:-index]) > opposite[index]:
    x = (x - 0.3)
  index = 49
  if main[index] < main[index]:
    x = (x + 0.001)
  index = 48
  if main[index] > opposite[index]:
    x = (x + 0.00001)
  index = 25
  if main[index] < 1:
    if main[index] < main[index] + 0.9:
      x = (x - 1.0)
  else:
    if opposite[index] > main[index] + 2:
      x = (x - 0.0000001)
    else:
      x = (x - 0.3)
  index = 43
  if sum(opposite[:-index]) + sum(main[-index:]) - sum(opposite[:-index]) > sum(main[-index:]):
    x = (x + 0.8)
  index = 47
  if opposite[index] - opposite[index] + main[index] - sum(main[:-index]) < opposite[index] + sum(opposite[-index:]) - opposite[index] + main[index] - main[index] + main[index]:
    x = (x - 0.01)
  index = 2
  if sum(main[:-index]) - sum(opposite[:-index]) - sum(opposite[:-index]) > sum(opposite[-index:]) + sum(main[:-index]):
    x = (x + 0.4)
  index = 29
  if sum(opposite[:-index]) + opposite[index] < sum(opposite[:-index]) - sum(opposite[-index:]) - sum(main[-index:]):
    x = (x - 0.7)
  return x
XXX_output_XXX = p()

Genotype:
[97769, 14998, 54714, 33535, 20130, 49780, 46276, 74794, 68072, 55348, 86137, 47012, 1100, 94515, 47991, 18764, 40057, 88463, 12930, 17693, 80690, 36236, 20788, 76128, 41503, 60029, 45398, 61226, 40350, 46180, 15800, 8755, 21599, 33189, 49174, 14245, 64935, 49308, 7260, 27573, 88606, 51595, 98917, 25833, 59317, 65943, 45415, 62161, 46502, 60928, 35796, 34927, 92207, 86812, 99842, 8792, 35908, 1025, 76870, 99302, 75047, 77293, 69230, 89971, 44705, 78120, 91352, 34959, 6699, 52548, 77108, 40931, 28219, 46796, 10278, 78249, 11101, 45229, 32717, 58530, 69545, 22033, 11597, 927, 66498, 29016, 64178, 84902, 8587, 48400, 57626, 84550, 63594, 74704, 608, 75465, 57704, 24525, 90381, 40593, 39672, 31418, 39088, 70085, 20953, 30284, 48121, 92972, 83154, 85386, 27222, 63133, 10048, 32746, 87488, 66707, 61819, 15908, 19338, 30172, 49041, 41580, 48697, 2322, 42516, 20060, 71200, 69368, 27228, 76075, 67709, 73348, 23561, 3540, 37670, 47250, 14410, 39699, 84634, 84878, 34640, 70652, 23374, 10926, 8305, 36360, 5913, 42645, 19959, 14467, 74047, 58459, 5278, 35127, 31324, 31967, 25301, 251, 836, 73111, 45044, 71757, 28669, 50619, 47156, 46191, 32410, 13935, 99763, 88988, 57920, 38307, 87243, 43064, 95592, 36770, 57901, 68897, 97387, 22662, 66604, 34219, 760, 10445, 64156, 70804, 8923, 87359, 60117, 31957, 85809, 47077, 74366, 53293, 88509, 2131, 20374, 38128, 40617, 79236, 97369, 93528, 52510, 71953, 31294, 99375, 60463, 82878, 61615, 59729, 78144, 89674, 21447, 33911, 40302, 25438, 6035, 88247, 15878, 48347, 10541, 28900, 39121, 16712, 66864, 32071, 40843, 57894, 1680, 50332, 86696, 5323, 15804, 72280, 7102, 86958, 93051, 12589, 34905, 17629, 15052, 76704, 69024, 8621, 82905, 69967, 64223, 36175, 9345, 73022, 95752, 36253, 16603, 42445, 91401, 21406, 35807, 24832, 75442, 71889, 86245, 62171, 61240, 54280, 1195, 1957, 94976, 64905, 28540, 57723, 94798, 41966, 6039, 97602, 55750, 49065, 56297, 72911, 37349, 38937, 92506, 91260, 63276, 5016, 92081, 41579, 8106, 46959, 56377, 83614, 63562, 78848, 86279, 45861, 21691, 60705, 17562, 87268, 13972, 52591, 42858, 62258, 85098, 41848, 80027, 44706, 19160, 66866, 23005, 29794, 20062, 2019, 65100, 59428, 95074, 38649, 7688, 16598, 65138, 51316, 79667, 88587, 84904, 6997, 16425, 63210, 17337, 46240, 93517, 97254, 32108, 83463, 98742, 33991, 29241, 10377, 2993, 60089, 92810, 3913, 23603, 15018, 86215, 44726, 68312, 48829, 85943, 71890, 30288, 62914, 41872, 57269, 21963, 78855, 93184, 60497, 85219, 98160, 54860, 61765, 9199, 96448, 29100, 46322, 37929, 83169, 68718, 99746, 50828, 88381, 35335, 3831, 57629, 51936, 41136, 25635, 43083, 14200, 28286, 88775, 21790, 61806, 54811, 76936, 7938, 90998, 69766, 46705, 92561, 30655, 48798, 45531, 86926, 71804, 29219, 77257, 73705, 68119, 27547, 14759, 76407, 77098, 27347, 35165, 58662, 87473, 73060, 44941, 2836, 36555, 95872, 60261, 96813, 89266, 28271, 2194, 67453, 59915, 59264, 8557, 2850, 66134, 47036, 83104, 25377, 60717, 94076, 33242, 55259, 63798, 3371, 59064, 3524, 4497, 54523, 68061, 60876, 7780, 9455, 98196, 98332, 19292, 4714, 27717, 86628, 80395, 32956, 10884, 86585, 69220, 92283, 91256, 75602, 99762, 42674, 80369, 42346, 4896, 34023, 77471, 70431, 74231, 92163, 79806, 3122, 60558, 62621, 76598, 91852, 20593, 50600, 60336, 37123, 94373, 14262, 87229, 47541, 71356, 27489, 7760, 90834, 22168, 14922, 19462, 60786, 85722, 68418, 91920, 77223, 14223, 28155, 79502, 86507, 7949, 77769, 55872, 39041, 63254, 80616, 23396, 5677, 65892, 34651, 33621, 51574, 95602, 82262, 71017, 71255, 35791, 33140, 69874, 27737, 77911, 8248, 99972, 10594, 79067, 66672, 43262, 13726, 18693, 74338, 51423, 12265, 89300, 27555, 18412, 89002, 29084, 82038, 71004, 36563, 28783, 23957, 58001, 11094, 6976, 41560, 5014, 86062, 24342, 35362, 68280, 18049, 33527, 13095, 42024, 29781, 62675, 52035, 64957, 82834, 96430, 48635, 34125, 1787, 57917, 8490, 7516, 11220, 42193, 91679, 82865, 18246, 66325, 36427, 19003, 73916, 71005, 87750, 88788, 91875, 26379, 58431, 52474, 3788, 57996, 59089, 20403, 99875, 46560, 40498, 60587, 66220, 9804, 39573, 39148, 43586, 17446, 43332, 22812, 49180, 90970, 74170, 83548, 83467, 66602, 37144, 87365, 63196, 96931, 25108, 8823, 8896, 7647, 23400, 74123, 82051, 29518, 54304, 93678, 24315, 49485, 80416, 20782, 51496, 51615, 63403, 97602, 73683, 14998, 51731, 63391, 1049, 11673, 61675, 81200, 76521, 74964, 58036, 71613, 79761, 77252, 19214, 56703, 35607, 30896, 61638, 85017, 41843, 64949, 80156, 22125, 57568, 95307, 13080, 18379, 99556, 87847, 87113, 25576, 73799, 60420, 77910, 1184, 59949, 404, 23779, 6711, 24038, 65899, 83700, 85183, 95065, 61000, 61585, 17797, 81726, 9056, 57164, 95315, 96583, 56828, 303, 23846, 86886, 60516, 43101, 86155, 87942, 18819, 36351, 70401, 43528, 72758, 16104, 48944, 88280, 63011, 60321, 16250, 62520, 84406, 50525, 53024, 61996, 41188, 17548, 30148, 96314, 8014, 78952, 10459, 73529, 10453, 87123, 28464, 96353, 86916, 36720, 27757, 33699, 66189, 60606, 57769, 77225, 41967, 38823, 50240, 60880, 42630, 47166, 83293, 54697, 43519, 60937, 26288, 14132, 5531, 80078, 86737, 28732, 42711, 19967, 56050, 42568, 92511, 94887, 6456, 70396, 55505, 4382, 96613, 98474, 20255, 26710, 5951, 33285, 26529, 79714, 64579, 21805, 77464, 7949, 8044, 90026, 13355, 40680, 34194, 14391, 47929, 32515, 18024, 5544, 92545, 49006, 33226, 51704, 62249, 65714, 88657, 38302, 13656, 1383, 41522, 41446, 13549, 99175, 5163, 45633, 22964, 36007, 88447, 11919, 53135, 48669, 63520, 48114, 46123, 13410, 70971, 38645, 3341, 49940, 46808, 50622, 88984, 46056, 4768, 3321, 21153, 52718, 44908, 15215, 69499, 66211, 41938, 51264, 16306, 95335, 2426, 94793, 80370, 10655, 74554, 63288, 35129, 26230, 83021, 53723, 74547, 6538, 46118, 56629, 98479, 80157, 81636, 29404, 91983, 97413, 29351, 69723, 63107, 21299, 82671, 33549, 32132, 52568, 97896, 11014, 41440, 18283, 62279, 59995, 83462, 82865, 51312, 3363, 81405, 16444, 89940, 70048, 39966, 86169, 32840, 20493, 18303, 69508, 55800, 45352, 20519, 3018, 52587, 84006, 18474, 79921, 39958, 8977, 79224, 73679, 65385, 16084, 9896, 41626, 29847, 93823, 32381, 96926, 93494, 31448, 47911, 31245, 2571, 74551, 5991, 57021, 70396, 13879, 95737, 20097, 17218, 26909, 12329, 45176, 50481, 77248, 22451, 86963, 76951, 45462, 53216, 66415, 54084, 85333, 17719, 93649, 33668, 62374, 63868, 3450, 29903, 24263, 40217, 42071, 58104, 13543, 15512, 80038, 76406, 19296, 58081, 22458, 4531, 5736, 2149, 90930, 3208, 25678, 64938, 13943, 9009, 68657, 41368, 96800, 28203, 71180, 30331, 67624, 74560, 23473, 47068, 89727, 45427, 49951, 10696, 96541, 98117, 56735, 92641, 7312, 97570, 83521, 44574, 22214, 18480, 16952, 11932, 64476, 76163, 97568, 79807, 74397, 11244, 9802, 34226, 81215, 59962, 72582, 78560, 9655, 49999, 76291, 67504, 2783, 51727, 71656, 6672, 78652, 8899, 79105, 31378, 69481, 89704, 44037, 78510, 27180, 47424, 24542, 53155, 42893, 27884, 93241, 29690, 31555, 54158, 78280, 34261, 76132, 54721, 96009, 55360, 30131, 24160, 36345, 74101, 14256, 27017, 30632, 140, 73033, 20673, 13248, 82330, 2055, 95422, 68514, 32567, 85056, 91981, 80859, 53524, 98638, 43238, 36732, 88228, 13462, 44978, 39658, 12786, 2788, 14369, 25507, 38135, 92284, 30461, 23208, 87154, 47394, 64966, 49574, 14203, 62516, 35987, 80462, 8909, 93541, 43445, 85927, 74475, 14282, 43131, 62477, 2375, 67546, 70689, 48044, 5586, 369, 96569, 49486, 17132, 52033, 37680, 33349, 83086, 92425, 75603, 29302, 34608, 5952, 33187, 1961, 46736, 20711, 90803, 25750, 39512, 68421, 96374, 77602, 3412, 69247, 93874, 47759, 55924, 49384, 88342, 53347, 43145, 8848, 90276, 42842, 81910, 45662, 80329, 67148, 84260, 93844, 27357, 24010, 30040, 11116, 30236, 62647, 29587, 91548, 67176, 71907, 14005, 48599, 48764, 57531, 61845, 51860, 48280, 1829, 15380, 33444, 96430, 40871, 13736, 8371, 29482, 26074, 33648, 2984, 26131, 61316, 96585, 69576, 64633, 72052, 9357, 9648, 34646, 4249, 83170, 63994, 41294, 17872, 1178, 59634, 67837, 48047, 90909, 46446, 79120, 10147, 88168, 94505, 31996, 48298, 16632, 76728, 30963, 60387, 19129, 37018, 1537, 94750, 40050, 27706, 54337, 83703, 8846, 15127, 44775, 76463, 77515, 55879, 32266, 9411, 62944, 98332, 20341, 85801, 60715, 57491, 1873, 79649, 24397, 49016, 59468, 61058, 23521, 46988, 72068, 29581, 98631, 78524, 75952, 55348, 64973, 10217, 16954, 22466, 52407, 93794, 87847, 49222, 24915, 7342, 14911, 55988, 25134, 25591, 64948, 68998, 92779, 59139, 47764, 21374, 4393, 74136, 65636, 96437, 75797, 46468, 10328, 23890, 4189, 81192, 65758, 69888, 75286, 91215, 96890, 16687, 54295, 12890, 20430, 99821, 6312, 93682, 64019, 14258, 59559, 49896, 24747, 12817, 27773, 69916, 1516, 13363, 14, 43368, 57412, 14899, 37203, 31852, 10455, 32556, 78736, 35577, 65535, 48750, 99454, 18076, 7242, 58261, 63629, 30237, 35584, 13065, 55309, 34332, 80613, 17407, 22385, 75835, 5279, 59806, 24203, 10103, 16920, 3068, 1696, 8986, 57963, 92026, 73257, 9141, 63595, 12897, 47752, 28618, 15252, 5609, 94119, 66562, 27403, 90019, 78517, 35131, 77711, 59296, 24259, 61557, 39744, 83826, 24246, 55885, 53241, 2743, 604, 17650, 31239, 47731, 20572, 69031, 19838, 66131, 88610, 49637, 39895, 38369, 156, 45611, 12496, 33971, 31286, 6427, 14756, 61089, 45919, 50684, 33080, 46796, 89636, 66478, 70220, 61918, 1549, 13618, 47560, 43702, 14755, 50391, 74365, 3210, 2480, 85704, 3774, 31481, 29176, 52398, 1423, 30879, 31476, 75775, 23160, 46191, 91840, 61855, 62662, 80483, 81850, 89322, 87634, 14158, 19516, 34302, 49594, 19035, 4297, 39991, 90938, 96922, 3236, 570, 26552, 28987, 44399, 72478, 55636, 71603, 21027, 20891, 100003, 3944, 76417, 74485, 60915, 99939, 99545, 32512, 72612, 55816, 7011, 3221, 50138, 98634, 19162, 9327, 12159, 64134, 59805, 90717, 50587, 50014, 85532, 99943, 54444, 2811, 52964, 50534, 52713, 93801, 21333, 57871, 62525, 53314, 34918, 37490, 61324, 78673, 43779, 90421, 64532, 27524, 25821, 84939, 55521, 84882, 53644, 66062, 3446, 35848, 99892, 43008, 64572, 71260, 41852, 28970, 73311, 6125, 68242, 14473, 26629, 60101, 63682, 82020, 10819, 2436, 85167, 85696, 45184, 96277, 18512, 88134, 23482, 62674, 65039, 20926, 17516, 29909, 77859, 74383, 6716, 42791, 52495, 56505, 95982, 89773, 38105, 54036, 13545, 50432, 27758, 26651, 75720, 20181, 16661, 38136, 68643, 38345, 40846, 92958, 76128, 51982, 27731, 68537, 86182, 66485, 49035, 95254, 42389, 12075, 27107, 37330, 72943, 28641, 7555, 28642, 96664, 38511, 64743, 4878, 32005, 44255, 31934, 98540, 50197, 13486, 36446, 39157, 67275, 78255, 26080, 25871, 2534, 44417, 73548, 76690, 72408, 82915, 58868, 24064, 30167, 14605, 88079, 66505, 96496, 22881, 86967, 35060, 14538, 44653, 32045, 95530, 50965, 71649, 60233, 4336, 66732, 60552, 35358, 53422, 31837, 62105, 73804, 61013, 18879, 73147, 93, 80215, 6196, 92727, 84463, 50373, 11099, 65128, 68775, 92687, 60926, 73507, 57345, 5276, 38024, 54244, 13019, 16665, 26935, 52297, 90483, 462, 12537, 75410, 98599, 71374, 17462, 82042, 17449, 65275, 13614, 78296, 2660, 7921, 61167, 77929, 24258, 55889, 21165, 88542, 43281, 39565, 78020, 72461, 51145, 69869, 5007, 45057, 34990, 34087, 68750, 77827, 43082, 67924, 16910, 59832, 33445, 47719, 60809, 45771, 36371, 62125, 77413, 55181, 44475, 10824, 55812, 9338, 68533, 92843, 35672, 95192, 17235, 28967, 4243, 5793, 51926, 50890, 16267, 72004, 57940, 80946, 88088, 51776, 18982, 44224, 65577, 65193, 13257, 14682, 81372, 37114, 73105, 98225, 26365, 20713, 24154, 69883, 85788, 60391, 13589, 116, 94530, 5023, 54802, 72511, 50901, 19916, 93252, 62481, 98207, 68725, 17945, 33699, 87787, 74093, 44194, 2607, 56479, 42433, 36951, 82529, 39665, 3933, 31725, 22149, 75138, 79667, 73677, 81284, 40598, 86676, 9940, 33088, 81147, 11845, 54375, 90154, 52725, 17148, 13364, 78122, 75375, 98322, 67455, 51900, 52442, 69564, 99129, 75631, 46256, 7772, 37284, 63606, 19216, 81790, 12885, 27601, 12405, 26990, 61463, 82836, 98285, 52893, 23900, 51700, 89562, 77380, 85793, 65577, 59456, 77425, 19785, 85245, 37603, 53953, 63259, 12465, 10039, 19466, 66214, 22549, 19851, 13994, 9349, 97310, 18853, 39360, 68107, 64972, 46329, 81656, 73429, 6395, 25282, 66443, 88598, 9985, 56643, 18892, 73095, 49642, 31639, 55272, 74271, 15230, 92184, 31584, 15757, 20418, 88231, 88452, 15490, 29061, 70504, 83309, 43753, 13974, 34569, 61122, 41794, 62289, 42053, 94176, 24927, 14945, 87505, 12091, 16699, 45532, 60511, 4676, 55692, 20784, 48600, 73226, 78313, 23710, 25528, 8061, 54691, 42968, 31858, 16597, 81256, 80539, 68338, 6343, 61080, 86790, 7210, 59563, 3523, 59761, 52084, 43961, 10605, 55291, 75787, 72800, 90595, 67349, 53254, 89673, 24707, 83106, 50306, 72255, 82335, 9973, 11000, 87761, 39574, 51804, 28674, 90682, 71470, 94418, 64252, 61956, 87345, 67977, 61612, 39793, 18259, 44465, 46543, 11113, 25250, 61001, 56671, 97237, 5449, 38924, 11640, 88908, 92175, 84944, 39557, 10039, 61386, 75588, 62625, 15836, 9487, 75446, 41177, 61216, 14631, 33287, 68807, 2131, 72664, 45440, 48665, 61456, 9966, 89147, 67429, 35512, 66421, 43658, 81943, 80137, 48333, 86069, 74809, 80953, 19661, 36345, 29394, 20912, 71960, 79803, 94632, 96415, 48027, 76031, 63132, 7309, 17051, 53206, 62389, 1413, 6189, 80041, 74932, 3224, 46263, 17454, 80828, 70671, 61728, 60590, 29765, 5000, 21208, 31855, 64827, 51063, 27695, 61863, 95784, 65249, 87980, 70519, 50965, 83181, 80016, 97234, 61067, 1530, 54302, 61453, 74298, 26835, 81804, 39834, 90088, 85815, 91952, 83478, 6572, 29310, 179, 26033, 15290, 18245, 15339, 15381, 69233, 23494, 19665, 92064, 16753, 33898, 61102, 46774, 18150, 25100, 49478, 73665, 62735, 85049, 90356, 42844, 11327, 55608, 507, 45336, 2894, 88582, 6561, 79430, 31878, 16648, 88376, 53903, 64605, 66366, 26058, 34303, 28205, 28095, 64426, 74326, 78493, 51338, 45700, 76742, 95474, 37622, 69208, 12489, 38441, 42094, 18115, 47448, 28343, 66680, 93712, 16762, 1344, 4305, 21925, 69797, 15117, 96151, 95977, 31659, 82503, 34284, 49723, 94559, 69422, 34715, 80032, 52772, 62024, 49340, 55496, 66796, 38479, 80123, 1465, 94256, 59429, 55172, 64091, 23031, 58452, 33151, 74682, 91900, 85746, 87891, 38857, 76693, 83988, 25161, 51669, 40003, 33995, 51255, 9354, 94636, 57285, 44066, 85747, 81422, 54722, 53196, 80882, 90585, 33057, 94075, 12763, 47550, 74786, 4063, 22505, 63844, 13194, 28387, 39564, 52669, 31005, 30248, 49759, 79034, 39057, 52727, 36559, 8681, 90358, 15901, 85428, 35177, 88421, 26354, 61790, 25796, 84740, 95447, 49414, 1403, 48369, 62081, 50276, 62888, 8597, 72712, 9831, 82232, 8258, 14305, 92919, 19803, 15664, 40449, 15413, 52419, 16619, 68851, 92925, 80981, 1688, 40460, 92655, 43924, 45469, 92240, 80272, 57039, 5305, 17918, 1395, 57896, 32646, 75148, 14909, 92012, 50924, 75785, 71813, 22622, 67930, 35657, 10149, 62165, 94289, 41412, 60075, 47294, 22101, 54072, 8790, 57517, 42077, 39444, 43338, 95254, 39312, 45529, 31611, 55154, 66282, 52407, 51022, 62249, 4006, 46671, 16370, 24333, 19157, 35070, 5110, 97182, 26380, 13808, 19868, 44103, 70991, 71627, 11271, 40830, 7057, 28410, 4888, 62094, 48067, 51433, 87003, 24443, 97802, 69377, 76956, 88499, 56242, 76858, 18994, 98419, 19914, 68441, 9424, 60368, 31173, 22161, 2798, 58324, 31568, 77247, 49431, 18870, 88199, 7634, 22063, 63434, 67344, 59171, 89125, 94932, 77887, 38344, 81297, 79386, 48362, 92089, 22085, 15155, 21106, 76765, 38735, 87308, 66615, 39267, 17488, 65610, 39399, 99183, 72607, 23782, 67774, 41016, 18496, 23420, 8453, 48282, 27587, 40868, 5626, 72925, 88213, 7545, 41241, 96820, 10311, 19447, 24816, 98074, 56271, 48445, 93248, 59269, 70560, 2873, 90696, 82818, 15236, 23676, 18665, 40012, 96095, 11507, 85824, 47399, 14614, 34888, 61791, 72209, 20634, 97893, 58585, 48242, 43392, 72346, 68492, 49418, 5141, 35456, 38789, 55174, 79587, 34255, 86017, 5704, 8640, 66335, 9286, 64521, 21862, 56165, 36732, 28720, 5933, 64315, 40933, 12785, 64140, 8408, 8962, 94289, 35909, 57542, 8738, 20423, 88414, 70911, 45336, 39779, 46032, 40627, 15644, 57148, 99718, 29130, 56990, 62439, 92928, 65604, 59370, 47159, 20651, 79651, 95163, 69745, 33116, 86029, 4933, 35483, 13032, 34924, 23950, 3327, 16200, 18952, 57367, 7629, 89811, 50562, 49749, 99465, 49238, 99662, 92621, 65698, 69020, 93904, 9662, 75909, 66486, 78859, 65706, 53846, 26296, 7042, 20447, 60724, 91475, 10785, 60381, 9585, 89680, 82642, 9660, 74309, 23456, 12076, 93678, 36937, 50857, 88360, 81408, 9200, 68739, 93869, 84277, 96869, 12843, 437, 39415, 86087, 86027, 44227, 58001, 9604, 50374, 55815, 92652, 16056, 64615, 50542, 49619, 53845, 25515, 12265, 93137, 64508, 29671, 38118, 24241, 31887, 22981, 16343, 57167, 57400, 67372, 83732, 23939, 62088, 24676, 48577, 76798, 50674, 301, 22518, 90417, 49545, 93219, 84210, 52424, 17772, 42776, 34492, 16242, 96769, 20394, 19574, 95132, 47745, 10693, 2325, 66744, 83119, 57437, 28082, 43815, 65408, 80294, 32521, 12494, 95897, 73645, 46465, 11100, 12476, 6278, 74904, 53607, 82410, 67889, 72692, 57989, 93044, 99206, 59998, 6600, 97508, 93354, 33409, 13643, 77013, 3768, 90458, 30084, 17898, 56153, 26995, 42635, 96917, 8399, 280, 31035, 77070, 32046, 15238, 82494, 37699, 64443, 19107, 22688, 99311, 22483, 33018, 84015, 42773, 40490, 7710, 94266, 95350, 32958, 76167, 83484, 38814, 49907, 22044, 92025, 84915, 97199, 19244, 89707, 50580, 423, 15961, 68329, 3102, 8431, 79669, 41462, 40071, 76241, 89996, 13613, 98101, 98111, 69351, 72102, 8166, 67612, 86351, 29115, 86497, 56006, 68130, 55545, 59584, 46441, 44999, 16649, 2690, 56941, 27465, 27965, 83054, 84719, 89043, 25971, 43383, 23368, 98092, 67032, 14055, 54951, 64574, 24788, 19444, 4908, 53961, 65416, 56779, 13595, 51717, 96832, 60111, 45801, 75719, 27996, 57198, 11798, 71056, 65480, 25698, 80992, 34725, 91159, 61562, 46965, 44131, 57523, 69939, 19746, 52009, 98754, 85188, 47794, 99130, 39044, 2780, 79333, 47643, 68988, 37870, 60623, 42196, 40283, 3077, 75956, 47228, 24377, 6285, 62771, 81016, 31508, 19335, 71121, 12871, 42523, 48059, 29323, 37323, 46163, 77864, 32039, 23810, 32287, 63136, 34619, 94869, 56592, 32353, 26300, 96186, 51112, 34843, 23937, 33625, 23831, 74570, 7873, 4676, 82269, 8336, 32727, 52527, 5502, 39755, 8453, 44841, 834, 76651, 46925, 96670, 1397, 20386, 627, 53321, 70188, 59326, 88207, 62827, 83854, 80919, 79130, 77105, 87505, 46682, 21536, 75582, 20117, 92467, 46743, 90665, 88583, 51988, 13825, 25214, 7834, 41609, 51004, 84470, 77584, 20706, 18485, 38648, 33336, 66785, 84963, 37606, 63437, 41730, 66359, 137, 51499, 74255, 98055, 27169, 14340, 97475, 81064, 78092, 64747, 20477, 90392, 14441, 54009, 15490, 61424, 68145, 56015, 20451, 19258, 93502, 92334, 31177, 30713, 28702, 5268, 31491, 13846, 38952, 82794, 90243, 5676, 63066, 10862, 55271, 73892, 9523, 97993, 62789, 8227, 3991, 2961, 4028, 69014, 77468, 34404, 65506, 80124, 95066, 23358, 67093, 67121, 68750, 44850, 28686, 65750, 87745, 94461, 50966, 2475, 13753, 47593, 15970, 97695, 45177, 11054, 4033, 67950, 83288, 35185, 97529, 92194, 75184, 16633, 96809, 88157, 44957, 62286, 8747, 89019, 97635, 9010, 62467, 40518, 86307, 92078, 61087, 73766, 54388, 60883, 40732, 20643, 83419, 13222, 10207, 18724, 98362, 38337, 27959, 54331, 60311, 93780, 90674, 79512, 79619, 3393, 19590, 20657, 9824, 68329, 76470, 60664, 65778, 18433, 59338, 65216, 28807, 93269, 47171, 23959, 84058, 563, 68662, 71214, 36622, 63352, 60758, 47146, 91622, 94596, 22080, 1090, 93662, 84389, 42703, 86783, 4044, 57120, 28131, 91189, 5315, 66483, 63227, 26150, 82303, 5510, 55687]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<point> opposite[index]))))))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> +)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}))))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}))))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})))))) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))))) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})))) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})))))))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})))))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}))))) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index])))))))))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.011235955056179775, 0.5027391499960303]