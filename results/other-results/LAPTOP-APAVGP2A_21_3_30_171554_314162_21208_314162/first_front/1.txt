Generation:
7

Phenotype:
def p():
  x = 0.0
  index = 37
  if main[index] + sum(main[-index:]) + sum(opposite) / 52 > sum(main) / 52 + sum(main) / 52:
    x = (x - 0.0001)
  index = 7
  if sum(opposite) / 52 + sum(main[:-index]) + sum(opposite) / 52 > sum(main[-index:]) - sum(opposite[:-index]):
    x = (x + 0.3)
  index = 37
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.5:
      x = (x + 0.00001)
  else:
    if opposite[index] < main[index] + 0:
      x = (x - 1.0)
    else:
      x = (x - 0.7)
  index = 6
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.2)
  index = 26
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 100:
    x = (x - 0.4)
  index = 32
  if main[index] < 1:
    if opposite[index] < main[index] + 0.1:
      x = (x + 0.3)
  else:
    if opposite[index] < main[index] + 7:
      x = (x - 0.01)
    else:
      x = (x + 0.0001)
  index = 9
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.3)
  index = 0
  if sum(opposite) / 52 < sum(opposite) / 52:
    x = (x - 0.001)
  index = 51
  if main[index] > main[index]:
    x = (x - 0.5)
  index = 19
  if sum(opposite) / 52 < sum(opposite) / 52:
    x = (x + 0.4)
  index = 11
  if sum(main) / 52 < opposite[index]:
    x = (x + 0.01)
  index = 48
  if main[index] < 1:
    if opposite[index] < main[index] + 0.7:
      x = (x - 1.0)
  else:
    if main[index] < main[index] + 1:
      x = (x + 0.01)
    else:
      x = (x + 0.000001)
  index = 47
  if opposite[index] > main[index]:
    x = (x - 0.000001)
  index = 24
  if main[index] < opposite[index]:
    x = (x + 0.9)
  index = 42
  if opposite[index] > sum(main) / 52:
    x = (x + 0.0001)
  index = 19
  if main[index] < 1:
    if opposite[index] > main[index] + 0.4:
      x = (x - 0.0001)
  else:
    if main[index] > main[index] + 7:
      x = (x - 0.0000001)
    else:
      x = (x + 0.7)
  index = 27
  if sum(main) / 52 > sum(main) / 52:
    x = (x - 0.001)
  index = 21
  if main[index] < 1:
    if main[index] < opposite[index] + 0.2:
      x = (x - 0.8)
  else:
    if opposite[index] > opposite[index] + 4:
      x = (x + 0.2)
    else:
      x = (x - 0.8)
  index = 24
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.8)
  index = 17
  if opposite[index] > sum(opposite) / 52:
    x = (x - 0.7)
  index = 20
  if sum(main) / 52 < opposite[index]:
    x = (x + 0.000001)
  index = 42
  if main[index] < sum(opposite) / 52:
    x = (x + 0.9)
  index = 50
  if sum(main[:-index]) < sum(opposite[:-index]):
    x = (x + 0.01)
  index = 39
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.01)
  index = 29
  if opposite[index] < main[index]:
    x = (x - 0.1)
  index = 17
  if sum(opposite) / 52 > opposite[index]:
    x = (x + 0.9)
  index = 27
  if main[index] < opposite[index]:
    x = (x + 0.9)
  index = 22
  if sum(opposite) / 52 > sum(opposite) / 52:
    x = (x + 0.7)
  index = 26
  if sum(main) / 52 < sum(main) / 52 + main[index]:
    x = (x - 0.8)
  index = 41
  if main[index] < 1:
    if opposite[index] > main[index] + 0.0000001:
      x = (x - 0.5)
  else:
    if opposite[index] > opposite[index] + 4:
      x = (x + 0.001)
    else:
      x = (x + 0.00001)
  index = 7
  if main[index] + sum(main) / 52 < sum(opposite) / 52:
    x = (x - 0.00001)
  index = 44
  if main[index] < 1:
    if opposite[index] > main[index] + 0.6:
      x = (x + 0.8)
  else:
    if opposite[index] < main[index] + 1:
      x = (x - 0.0001)
    else:
      x = (x + 0.1)
  index = 37
  if sum(main) / 52 < main[index]:
    x = (x + 0.5)
  index = 4
  if sum(opposite) / 52 < main[index]:
    x = (x + 0.2)
  index = 14
  if opposite[index] + sum(main[:-index]) > opposite[index]:
    x = (x + 0.3)
  index = 29
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.00001:
      x = (x - 0.0000001)
  else:
    if opposite[index] > main[index] + 8:
      x = (x - 0.1)
    else:
      x = (x + 0.00001)
  index = 36
  if sum(opposite) / 52 > opposite[index]:
    x = (x + 0.1)
  index = 50
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.8)
  index = 19
  if sum(main) / 52 < sum(main) / 52:
    x = (x - 0.1)
  index = 15
  if main[index] < sum(main) / 52:
    x = (x - 0.01)
  index = 12
  if main[index] < 1:
    if main[index] > main[index] + 0.000001:
      x = (x - 0.6)
  else:
    if opposite[index] > main[index] + 3:
      x = (x - 0.01)
    else:
      x = (x + 0.3)
  index = 31
  if main[index] > sum(main) / 52:
    x = (x - 0.8)
  index = 24
  if opposite[index] < opposite[index]:
    x = (x - 0.5)
  index = 19
  if main[index] < 1:
    if main[index] < main[index] + 0.7:
      x = (x - 0.8)
  else:
    if opposite[index] < opposite[index] + 1:
      x = (x + 1.0)
    else:
      x = (x + 0.6)
  index = 47
  if opposite[index] < sum(opposite) / 52:
    x = (x + 0.00001)
  index = 1
  if opposite[index] > opposite[index]:
    x = (x + 1.0)
  index = 46
  if sum(main) / 52 > main[index]:
    x = (x + 0.1)
  index = 30
  if main[index] < 1:
    if main[index] > opposite[index] + 0.0001:
      x = (x + 0.5)
  else:
    if opposite[index] > main[index] + 5:
      x = (x - 0.8)
    else:
      x = (x - 0.001)
  index = 5
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.1)
  index = 28
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 500:
    x = (x + 0.4)
  index = 40
  if sum(main) / 52 > sum(main) / 52:
    x = (x + 1.0)
  index = 23
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.0001)
  index = 3
  if main[index] > main[index]:
    x = (x - 0.3)
  index = 34
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 1.0)
  index = 3
  if sum(main) / 52 > opposite[index]:
    x = (x + 0.9)
  index = 22
  if opposite[index] < sum(opposite) / 52:
    x = (x + 0.2)
  index = 45
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 1.0)
  index = 1
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.9)
  index = 37
  if sum(opposite[-index:]) > main[index]:
    x = (x - 0.3)
  index = 44
  if opposite[index] < opposite[index]:
    x = (x - 0.3)
  index = 28
  if sum(opposite) / 52 < main[index]:
    x = (x + 0.0000001)
  index = 34
  if sum(opposite) / 52 < sum(opposite) / 52:
    x = (x + 0.001)
  index = 5
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 1.0)
  index = 43
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.0001:
      x = (x + 0.9)
  else:
    if opposite[index] < opposite[index] + 7:
      x = (x - 0.4)
    else:
      x = (x - 0.1)
  index = 9
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.00001)
  index = 11
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x + 0.0000001)
  index = 17
  if main[index] < opposite[index]:
    x = (x - 0.9)
  index = 4
  if opposite[index] > sum(main) / 52:
    x = (x - 0.1)
  index = 33
  if sum(opposite) / 52 < main[index]:
    x = (x + 0.0000001)
  index = 0
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.0000001:
      x = (x + 1.0)
  else:
    if main[index] < opposite[index] + 2:
      x = (x + 0.0000001)
    else:
      x = (x + 0.00001)
  index = 13
  if main[index] < opposite[index]:
    x = (x + 0.6)
  index = 47
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.01)
  index = 28
  if sum(main) / 52 > opposite[index]:
    x = (x + 0.5)
  index = 2
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x + 0.6)
  index = 4
  if main[index] < 1:
    if opposite[index] > main[index] + 0.000001:
      x = (x + 0.8)
  else:
    if opposite[index] > main[index] + 0:
      x = (x + 0.0000001)
    else:
      x = (x - 0.8)
  index = 51
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.000001)
  index = 2
  if main[index] < 1:
    if main[index] < opposite[index] + 0.7:
      x = (x + 0.000001)
  else:
    if opposite[index] > main[index] + 8:
      x = (x + 0.0001)
    else:
      x = (x - 0.9)
  index = 51
  if opposite[index] > main[index]:
    x = (x + 0.001)
  index = 36
  if sum(main) / 52 < main[index]:
    x = (x + 0.7)
  index = 5
  if sum(opposite) / 52 > main[index]:
    x = (x - 0.4)
  index = 17
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.2)
  index = 37
  if sum(main) / 52 < sum(main) / 52:
    x = (x - 0.4)
  index = 50
  if main[index] > opposite[index]:
    x = (x + 0.1)
  index = 30
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 1.0)
  index = 5
  if opposite[index] < sum(main) / 52:
    x = (x + 0.9)
  index = 44
  if opposite[index] > opposite[index]:
    x = (x + 0.6)
  index = 13
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x + 0.7)
  index = 42
  if sum(opposite) / 52 > sum(main[-index:]):
    x = (x + 0.5)
  index = 9
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.001)
  index = 49
  if opposite[index] > sum(main) / 52:
    x = (x - 1.0)
  index = 12
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.4)
  index = 22
  if opposite[index] > main[index]:
    x = (x - 0.0001)
  index = 44
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x - 0.000001)
  index = 46
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.8)
  index = 39
  if opposite[index] < sum(opposite[:-index]):
    x = (x - 0.001)
  index = 22
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.1)
  index = 29
  if opposite[index] < main[index]:
    x = (x + 0.000001)
  index = 37
  if sum(main[-index:]) < sum(main) / 52:
    x = (x - 0.2)
  index = 2
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 1000:
    x = (x + 0.0000001)
  index = 39
  if main[index] < 1:
    if main[index] < opposite[index] + 0.5:
      x = (x + 0.001)
  else:
    if main[index] > main[index] + 1:
      x = (x + 0.2)
    else:
      x = (x - 0.1)
  index = 42
  if sum(opposite) / 52 > main[index]:
    x = (x + 0.7)
  index = 23
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x - 0.7)
  index = 20
  if main[index] < 1:
    if main[index] < opposite[index] + 0.0000001:
      x = (x - 0.1)
  else:
    if opposite[index] > opposite[index] + 4:
      x = (x - 0.7)
    else:
      x = (x - 0.000001)
  index = 5
  if main[index] > main[index]:
    x = (x + 0.3)
  index = 29
  if sum(main) / 52 < opposite[index]:
    x = (x - 0.9)
  index = 15
  if main[index] < opposite[index]:
    x = (x + 0.2)
  index = 9
  if sum(opposite[-index:]) < sum(main[-index:]):
    x = (x + 0.01)
  index = 45
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x - 1.0)
  index = 22
  if sum(opposite) / 52 > main[index]:
    x = (x - 0.0000001)
  index = 21
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.2)
  index = 30
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.9)
  index = 2
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.2)
  index = 7
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 50:
    x = (x + 0.01)
  index = 49
  if sum(main) / 52 > main[index]:
    x = (x + 0.0001)
  index = 8
  if sum(main) / 52 < sum(main) / 52:
    x = (x - 0.0000001)
  index = 23
  if main[index] < 1:
    if main[index] > opposite[index] + 0.6:
      x = (x + 0.2)
  else:
    if main[index] > opposite[index] + 1:
      x = (x - 0.000001)
    else:
      x = (x + 0.1)
  index = 26
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.3:
      x = (x + 0.01)
  else:
    if main[index] > main[index] + 7:
      x = (x + 0.2)
    else:
      x = (x + 0.6)
  index = 41
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.6)
  index = 45
  if sum(opposite) / 52 < sum(main) / 52:
    x = (x - 0.9)
  index = 19
  if sum(opposite) / 52 < main[index]:
    x = (x - 0.9)
  index = 7
  if opposite[index] < opposite[index]:
    x = (x + 0.5)
  index = 0
  if opposite[index] < opposite[index]:
    x = (x + 0.00001)
  index = 18
  if sum(opposite) / 52 < main[index]:
    x = (x - 0.7)
  index = 49
  if main[index] > sum(opposite[:-index]):
    x = (x + 0.2)
  index = 0
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x - 0.3)
  index = 48
  if main[index] < sum(main) / 52:
    x = (x + 0.9)
  index = 15
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.2)
  index = 2
  if main[index] < 1:
    if main[index] > main[index] + 0.1:
      x = (x - 0.4)
  else:
    if opposite[index] < opposite[index] + 1:
      x = (x - 0.001)
    else:
      x = (x + 0.1)
  index = 11
  if main[index] < 1:
    if main[index] < main[index] + 0.9:
      x = (x - 0.01)
  else:
    if main[index] > main[index] + 9:
      x = (x - 0.7)
    else:
      x = (x - 0.000001)
  index = 37
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x + 0.8)
  index = 38
  if opposite[index] < opposite[index]:
    x = (x - 0.001)
  index = 23
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 1000:
    x = (x + 0.0001)
  index = 40
  if opposite[index] < sum(opposite) / 52:
    x = (x - 0.2)
  index = 1
  if opposite[index] > opposite[index]:
    x = (x - 0.4)
  index = 40
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x + 0.1)
  index = 29
  if opposite[index] + sum(opposite) / 52 > sum(opposite[-index:]):
    x = (x + 0.6)
  index = 41
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 1000:
    x = (x + 0.1)
  index = 47
  if sum(opposite) / 52 < sum(main[:-index]):
    x = (x + 0.9)
  index = 13
  if main[index] > opposite[index]:
    x = (x + 0.4)
  index = 24
  if main[index] > sum(main) / 52:
    x = (x - 0.6)
  index = 7
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x + 0.00001)
  index = 0
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x + 0.0001)
  index = 19
  if sum(main) / 52 > opposite[index]:
    x = (x - 0.000001)
  index = 40
  if sum(opposite) / 52 > sum(opposite) / 52:
    x = (x - 0.0001)
  index = 37
  if main[index] < sum(main) / 52:
    x = (x - 0.5)
  index = 49
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x - 0.01)
  index = 23
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.2:
      x = (x + 1.0)
  else:
    if opposite[index] < main[index] + 1:
      x = (x - 0.001)
    else:
      x = (x - 0.000001)
  index = 15
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.5)
  index = 23
  if main[index] < 1:
    if main[index] < main[index] + 0.5:
      x = (x + 0.9)
  else:
    if opposite[index] < opposite[index] + 7:
      x = (x - 0.5)
    else:
      x = (x - 0.001)
  index = 23
  if opposite[index] > main[index]:
    x = (x - 0.9)
  index = 48
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.7)
  index = 17
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x - 0.01)
  index = 11
  if opposite[index] < opposite[index]:
    x = (x - 0.6)
  index = 45
  if sum(main) / 52 < main[index] - sum(main) / 52:
    x = (x + 1.0)
  index = 29
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 1.0)
  index = 4
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x + 0.4)
  index = 39
  if opposite[index] < main[index]:
    x = (x + 0.8)
  index = 39
  if main[index] > sum(main) / 52:
    x = (x - 0.8)
  index = 44
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 50:
    x = (x + 0.1)
  index = 37
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x - 0.7)
  index = 31
  if main[index] > sum(opposite) / 52:
    x = (x - 0.8)
  index = 41
  if sum(opposite[-index:]) > sum(opposite[:-index]):
    x = (x + 0.5)
  index = 20
  if sum(opposite) / 52 < sum(main) / 52:
    x = (x + 0.7)
  index = 20
  if opposite[index] > sum(main) / 52:
    x = (x + 0.4)
  index = 40
  if sum(opposite) / 52 < sum(main[:-index]):
    x = (x + 0.01)
  index = 22
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.001)
  index = 21
  if sum(main[:-index]) > sum(opposite[:-index]):
    x = (x - 0.1)
  index = 10
  if sum(main) / 52 > sum(main) / 52:
    x = (x + 0.2)
  index = 51
  if sum(opposite) / 52 - main[index] > opposite[index]:
    x = (x - 0.0000001)
  index = 32
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 500:
    x = (x - 0.001)
  index = 37
  if main[index] < sum(main) / 52:
    x = (x - 0.7)
  index = 39
  if sum(main) / 52 < sum(main) / 52:
    x = (x - 0.8)
  index = 11
  if sum(main) / 52 < opposite[index]:
    x = (x - 0.1)
  index = 11
  if sum(main[:-index]) > sum(main) / 52:
    x = (x + 0.2)
  index = 2
  if sum(main) / 52 < sum(main) / 52:
    x = (x + 0.5)
  index = 21
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.9)
  index = 30
  if sum(opposite) / 52 > sum(opposite) / 52:
    x = (x + 0.000001)
  index = 29
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.5)
  index = 15
  if sum(opposite[:-index]) > sum(opposite) / 52 - sum(opposite) / 52:
    x = (x - 0.3)
  index = 24
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x - 0.4)
  index = 29
  if main[index] < opposite[index]:
    x = (x + 0.01)
  index = 15
  if sum(opposite) / 52 > opposite[index]:
    x = (x - 0.6)
  index = 45
  if sum(opposite) / 52 < sum(main) / 52:
    x = (x - 0.3)
  index = 32
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x - 0.001)
  index = 19
  if opposite[index] < opposite[index]:
    x = (x + 0.00001)
  index = 29
  if main[index] > sum(opposite) / 52:
    x = (x + 0.00001)
  index = 21
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x - 0.0001)
  index = 25
  if main[index] > sum(main) / 52:
    x = (x + 0.3)
  index = 48
  if main[index] < opposite[index]:
    x = (x - 0.9)
  index = 25
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 100:
    x = (x - 0.2)
  index = 47
  if main[index] < 1:
    if opposite[index] < main[index] + 0.6:
      x = (x + 0.000001)
  else:
    if opposite[index] > main[index] + 0:
      x = (x - 0.1)
    else:
      x = (x + 0.6)
  index = 42
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.5:
      x = (x + 0.8)
  else:
    if opposite[index] > main[index] + 8:
      x = (x + 0.7)
    else:
      x = (x + 0.2)
  index = 47
  if sum(main[-index:]) < opposite[index]:
    x = (x + 0.8)
  index = 34
  if main[index] > opposite[index]:
    x = (x + 0.1)
  index = 35
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.2)
  return x
XXX_output_XXX = p()

Genotype:
[16188, 70227, 80931, 81193, 51193, 89061, 44601, 65498, 55166, 78207, 96882, 10273, 74137, 94761, 91976, 27393, 5982, 43270, 4644, 98930, 97955, 91728, 30232, 53353, 60911, 82479, 50896, 92346, 83779, 32306, 85888, 74620, 44677, 41002, 25702, 71785, 97735, 11610, 87969, 8363, 59895, 98468, 41432, 6741, 89187, 807, 70266, 25784, 30312, 58248, 17143, 80707, 9900, 69008, 85701, 75368, 64189, 79391, 38473, 75706, 47845, 46118, 43969, 66246, 59731, 9437, 13066, 45567, 65576, 65916, 22938, 78601, 38607, 29736, 96671, 52260, 866, 96032, 28307, 51668, 46211, 81528, 65686, 62249, 75112, 2452, 59411, 85668, 48315, 48660, 19011, 91966, 5617, 94716, 70618, 75031, 84913, 13959, 70344, 19028, 91084, 47933, 14271, 80137, 95728, 79373, 52550, 27052, 64850, 42036, 34379, 81095, 69775, 36891, 31643, 69615, 75889, 65330, 46175, 22794, 51938, 76048, 66399, 12925, 79512, 65149, 99156, 77786, 75136, 63850, 27983, 163, 83968, 18897, 75487, 84066, 40124, 40137, 29741, 81265, 13751, 6077, 70323, 77140, 46603, 81592, 41659, 21555, 73103, 42814, 453, 36415, 4205, 13536, 71091, 49620, 59099, 29041, 97011, 57466, 92646, 51421, 27780, 32239, 87573, 23399, 37866, 79555, 94670, 9618, 29760, 62432, 41776, 68556, 29953, 84143, 63616, 49427, 48817, 9751, 68878, 445, 21288, 85339, 18995, 56345, 16866, 48144, 89677, 6216, 93889, 7713, 72691, 52888, 65940, 88785, 59378, 10410, 52531, 18172, 21126, 57237, 87704, 49359, 6659, 62845, 78169, 50198, 11817, 62173, 13025, 46956, 40242, 75623, 7807, 50733, 55400, 801, 31089, 22369, 9562, 75822, 70337, 35079, 82940, 41349, 20535, 92181, 37925, 94691, 58577, 58392, 76016, 80314, 48391, 66892, 15733, 17821, 99721, 53116, 36734, 32102, 56952, 36025, 39999, 39469, 66729, 87875, 19061, 80761, 55815, 75117, 56420, 43659, 41195, 3666, 27313, 11959, 80667, 78288, 18983, 26011, 31463, 16149, 36365, 10595, 9325, 81369, 8386, 66512, 78038, 30421, 80593, 98968, 67995, 86185, 9518, 42763, 88558, 91531, 91990, 47763, 64997, 84151, 58962, 1227, 87741, 19496, 64335, 28063, 79250, 4057, 50166, 75045, 63364, 94619, 60491, 8718, 31101, 5202, 19847, 62022, 9420, 99440, 89323, 66521, 63641, 20486, 48848, 27549, 23956, 80041, 57488, 11270, 77276, 15248, 97135, 21930, 23763, 93743, 27301, 76399, 12183, 87503, 48212, 23039, 97224, 5231, 67207, 62365, 22793, 23478, 16453, 55315, 25833, 25169, 21262, 39683, 52751, 2069, 22091, 23819, 52654, 326, 51083, 70678, 92901, 23752, 95230, 58370, 68432, 97461, 74330, 58524, 22310, 96485, 45371, 35804, 76179, 92012, 28709, 36639, 28234, 73043, 6900, 57593, 60270, 89573, 25755, 85850, 13409, 8257, 70390, 66093, 77951, 53909, 24764, 41243, 77679, 61800, 91414, 95268, 25077, 85371, 774, 12621, 86013, 28299, 48837, 45121, 1344, 23617, 10469, 60410, 12245, 35634, 2145, 26510, 41836, 64804, 15666, 75457, 95510, 44317, 81901, 13249, 20833, 43709, 9464, 32160, 50017, 21111, 67673, 62845, 83077, 77325, 60279, 73483, 31825, 71896, 35023, 60178, 40049, 13012, 81966, 59069, 79053, 36257, 90813, 91262, 38059, 52832, 19644, 92962, 11655, 54791, 67674, 54798, 15762, 86800, 86954, 4240, 626, 25624, 10196, 444, 76367, 79919, 70813, 51843, 39279, 56588, 32422, 68238, 93518, 2361, 48904, 52145, 43455, 16107, 91347, 20701, 39118, 32667, 98539, 35996, 52232, 20389, 15688, 76468, 25511, 57687, 99387, 89836, 32903, 31327, 37077, 7278, 43807, 81920, 53270, 76392, 58426, 10870, 37725, 3404, 90562, 86735, 60113, 54295, 6545, 63583, 32218, 6667, 87612, 84532, 47545, 54219, 91441, 1495, 27074, 32799, 75928, 46172, 39145, 1687, 75248, 37662, 78790, 69958, 7728, 25610, 96441, 60619, 11309, 55703, 12165, 53391, 3975, 60642, 82556, 32077, 88683, 88919, 60191, 10339, 28660, 81323, 62985, 69085, 34705, 11790, 55552, 74045, 57229, 41999, 77851, 52603, 60134, 74163, 29466, 44032, 77042, 55827, 46275, 60651, 81969, 80036, 89851, 74868, 79014, 8655, 8960, 37731, 31640, 64145, 78515, 65317, 62007, 13150, 47196, 14954, 96896, 94332, 56659, 1527, 33298, 70368, 87874, 22389, 88499, 4496, 94319, 73863, 85315, 98324, 16160, 39053, 72889, 65571, 13036, 95859, 42454, 78237, 83771, 85080, 77077, 44310, 46862, 91680, 56618, 57563, 61114, 92448, 54512, 65173, 1591, 91283, 51408, 59685, 38138, 39856, 50244, 87933, 19966, 57838, 53212, 24554, 54377, 88809, 74065, 28927, 28997, 38252, 93314, 81656, 76433, 68921, 58233, 40409, 65182, 35819, 69656, 99187, 94144, 85930, 39472, 76333, 12590, 16182, 52084, 31848, 35226, 86348, 46527, 38453, 46083, 38070, 37184, 53817, 64380, 68868, 27838, 93694, 39640, 89079, 20718, 60434, 52203, 82438, 82285, 14013, 44621, 28385, 28292, 640, 16965, 93050, 52224, 86325, 72673, 37125, 86711, 80264, 40613, 25910, 75908, 53796, 24684, 35236, 94967, 73414, 93066, 75858, 46906, 6443, 4785, 30255, 75303, 69299, 94041, 64017, 94889, 19422, 50288, 86147, 19335, 52786, 9411, 59212, 74416, 32927, 43363, 1156, 84552, 75055, 53760, 23708, 34242, 46281, 73541, 80732, 94952, 30883, 23775, 77824, 92637, 19881, 97171, 13975, 75848, 58537, 11142, 20784, 92037, 46826, 33945, 17790, 4106, 68663, 92121, 17287, 1326, 51170, 82282, 16756, 96604, 12993, 73188, 81365, 25275, 88274, 56164, 25528, 15572, 5016, 83221, 69710, 80618, 27635, 66825, 53532, 88656, 53820, 97819, 54109, 34427, 97421, 22611, 39499, 94341, 92986, 75362, 38501, 93240, 53422, 20363, 12127, 74969, 58673, 41335, 8567, 28536, 62469, 83414, 87135, 1918, 9029, 60082, 1903, 54102, 4458, 66923, 55710, 38612, 13837, 48118, 30419, 53486, 83981, 71593, 5752, 55599, 64292, 83165, 70730, 47858, 40031, 44376, 62135, 71757, 58455, 73987, 8164, 74310, 3383, 50350, 43627, 98641, 73950, 56783, 55667, 29439, 13024, 86088, 65379, 48842, 26124, 64287, 4044, 95651, 70665, 52101, 88868, 23619, 21268, 45430, 21805, 44387, 20923, 10925, 59829, 3736, 94486, 45484, 43092, 7623, 65549, 61192, 70640, 40174, 36418, 48364, 9903, 70415, 42835, 51212, 47058, 110, 19062, 49430, 8750, 11380, 93612, 64816, 26365, 16789, 21786, 19410, 90158, 95344, 24714, 49505, 23439, 79924, 5708, 95632, 210, 29496, 75674, 56039, 66114, 88719, 16360, 26832, 25331, 20047, 78941, 1840, 54716, 86798, 16344, 51647, 63740, 20721, 56578, 86222, 3308, 28069, 28977, 19352, 91817, 27641, 62236, 58461, 52370, 72096, 34490, 17222, 62590, 29255, 4626, 12575, 87276, 64248, 72580, 88115, 81804, 4349, 73417, 67681, 49439, 10544, 53518, 80972, 8029, 26197, 81037, 91034, 88287, 58303, 53276, 74029, 98200, 46474, 3719, 84521, 87018, 50617, 99251, 81551, 89522, 73508, 51793, 78739, 18330, 663, 75450, 29503, 24767, 18328, 84411, 1872, 80449, 64870, 58147, 42958, 36984, 96633, 24883, 32651, 97082, 63629, 1409, 54518, 40535, 54491, 98088, 22690, 69014, 30909, 32433, 48019, 87187, 29703, 30510, 91, 76180, 89795, 71792, 24257, 3563, 94992, 34670, 60680, 51067, 5025, 14571, 23083, 60329, 679, 36964, 48832, 52905, 78516, 45615, 36655, 53782, 30075, 20348, 93368, 72678, 50162, 28770, 94941, 54406, 31138, 78658, 1441, 61830, 83471, 73989, 92950, 2478, 37670, 44411, 90175, 93382, 75337, 15902, 30699, 68956, 76054, 162, 73841, 64615, 72704, 88222, 34540, 97643, 11616, 12344, 61457, 49757, 50727, 44359, 14354, 70412, 84535, 35874, 45658, 69720, 11703, 76480, 66936, 61655, 75169, 87893, 44452, 11006, 76246, 95264, 20272, 56974, 59007, 34769, 51952, 51967, 74877, 37961, 36567, 97585, 52220, 61800, 82625, 82534, 34075, 58099, 72255, 9327, 21803, 87084, 51762, 89080, 36962, 6595, 65268, 81040, 55040, 37840, 51681, 83087, 72850, 6950, 54331, 49717, 76777, 83813, 95951, 28197, 97202, 86023, 46613, 19230, 57409, 16545, 98620, 94390, 29852, 75418, 18407, 44663, 97814, 67382, 7511, 76096, 68855, 39388, 52360, 46242, 60454, 32204, 87746, 28199, 81690, 30866, 90588, 20347, 63300, 43525, 57899, 59699, 13857, 99862, 22207, 74280, 94207, 98346, 21253, 52248, 39766, 83033, 48691, 72579, 92322, 46309, 70631, 53659, 67738, 12781, 91533, 4117, 47133, 13405, 81259, 51299, 76961, 25492, 3795, 72941, 58118, 47476, 62253, 44672, 72498, 62683, 46086, 67468, 20388, 84790, 81999, 46111, 17378, 75638, 58588, 881, 50645, 10802, 92734, 63501, 34457, 89598, 40748, 70545, 85988, 95040, 57897, 84860, 45830, 95267, 1077, 91465, 90002, 85647, 3648, 71731, 96201, 24638, 83892, 93622, 22343, 53251, 49818, 34298, 14295, 42205, 56582, 78459, 77603, 90745, 36800, 4400, 88676, 85683, 65862, 4360, 23416, 2904, 21566, 98467, 25376, 49006, 36369, 75403, 60412, 72102, 26689, 18917, 47390, 30254, 33470, 43041, 77798, 43555, 7433, 17571, 25207, 71698, 18244, 59356, 74330, 67983, 85781, 826, 6871, 2883, 8399, 17455, 31271, 58648, 44296, 46990, 88708, 74611, 79420, 34920, 85344, 66183, 25734, 59351, 59324, 32620, 2706, 38657, 94156, 69499, 44485, 93174, 5853, 29256, 34033, 71257, 12021, 84472, 96877, 26810, 86073, 91292, 24343, 64757, 89543, 86233, 10328, 18087, 95426, 87255, 59111, 13204, 82272, 47920, 7816, 51280, 13749, 80931, 98702, 33013, 57013, 6675, 85767, 74689, 41693, 90851, 68795, 68671, 8881, 41614, 64893, 27955, 16855, 25872, 43208, 88388, 86712, 17686, 79813, 69005, 5027, 22073, 80777, 85599, 71693, 49787, 47711, 17853, 36243, 21457, 42839, 49461, 86872, 51269, 97904, 43741, 59328, 69675, 3463, 98367, 60800, 26587, 43288, 85921, 90165, 28223, 88205, 84091, 66344, 1826, 35304, 35618, 49015, 49199, 25841, 17603, 77527, 85662, 45420, 28509, 51167, 51268, 84154, 64329, 16565, 9442, 90076, 75881, 4782, 60205, 6769, 91674, 34003, 74578, 72733, 87545, 4206, 28052, 82781, 85932, 50711, 75348, 80198, 11455, 1327, 86134, 37564, 59901, 18599, 71517, 53114, 18520, 64557, 78670, 87692, 71620, 65548, 71178, 81677, 71970, 10464, 22620, 22195, 77956, 4418, 55203, 11700, 98784, 38399, 24455, 40298, 7289, 37776, 72400, 16188, 80764, 29568, 86810, 23501, 6415, 49795, 67835, 18920, 40439, 77315, 71364, 34809, 97484, 58318, 14118, 19910, 49056, 78885, 6403, 97180, 69468, 85211, 40428, 76419, 41686, 21402, 30840, 2461, 91545, 7064, 32359, 56990, 69424, 36729, 45909, 54379, 5088, 79276, 38482, 86180, 84085, 26222, 28341, 77464, 87078, 60437, 23377, 72177, 41295, 89934, 5565, 40676, 12195, 62872, 45462, 96028, 92943, 54536, 50729, 71986, 74930, 33052, 95035, 70624, 62322, 68314, 58325, 46990, 45162, 17813, 92758, 53476, 47437, 96761, 24849, 44445, 96375, 62555, 71, 76157, 29647, 19400, 21696, 65936, 68062, 7281, 91220, 49789, 85559, 31683, 11912, 67412, 24732, 26884, 9241, 34537, 25375, 51131, 40391, 45145, 44728, 45782, 61031, 53204, 70399, 71889, 26001, 6552, 19509, 56662, 11555, 95218, 58719, 97806, 91045, 42350, 22749, 85614, 73820, 88222, 68556, 33412, 24024, 93592, 62099, 2127, 15139, 34046, 76207, 71112, 64054, 62630, 47763, 1035, 67628, 72963, 78895, 79716, 62119, 68788, 74949, 2979, 99411, 39906, 44814, 67655, 27852, 13459, 7291, 12101, 515, 2244, 33614, 63439, 29005, 55576, 42629, 6930, 29788, 57248, 5312, 70711, 83844, 13114, 27565, 669, 19528, 85864, 10015, 63427, 6145, 83549, 65260, 96725, 51131, 27787, 61834, 49541, 28668, 10804, 89712, 44709, 84769, 24300, 7128, 26664, 78177, 2810, 11114, 96015, 22346, 46964, 13084, 20875, 23752, 25227, 74168, 96219, 14502, 55362, 95576, 49492, 83605, 69907, 82872, 67522, 88517, 96548, 72010, 23593, 68482, 30589, 53016, 58077, 27376, 19951, 10677, 14644, 36767, 79246, 44003, 61915, 44271, 1392, 77815, 38170, 24620, 59474, 24657, 79421, 49935, 13143, 83288, 21886, 31081, 44853, 79659, 67803, 64845, 28083, 56677, 43231, 71365, 90312, 84973, 90797, 77371, 22477, 43913, 49719, 26206, 76749, 61139, 58292, 26905, 48337, 54347, 14232, 33854, 95563, 3905, 97517, 85234, 32140, 9884, 19905, 51033, 69917, 342, 30517, 67870, 12714, 69931, 46612, 12443, 53619, 81789, 46342, 45825, 90010, 61463, 29453, 82639, 87604, 70054, 56769, 5919, 2407, 97231, 5877, 23467, 80117, 92272, 97005, 9211, 26202, 55260, 20407, 44889, 94761, 89401, 91787, 96673, 34114, 79740, 79549, 72892, 51326, 28894, 17289, 95177, 49202, 30362, 62022, 78717, 5353, 30343, 3869, 41593, 86240, 52333, 33599, 41995, 62195, 89564, 7114, 18707, 17023, 17779, 46230, 7629, 70414, 41215, 16509, 8013, 808, 92266, 31643, 51830, 71126, 89892, 85975, 77745, 55988, 50623, 3739, 78682, 19012, 45804, 89860, 69778, 67099, 72105, 22234, 80273, 41931, 40052, 16522, 17920, 10273, 89293, 97694, 91463, 88316, 91449, 62236, 65267, 85716, 48516, 23938, 68243, 94583, 53179, 991, 93217, 55476, 9105, 46565, 48710, 5518, 59634, 66301, 47692, 52471, 2041, 25271, 71707, 18628, 24266, 36655, 21339, 40475, 97402, 21175, 27017, 47913, 95064, 57435, 32292, 94948, 92796, 73450, 99587, 65122, 10087, 73267, 45963, 78628, 98680, 34592, 8719, 10983, 21616, 1753, 71969, 63336, 69556, 70120, 30750, 49823, 5396, 91015, 14400, 91469, 61436, 59279, 74598, 81305, 60660, 39477, 62101, 12412, 10029, 46883, 94774, 24377, 13009, 6931, 84811, 77386, 49998, 61077, 82777, 86865, 13414, 73737, 78792, 94836, 50824, 93456, 28208, 78308, 75063, 36479, 9898, 89011, 60190, 68252, 66989, 63224, 20394, 48717, 79202, 87322, 71296, 43692, 56462, 23404, 84234, 33417, 58081, 80884, 61213, 95943, 22991, 4914, 73984, 43409, 12431, 9997, 31295, 21614, 69040, 9293, 73897, 49634, 24304, 56253, 2776, 51718, 99622, 16511, 48487, 3699, 72077, 58578, 79644, 83061, 12262, 5725, 93810, 81071, 73783, 84825, 65181, 24343, 21162, 82951, 19416, 18577, 1883, 87199, 39819, 69209, 24984, 56697, 27982, 82150, 99596, 90001, 53045, 83185, 7379, 80257, 98287, 91683, 51975, 78869, 733, 16717, 82557, 25937, 60907, 61598, 18499, 93165, 20504, 43013, 37331, 23537, 6050, 79382, 2492, 10747, 63830, 6091, 21421, 74, 44487, 4145, 31967, 35532, 66497, 81763, 25157, 22023, 69948, 28456, 59257, 18550, 9615, 98829, 69216, 36964, 25327, 88599, 9397, 12926, 11044, 57388, 70607, 42683, 76319, 106, 2365, 24552, 16679, 69124, 23420, 1239, 84439, 95664, 35422, 44779, 11468, 48739, 37515, 71321, 39101, 64723, 41195, 70414, 92986, 82186, 17731, 13779, 21129, 98348, 62151, 81552, 91614, 99984, 9317, 84156, 73292, 71741, 1080, 26412, 20798, 80058, 91244, 20289, 30858, 56243, 60217, 66610, 69658, 24274, 75526, 23355, 77408, 25288, 96296, 1324, 78500, 74542, 5698, 12929, 81072, 73217, 43075, 60965, 48606, 36094, 93655, 54175, 12041, 79205, 50782, 61462, 6722, 80068, 22626, 95177, 75385, 59632, 58981, 65634, 6299, 57185, 83820, 94222, 28021, 36415, 57415, 71418, 71608, 5781, 22753, 94541, 1896, 31202, 15581, 69230, 4693, 78236, 33731, 23787, 87734, 39360, 48019, 23443, 90531, 57829, 74387, 77581, 90829, 51606, 11914, 68847, 86471, 57206, 10039, 57886, 40705, 27706, 16112, 38709, 29539, 19153, 85171, 31873, 66391, 26693, 51739, 54231, 25540, 76555, 18993, 95004, 15535, 56758, 74932, 65680, 74489, 31653, 61430, 38135, 32774, 79805, 45958, 70777, 4091, 60839, 91596, 99981, 43021, 17319, 27327, 76137, 11397, 1983, 25677, 19908, 12574, 94966, 31457, 9737, 91912, 12363, 43711, 438, 76015, 98734, 13578, 71709, 45833, 31139, 73495, 16011, 46248, 88054, 64988, 35626, 21680, 50263, 27860, 42218, 71465, 52062, 47110, 94793, 18941, 18892, 85768, 3852, 37405, 81752, 19260, 37351, 36054, 81651, 32230, 16289, 88100, 11768, 58979, 99422, 7261, 79525, 54350, 743, 65969, 13162, 54289, 10678, 68400, 84625, 16855, 29582, 89233, 75864, 32854, 51759, 43331, 18667, 79363, 80344, 50154, 76252, 33914, 59593, 30289, 16324, 4110, 18568, 71830, 42088, 91719, 46370, 68517, 94689, 33507, 63128, 81598, 18990, 83677, 78823, 62013, 50043, 89097, 82566, 77738, 98628, 55375, 45233, 48985, 72567, 61580, 11634, 62273, 71354, 29010, 12349, 48547, 13067, 69170, 16320, 43269, 87329, 78740, 5327, 58387, 80443, 89749, 36224, 17, 38795, 31401, 40768, 7211, 31463, 65989, 73511, 31105, 1648, 82391, 81970, 37286, 90456, 82766, 86367, 7445, 14567, 14314, 53020, 8096, 79160, 72562, 6453, 23107, 79730, 68969, 78234, 37993, 8438, 60213, 88446, 80693, 87053, 1637, 13745, 17249, 24658, 76287, 77024, 72193, 59010, 72284, 66562, 78620, 23789, 31431, 95151, 43875, 98927, 73510, 40697, 1457, 3675, 88685, 29961, 91451, 53300, 59144, 75587, 52455, 76129, 2072, 40067, 39893, 20350, 57213, 90934, 73116, 78059, 81328, 82816, 85012, 58637, 1620, 69742, 58523, 72422, 6459, 94187, 27687, 17739, 45185, 17521, 41633, 25270, 84125, 36288, 75249, 11112, 68318, 61451, 83888, 15311, 63290, 64453, 1265, 25529, 49433, 16046, 5741, 79169, 85863, 56808, 61968, 2794, 60299, 89316, 16619, 94510, 54850, 19796, 17003, 12410, 56170, 41942, 46328, 58128, 72570, 58192, 4979, 17606, 1691, 53769, 97244, 28949, 15445, 76385, 717, 93401, 13430, 47996, 4364, 36492, 16272, 55921, 69558, 23248, 28927, 62150, 15907, 91416, 27343, 27269, 472, 32087, 63940, 53510, 13437, 38547, 36304, 742, 96094, 25195, 5712, 9607, 62763, 9717, 67935, 65157, 84279, 14358, 6122, 16200, 88594, 40313, 91558, 81915, 3855, 91524, 86188, 16523, 79369, 87992, 67956, 90859, 40941, 51283, 12314, 34717, 92325, 60171, 45275, 98007, 96704, 17639, 58435, 27756, 5365, 99815, 24909, 98021, 26327, 58124, 15755, 18426, 64297, 35573, 61309, 16187, 79868, 51486, 45730, 78617, 37922, 1039, 75258, 16744, 36985, 53515, 22251, 69230, 95322, 67672, 46676, 71533, 51537, 23346, 22854, 68734, 16325, 95324, 45824, 83374, 21388, 60818, 99583, 95900, 86150, 46082, 34422, 16784, 64876, 74280, 58169, 97708, 81688, 72242, 52421, 72681, 95226, 90967, 62572, 68324, 97248, 95257, 26905, 80240, 83841, 76511, 67257, 72100, 53915, 89238, 70058, 75439, 39406, 45980, 62806, 16010, 76152, 57206, 93970, 99587, 78989, 85621, 214, 91544, 35198, 38339, 63741, 29843, 50047, 24544, 55137, 18832, 20751, 86839, 32091, 64302, 73402, 60363, 74229, 58799, 61522, 77394, 86098, 85865, 9249, 2584, 87551, 61234, 76623, 34297, 66839, 64680, 94797, 22826, 25821, 62802, 47209, 19520, 89632, 75429, 56422, 47965, 44771, 15125, 89548, 61943, 60286, 19182, 7502, 69845, 44958, 32525, 77062, 9992, 44238, 33246, 66304, 84916, 45781, 74103, 11343, 96685, 52541, 13502, 46605, 87472, 56912, 63639, 66181, 79658, 362, 21583, 96143, 42979, 52725, 57153, 13918, 54753, 12902, 51934, 38919, 62086, 52939, 54667, 72595, 79038, 30264, 50058, 16864, 12949, 62268, 18913, 71398, 46598, 74138, 54997, 90401, 98657, 99071, 75970, 12631, 99750, 97330, 86871, 58911, 80769, 41470, 91980, 5718, 36129, 10835, 30367, 66713, 52427, 13703, 55325, 66749, 35875, 12413, 38261, 99390, 62834, 48984, 86643, 11679, 19099, 3308, 74494, 57025, 24276, 44332, 23247, 39157, 67709, 29128, 40693, 30242, 91176, 29784, 27065, 28914, 61254, 75007, 92662, 52755, 91193, 23389, 22936, 18673, 42, 92708, 38340, 83729, 48992, 40581, 23927, 25555, 88825, 15185, 93193, 27481, 87816, 42235, 47482, 72260, 75138, 88729, 49640, 73970, 65376, 36144, 92930, 52012, 64097, 93939, 56125, 7263, 8497, 73560, 10701, 93231, 56105, 80797, 49930, 78829, 51586, 23605, 38866, 71299, 7709, 49256, 47761, 9723, 60362, 1237, 7474, 72325, 70623, 6206, 39164, 56594, 9488, 81081, 39401, 5226, 23462, 99259, 7444, 57725, 49274, 39761, 85705, 91314, 84410, 28398, 70778, 69318, 97515, 16373, 11364, 48645, 3354, 83254, 99550, 71601, 69635, 78301, 15077, 28611, 99639, 97322, 80303, 83593, 29957, 15362, 5047, 97095, 40772, 15648, 35115, 47069, 50367, 26892, 81171, 37552, 90704, 65573, 85817, 38569, 94091, 58412, 45411, 19661, 40371, 16169, 65778, 19205, 74912, 13514, 90588, 94013, 97850, 5147, 63973, 19005, 66190, 11312, 87348, 54179, 50142, 20485, 66094, 83366, 51991, 61449, 75539, 86906, 60028, 3156, 84214, 38232, 25925, 75115, 68261, 26423, 66003, 31355, 51366, 44877, 62601, 58159, 89130, 44800, 12662, 88401, 64264, 36251, 30704, 44316, 49571, 41083, 71252, 99899, 27041, 49572, 97532, 4313, 18567, 85155, 70586, 52832, 98623, 11915, 41075, 72517, 25366, 75675, 85524, 85596, 23888, 37790, 39013, 77021, 5174, 30318, 3795, 78422, 12991, 43461, 61059, 33281, 88284, 22149, 8747, 75231, 260, 21980, 13122, 88764, 54269, 7662, 66580, 19742, 78137, 5274, 82578, 96809, 42637, 80578, 88949, 33787, 87896, 52281, 53984, 22603, 47302, 4034, 36658, 17745, 99635, 82757, 81326, 54359, 82609, 59376, 71666, 56938, 46786, 16317, 91720, 70004, 12214, 40799, 95151, 1160, 8967, 34926, 76382, 77790, 18581, 32962, 88367, 94969, 3841, 69992, 88150, 10630, 62437, 16009, 75957, 45552, 78212, 99402, 15619, 58921, 49263, 77974, 56860, 82165, 57305, 68875, 74916, 92613, 44403, 62680, 91595, 75847, 51862, 69399, 98227, 18522, 88501, 32917, 66894, 14452, 27641, 38497, 54246, 83637, 97682, 1950, 35125, 27366, 55629, 31965, 48378, 31295, 87828, 1197, 20302, 49577, 65980, 77619, 11480, 87363, 29955, 71208, 76115, 82867, 29579, 68260, 39740, 36569, 71127, 27303, 89204, 88953, 713, 48941, 81060, 98971, 68156, 42027, 60811, 52222, 6640, 47002, 90008, 79032, 90693, 21485, 62237, 90064, 63020, 80281, 87974, 17640, 36141, 13864, 1617, 6786, 9797, 64832, 4169, 50834, 39992, 34254, 77927, 58742, 65275, 13576, 14856, 47298, 9675, 81727, 77096, 7786, 54645, 53649, 54111, 31535, 96712, 56735, 76888, 56391, 52924, 27330, 61066, 49364, 87959, 34458, 18447, 88850, 24478, 94246, 50021, 9756, 45491, 99479, 76764, 79396, 75373, 65175, 71649, 52802, 19275, 90339, 46982, 48413, 80241, 61965, 75481, 57915, 94900, 79550, 84755, 7945, 6814, 32493, 84005, 38417, 97431, 50903, 12941, 16401, 57794, 83283, 20510, 50902, 79379, 28506, 70169, 17181, 16438, 29780, 82059, 35686, 16417, 24716, 6086, 3610, 79439, 99177, 36441, 13382, 93011, 75819, 20303, 57301, 89051, 33830, 25068, 82822, 66473, 36615, 81103, 40295, 49858, 29304, 240, 70273, 69961, 21168, 81338, 45793, 76648, 65875, 64597, 12226, 41446, 7845, 71218, 57134, 1821, 85974, 1190, 75662, 15631, 84125, 60078, 65726, 15611, 161, 47670, 38401, 38459, 39688, 4622, 73081, 49771, 38371, 10163, 52177, 8940, 87568, 97045, 38886, 68244, 68221, 47222, 1660, 2101, 65788, 73507, 47429, 62811, 63877, 77136, 47633, 17466, 87366, 23085, 95080, 35978, 50262, 44188, 88649, 86024, 18702, 76607, 37863, 33399, 51392, 87558, 81803, 95399, 6065, 56588, 38981, 25819, 72231, 11744, 24089, 82144, 7293, 93080, 752, 99142, 6079, 44693, 73541, 90682, 75815, 61539, 69297, 83185, 96177, 94419, 68616, 87258, 86768, 13794, 65865, 28119, 30837, 40529, 67985, 17238, 53922, 21909, 78221, 64068, 14657, 51707, 34435, 62270, 99156, 38115, 50228, 4677, 23310, 16901, 65651, 16521, 30153, 81862, 9080, 96571, 95071, 68703, 8296, 38460, 98533, 28555, 79327, 97278, 40123, 31417, 41142, 36455, 42778, 82144, 46511, 96079, 94903, 43074, 5213, 29571, 61965, 88844, 81264, 93158, 95622, 70122, 85596, 27822, 93509, 2267, 38798, 34022, 39547, 9228, 63569, 61237, 28593, 66966, 80864, 28806, 75448, 16212, 65182, 1080, 98303, 2302, 96263, 37968, 74983, 54387, 42446, 76023, 64598, 77612, 58388, 96493, 97163, 58825, 68184, 2608, 76776, 75992, 5702, 81579, 84287, 4661, 75890, 30160, 13506, 18819, 73240, 9413, 52636, 14329, 20273, 67821, 99681, 47898, 44674, 72008, 14259, 79624, 57470, 31222, 2105, 48992, 4192, 53995, 33922, 27773, 94075, 85180, 17492, 59117, 30518, 88821, 48216, 37171, 37047, 31425, 75819, 65880, 64396, 78038, 23911, 60891, 98331, 57440, 94516, 6381, 56620, 93653, 30433, 74130, 29590, 75876, 93424, 70151, 73637, 26824, 43483, 55711, 76671, 88587, 79529, 68931, 51311, 31786, 59014, 45346, 7889, 96920, 99130, 89954, 40148, 84718, 42528, 80389, 13317, 74931, 67901, 1032, 14752, 7896, 91306, 75545, 77742, 81578, 26956, 45518, 88575, 31016, 12993, 66499, 13973, 10485, 40866, 29236, 29273, 3617, 50419, 36052, 82126, 42775, 25241, 39031, 77224, 85170, 11766, 16761, 70850, 42055, 96935, 26097, 78835, 85021, 70186, 49652, 43805, 45161, 88166, 67685, 49935, 12424, 97555, 33673, 63640, 60390, 90072, 3861, 32325, 90731, 44735, 19502, 89663, 40946, 31662, 13679, 46644, 85998, 55614, 58221, 9049, 55089, 75504, 86233, 50038, 16848, 71082, 67380, 93051, 558, 78568, 76478, 28497, 71621, 39603, 99271, 38177, 54947, 33925, 10268, 39813, 90227, 17659, 93204, 66522, 59373, 48822, 14023, 24969, 38299, 33691, 73268, 61837, 30052, 8028, 13755, 48614, 27534, 97574, 88870, 43340, 83373, 69465, 37713, 78920, 21226, 18202, 6383, 62651, 87946, 26597, 64898, 72809, 17016, 82053, 6690, 29502, 36796, 7107, 46906, 68351, 65747, 45175, 9625, 58626, 50686, 11509, 96644, 58340, 83231, 67398, 367, 10020, 92421, 60443, 62665, 88178, 96833, 83413, 80851, 75273, 82573, 96259, 22282, 19580, 95881, 85798, 95834, 45938, 33855, 36918, 13356, 3630, 97053, 55354, 72584, 4087, 75118, 52757, 22589, 82992, 67432, 31663, 28616, 2457, 50340, 38266, 73977, 70544, 23448, 53050, 73071, 66372, 80404, 20111]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<average> sum(opposite) / 52))))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> +)   (<data> (<average> sum(opposite) / 52))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}))))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})))))) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :})))) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})))))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})))) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})))))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<average> sum(opposite) / 52))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))))) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))))))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}))))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<average> sum(opposite) / 52)))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})))) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.6838389121338913, 0.5641561950269665]