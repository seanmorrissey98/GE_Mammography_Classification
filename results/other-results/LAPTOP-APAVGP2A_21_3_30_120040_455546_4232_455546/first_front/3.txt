Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 50
  if sum(main[-index:]) - opposite[index] - sum(opposite) / 52 - sum(opposite) / 52 - sum(main) / 52 + sum(main) / 52 > sum(main[-index:]) + sum(main) / 52 - opposite[index] + main[index]:
    x = (x - 0.2)
  index = 15
  if sum(main) / 52 > opposite[index] + sum(opposite) / 52:
    x = (x + 0.9)
  index = 25
  if sum(opposite[:-index]) - sum(opposite) / 52 > opposite[index] - sum(main[:-index]):
    x = (x + 0.3)
  index = 44
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.2:
      x = (x + 0.8)
  else:
    if main[index] > opposite[index] + 3:
      x = (x + 0.0000001)
    else:
      x = (x + 0.4)
  index = 35
  if main[index] < 1:
    if main[index] < opposite[index] + 0.1:
      x = (x + 0.00001)
  else:
    if opposite[index] < main[index] + 0:
      x = (x - 0.2)
    else:
      x = (x + 0.001)
  index = 26
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.8:
      x = (x + 0.4)
  else:
    if main[index] < opposite[index] + 2:
      x = (x - 0.000001)
    else:
      x = (x + 0.01)
  index = 15
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 100:
    x = (x + 0.0001)
  index = 44
  if main[index] < 1:
    if opposite[index] > main[index] + 0.9:
      x = (x + 0.6)
  else:
    if main[index] > main[index] + 1:
      x = (x - 0.7)
    else:
      x = (x - 0.0001)
  index = 23
  if main[index] > sum(main) / 52 - opposite[index]:
    x = (x - 0.01)
  index = 29
  if main[index] < 1:
    if main[index] > opposite[index] + 0.3:
      x = (x - 0.001)
  else:
    if main[index] < opposite[index] + 2:
      x = (x - 0.1)
    else:
      x = (x + 0.9)
  index = 44
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.001)
  index = 28
  if main[index] < sum(main[:-index]):
    x = (x - 0.1)
  index = 38
  if main[index] < sum(opposite) / 52:
    x = (x - 0.0000001)
  index = 2
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x + 0.0001)
  index = 23
  if main[index] < sum(opposite) / 52:
    x = (x - 0.01)
  index = 31
  if sum(main) / 52 < opposite[index]:
    x = (x + 0.00001)
  index = 25
  if main[index] > sum(opposite) / 52:
    x = (x + 0.0001)
  index = 31
  if main[index] > sum(opposite[:-index]) - sum(main) / 52:
    x = (x - 0.00001)
  index = 7
  if main[index] < 1:
    if main[index] > main[index] + 0.9:
      x = (x - 0.0001)
  else:
    if opposite[index] > main[index] + 4:
      x = (x - 0.01)
    else:
      x = (x + 0.5)
  index = 46
  if sum(opposite[:-index]) < sum(opposite[-index:]) - sum(main) / 52:
    x = (x - 0.0001)
  index = 20
  if main[index] < 1:
    if main[index] < main[index] + 0.9:
      x = (x + 0.8)
  else:
    if opposite[index] > opposite[index] + 2:
      x = (x - 0.2)
    else:
      x = (x + 0.7)
  index = 47
  if main[index] < 1:
    if opposite[index] < main[index] + 0.0000001:
      x = (x - 0.9)
  else:
    if main[index] > opposite[index] + 0:
      x = (x + 0.1)
    else:
      x = (x - 0.2)
  index = 16
  if opposite[index] > opposite[index]:
    x = (x + 0.0000001)
  index = 5
  if opposite[index] > sum(opposite) / 52:
    x = (x - 0.6)
  index = 38
  if sum(opposite) / 52 < main[index]:
    x = (x - 0.0000001)
  index = 9
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.9:
      x = (x - 0.2)
  else:
    if opposite[index] > main[index] + 9:
      x = (x + 0.0000001)
    else:
      x = (x + 0.000001)
  index = 50
  if opposite[index] < opposite[index]:
    x = (x + 0.001)
  index = 51
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.2)
  index = 2
  if main[index] < sum(opposite) / 52:
    x = (x - 0.5)
  index = 12
  if opposite[index] < sum(main) / 52:
    x = (x - 0.01)
  index = 16
  if sum(main) / 52 - main[index] < sum(opposite) / 52:
    x = (x - 0.5)
  index = 1
  if sum(main[-index:]) < main[index]:
    x = (x + 0.1)
  index = 23
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x - 0.1)
  index = 28
  if sum(opposite) / 52 > main[index]:
    x = (x + 0.00001)
  index = 12
  if main[index] < opposite[index]:
    x = (x + 0.4)
  index = 44
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.6)
  index = 4
  if main[index] < 1:
    if main[index] > main[index] + 0.9:
      x = (x - 0.9)
  else:
    if opposite[index] > main[index] + 1:
      x = (x - 0.0000001)
    else:
      x = (x + 0.000001)
  index = 44
  if opposite[index] < opposite[index]:
    x = (x + 0.4)
  index = 37
  if sum(opposite) / 52 > main[index]:
    x = (x - 0.2)
  index = 31
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.4)
  index = 28
  if sum(main[:-index]) > sum(main[:-index]):
    x = (x + 0.4)
  index = 14
  if opposite[index] > sum(opposite) / 52:
    x = (x + 0.5)
  index = 25
  if sum(opposite[-index:]) < opposite[index]:
    x = (x + 0.00001)
  index = 8
  if sum(main) / 52 > opposite[index]:
    x = (x + 0.001)
  index = 41
  if main[index] < 1:
    if main[index] < opposite[index] + 0.6:
      x = (x - 0.3)
  else:
    if opposite[index] < opposite[index] + 3:
      x = (x - 0.0001)
    else:
      x = (x + 0.0000001)
  index = 17
  if sum(main) / 52 < opposite[index]:
    x = (x - 0.8)
  index = 6
  if main[index] < 1:
    if main[index] > opposite[index] + 0.01:
      x = (x + 0.2)
  else:
    if opposite[index] < opposite[index] + 4:
      x = (x - 0.6)
    else:
      x = (x + 0.8)
  index = 32
  if sum(opposite) / 52 < main[index]:
    x = (x - 0.0000001)
  index = 25
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 1.0)
  index = 8
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.0001:
      x = (x + 0.8)
  else:
    if opposite[index] < main[index] + 3:
      x = (x - 0.01)
    else:
      x = (x - 0.7)
  index = 38
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x + 0.6)
  index = 1
  if main[index] > opposite[index]:
    x = (x + 0.3)
  index = 6
  if sum(main) / 52 < sum(main) / 52:
    x = (x + 0.01)
  index = 16
  if opposite[index] < opposite[index]:
    x = (x - 1.0)
  index = 29
  if main[index] > sum(opposite) / 52:
    x = (x + 0.3)
  index = 21
  if sum(main) / 52 > main[index]:
    x = (x - 0.00001)
  index = 16
  if sum(main) / 52 > main[index]:
    x = (x + 0.4)
  index = 19
  if opposite[index] > main[index]:
    x = (x + 0.4)
  index = 29
  if sum(main) / 52 > sum(opposite[:-index]):
    x = (x - 0.4)
  index = 42
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x + 0.9)
  index = 10
  if sum(main) / 52 > opposite[index]:
    x = (x + 0.6)
  index = 29
  if sum(main) / 52 > opposite[index]:
    x = (x + 0.4)
  index = 29
  if main[index] < 1:
    if main[index] < opposite[index] + 0.01:
      x = (x - 1.0)
  else:
    if main[index] < main[index] + 4:
      x = (x + 0.00001)
    else:
      x = (x + 0.8)
  index = 50
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 500:
    x = (x + 0.3)
  index = 24
  if main[index] < 1:
    if opposite[index] > main[index] + 0.6:
      x = (x - 0.1)
  else:
    if main[index] > main[index] + 1:
      x = (x - 0.5)
    else:
      x = (x - 0.6)
  index = 3
  if main[index] < 1:
    if main[index] < opposite[index] + 0.2:
      x = (x + 1.0)
  else:
    if opposite[index] < main[index] + 5:
      x = (x - 0.1)
    else:
      x = (x - 0.2)
  index = 28
  if sum(opposite[:-index]) + sum(opposite) / 52 + sum(main) / 52 > sum(opposite) / 52 - main[index]:
    x = (x - 0.9)
  index = 49
  if sum(main[-index:]) < opposite[index] - opposite[index]:
    x = (x - 0.1)
  index = 34
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 500:
    x = (x - 0.1)
  index = 42
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x + 0.9)
  index = 10
  if main[index] < 1:
    if main[index] > main[index] + 1.0:
      x = (x + 0.2)
  else:
    if opposite[index] > main[index] + 1:
      x = (x - 0.000001)
    else:
      x = (x + 0.5)
  index = 16
  if main[index] < 1:
    if main[index] < main[index] + 0.9:
      x = (x + 0.2)
  else:
    if main[index] < main[index] + 0:
      x = (x + 0.8)
    else:
      x = (x - 0.001)
  index = 43
  if main[index] > opposite[index]:
    x = (x + 0.0001)
  index = 26
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x + 0.3)
  index = 12
  if sum(opposite) / 52 < sum(opposite[-index:]):
    x = (x - 0.000001)
  index = 25
  if opposite[index] < opposite[index]:
    x = (x + 0.001)
  index = 33
  if opposite[index] < main[index]:
    x = (x - 1.0)
  index = 6
  if main[index] < 1:
    if main[index] < main[index] + 0.9:
      x = (x - 0.9)
  else:
    if opposite[index] > main[index] + 5:
      x = (x + 0.001)
    else:
      x = (x - 0.00001)
  index = 6
  if opposite[index] < main[index]:
    x = (x - 0.0000001)
  index = 17
  if main[index] > sum(opposite) / 52:
    x = (x + 0.9)
  index = 30
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x - 0.00001)
  index = 25
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 5000:
    x = (x + 0.01)
  index = 46
  if main[index] > main[index]:
    x = (x + 1.0)
  index = 18
  if sum(main) / 52 < opposite[index]:
    x = (x + 1.0)
  index = 46
  if sum(main[-index:]) < opposite[index]:
    x = (x + 0.001)
  index = 10
  if main[index] > sum(main) / 52:
    x = (x + 0.00001)
  index = 29
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x + 0.001)
  index = 19
  if sum(opposite[:-index]) > main[index]:
    x = (x + 0.000001)
  index = 5
  if sum(main[-index:]) > sum(main) / 52:
    x = (x - 0.00001)
  index = 1
  if sum(opposite[:-index]) > opposite[index]:
    x = (x - 0.0001)
  index = 16
  if main[index] > sum(opposite) / 52:
    x = (x + 0.00001)
  index = 13
  if sum(opposite) / 52 < main[index]:
    x = (x + 0.9)
  index = 9
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 100:
    x = (x - 0.0000001)
  index = 28
  if main[index] < sum(main) / 52:
    x = (x + 0.0001)
  index = 1
  if main[index] < 1:
    if main[index] > opposite[index] + 0.000001:
      x = (x + 0.2)
  else:
    if main[index] > opposite[index] + 0:
      x = (x - 0.001)
    else:
      x = (x + 0.6)
  index = 24
  if sum(opposite) / 52 > sum(opposite) / 52:
    x = (x - 0.3)
  index = 21
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.0000001:
      x = (x - 0.4)
  else:
    if opposite[index] > opposite[index] + 3:
      x = (x + 0.6)
    else:
      x = (x - 0.4)
  index = 21
  if main[index] < opposite[index]:
    x = (x - 0.00001)
  index = 29
  if opposite[index] < opposite[index]:
    x = (x - 0.0000001)
  index = 3
  if main[index] > main[index]:
    x = (x - 0.1)
  index = 8
  if main[index] < 1:
    if opposite[index] < main[index] + 0.5:
      x = (x - 0.4)
  else:
    if main[index] > main[index] + 0:
      x = (x + 0.6)
    else:
      x = (x - 0.000001)
  index = 43
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.1:
      x = (x - 0.6)
  else:
    if main[index] < main[index] + 1:
      x = (x - 0.001)
    else:
      x = (x + 0.2)
  index = 42
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.9)
  index = 31
  if opposite[index] - sum(main) / 52 < sum(main) / 52:
    x = (x - 0.5)
  index = 42
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 5000:
    x = (x + 0.4)
  index = 29
  if main[index] > main[index]:
    x = (x - 0.7)
  index = 48
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x - 0.3)
  index = 9
  if main[index] < 1:
    if main[index] > main[index] + 0.2:
      x = (x + 0.6)
  else:
    if opposite[index] > main[index] + 4:
      x = (x + 1.0)
    else:
      x = (x - 0.001)
  index = 5
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x - 0.000001)
  index = 32
  if main[index] < 1:
    if main[index] > main[index] + 0.5:
      x = (x - 0.6)
  else:
    if main[index] < opposite[index] + 7:
      x = (x - 0.1)
    else:
      x = (x - 0.7)
  index = 17
  if main[index] < 1:
    if opposite[index] < main[index] + 0.6:
      x = (x + 0.000001)
  else:
    if main[index] > main[index] + 6:
      x = (x + 1.0)
    else:
      x = (x - 0.9)
  index = 2
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.00001)
  index = 47
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x - 0.001)
  index = 36
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.1:
      x = (x - 0.3)
  else:
    if main[index] < opposite[index] + 4:
      x = (x + 0.1)
    else:
      x = (x + 0.0000001)
  index = 5
  if main[index] > opposite[index]:
    x = (x - 0.001)
  index = 29
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x + 0.000001)
  index = 14
  if sum(opposite) / 52 > main[index]:
    x = (x + 0.9)
  index = 51
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.5:
      x = (x - 0.0001)
  else:
    if main[index] < opposite[index] + 8:
      x = (x + 0.1)
    else:
      x = (x - 0.1)
  index = 12
  if main[index] > main[index]:
    x = (x + 0.00001)
  index = 30
  if sum(main) / 52 < sum(main) / 52:
    x = (x + 0.4)
  index = 15
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.0001)
  index = 23
  if sum(opposite) / 52 < opposite[index]:
    x = (x - 0.0000001)
  index = 24
  if sum(main) / 52 < main[index]:
    x = (x - 0.01)
  index = 27
  if sum(main[:-index]) > opposite[index] + sum(opposite) / 52:
    x = (x - 0.3)
  index = 45
  if sum(main) / 52 > sum(opposite[-index:]):
    x = (x - 0.0000001)
  index = 39
  if opposite[index] + sum(main) / 52 - main[index] < opposite[index] + opposite[index] - main[index]:
    x = (x + 0.9)
  index = 32
  if opposite[index] + sum(main) / 52 + sum(main) / 52 + main[index] + opposite[index] < main[index] - sum(main) / 52:
    x = (x - 0.4)
  index = 19
  if sum(main[:-index]) - sum(opposite) / 52 < opposite[index]:
    x = (x + 0.1)
  index = 39
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 1000:
    x = (x - 1.0)
  index = 35
  if sum(opposite[-index:]) - main[index] - opposite[index] - sum(opposite) / 52 > main[index] + opposite[index] + sum(main) / 52 + main[index]:
    x = (x - 0.1)
  index = 11
  if main[index] > sum(opposite) / 52 - opposite[index] - main[index]:
    x = (x + 0.01)
  index = 14
  if sum(main) / 52 - sum(opposite) / 52 < sum(opposite) / 52 + sum(opposite) / 52 - main[index]:
    x = (x - 0.4)
  return x
XXX_output_XXX = p()

Genotype:
[72177, 95024, 21759, 57191, 63963, 7207, 16591, 35151, 53497, 13386, 39597, 12869, 49777, 4813, 97970, 5000, 69234, 47053, 83327, 88813, 95054, 44584, 14919, 68875, 42965, 58819, 80380, 68188, 61076, 267, 93471, 96104, 57143, 11702, 45793, 33520, 85891, 60105, 11383, 63964, 84030, 72633, 41163, 5270, 22514, 99789, 27755, 2667, 68371, 73377, 69645, 69754, 19566, 29690, 41419, 49287, 96203, 91215, 77295, 61398, 27826, 36585, 58576, 44191, 29101, 68523, 88861, 11428, 31245, 22489, 60040, 31060, 7540, 62617, 23383, 63884, 49487, 48610, 55832, 16318, 85615, 46141, 92830, 54542, 9723, 15814, 72502, 59964, 77330, 25782, 38774, 54647, 97591, 48843, 98043, 63477, 23222, 30825, 70845, 75510, 30751, 95179, 5887, 76440, 64738, 83634, 24647, 14139, 42604, 41289, 77902, 99845, 93638, 99395, 97537, 13210, 66587, 83345, 66669, 81048, 57426, 92083, 67015, 27249, 77453, 6062, 82786, 973, 73750, 30220, 28188, 84313, 16088, 64666, 68840, 54701, 34666, 64871, 34074, 78860, 56800, 69785, 45538, 38704, 36005, 98390, 90368, 60032, 51337, 62902, 37602, 17320, 17521, 75127, 40724, 41271, 11121, 81998, 90445, 65456, 40774, 40304, 25706, 68654, 54154, 46862, 56188, 77180, 24462, 88248, 94615, 67664, 16591, 43327, 91356, 36641, 33148, 76390, 15754, 28147, 9539, 28692, 53012, 18299, 36536, 12973, 92277, 67546, 58596, 11937, 59850, 99618, 52290, 12545, 50134, 64662, 11356, 48153, 8383, 12187, 62327, 19213, 22864, 22084, 7038, 81520, 98772, 39283, 89520, 44498, 42471, 43785, 99535, 28158, 12467, 68184, 84013, 77314, 41260, 11668, 41775, 44903, 81682, 12547, 94169, 6899, 95588, 6028, 7697, 31648, 66439, 87050, 33413, 69713, 96611, 40420, 66479, 64365, 51284, 66774, 60136, 11098, 51585, 30326, 60376, 1201, 32141, 45338, 1133, 8937, 84886, 23557, 33289, 96092, 74865, 65164, 16601, 27685, 3334, 86739, 96646, 48757, 30471, 66306, 43117, 72506, 19838, 86503, 6165, 59616, 91338, 40424, 36777, 1934, 3386, 59326, 74470, 63362, 77518, 51355, 44014, 76068, 68558, 47848, 10916, 96218, 29024, 58981, 22959, 22608, 43646, 16601, 55831, 23850, 81983, 57187, 50451, 81224, 92421, 94282, 55011, 54447, 55189, 57196, 55850, 91228, 52764, 65798, 59913, 25715, 61831, 89646, 41217, 25651, 57062, 5496, 83602, 78248, 68308, 19828, 88901, 72563, 77129, 49484, 10708, 15721, 33940, 26100, 15964, 3739, 15581, 18611, 18882, 15018, 36321, 72239, 46923, 69154, 85530, 56086, 27879, 20032, 7974, 15793, 25690, 6411, 97732, 28125, 33390, 55657, 58159, 90472, 25868, 52834, 50086, 67748, 85620, 10135, 93671, 55443, 83022, 75613, 33587, 31192, 5409, 16078, 35686, 5932, 62398, 78531, 70137, 74441, 34068, 86670, 37656, 94272, 96303, 91306, 60003, 55487, 83732, 97708, 29200, 98376, 66152, 18331, 41168, 2432, 14907, 89823, 71, 21038, 53388, 15770, 60543, 29618, 32898, 99335, 93658, 21553, 77806, 55722, 9124, 91843, 21173, 4848, 31157, 90390, 67843, 90877, 8602, 37546, 86758, 66873, 60302, 31943, 67159, 86822, 54110, 45641, 38529, 35027, 95014, 59092, 19651, 17178, 85457, 50620, 63370, 51744, 49929, 86886, 73527, 19739, 68055, 36758, 41900, 91736, 20428, 35661, 8884, 97919, 79973, 40670, 78466, 28483, 1227, 68303, 7546, 1552, 46348, 94970, 34223, 94348, 8992, 81916, 77485, 24722, 70590, 67413, 27625, 43803, 61291, 82508, 76844, 8516, 18574, 52274, 36628, 49843, 66054, 61300, 73146, 59014, 54469, 69769, 95062, 51825, 5254, 3200, 99658, 12478, 60092, 32476, 96883, 93019, 3503, 62309, 82894, 6501, 89137, 98958, 99103, 49538, 90121, 26700, 57368, 64902, 85302, 26283, 63928, 81111, 74681, 32404, 5150, 63502, 60081, 77242, 15892, 14009, 32784, 2174, 41181, 82048, 4391, 64691, 99509, 53388, 23185, 85631, 28272, 4549, 43190, 13604, 21972, 90785, 58277, 97493, 1750, 84790, 55905, 14669, 18572, 97372, 29594, 14447, 19556, 41986, 41606, 96784, 3427, 70629, 73002, 92818, 69390, 54867, 57577, 24364, 24809, 66827, 50157, 35791, 26226, 72844, 94051, 39241, 3054, 52787, 89546, 51623, 59813, 74519, 27477, 32672, 78804, 57822, 46738, 97000, 56857, 99007, 28668, 87211, 64705, 56490, 3103, 59244, 71189, 7535, 48678, 64389, 96363, 83887, 10709, 61557, 74840, 16089, 94854, 99241, 4196, 44812, 9356, 87609, 94785, 25603, 39864, 71167, 3659, 19879, 38707, 96447, 90967, 70116, 65010, 94331, 23109, 88393, 12491, 88043, 30786, 38862, 17489, 363, 82814, 15672, 73856, 61648, 20301, 33974, 69051, 81949, 5882, 54943, 15240, 56946, 70701, 29481, 73491, 64737, 14851, 61859, 34453, 80862, 38574, 93230, 82814, 43460, 4117, 60101, 27104, 62574, 99289, 40292, 69125, 74919, 98515, 46282, 66198, 89042, 69530, 78427, 37011, 25859, 266, 44844, 43485, 82366, 97615, 66552, 94996, 5711, 45466, 52290, 55680, 9160, 65320, 24711, 78681, 29324, 95449, 84401, 31496, 93545, 40850, 95714, 77599, 24718, 9767, 62341, 8855, 66728, 56544, 29650, 8570, 86494, 78381, 26916, 24827, 52665, 1149, 93851, 49961, 1500, 53056, 44281, 35799, 99191, 30699, 73916, 61391, 7442, 26114, 51613, 12529, 66990, 11433, 2525, 99107, 79640, 31279, 89669, 62986, 4692, 25643, 58551, 1211, 13760, 46898, 9117, 28406, 50085, 19124, 52044, 72895, 48673, 90291, 77466, 86306, 46508, 29565, 30974, 35123, 53017, 33050, 93251, 90100, 42370, 47133, 8984, 26412, 66695, 17955, 51855, 69205, 22533, 14531, 65111, 17684, 77630, 21654, 47560, 12325, 84619, 22179, 60897, 44417, 61337, 54917, 8326, 60428, 81654, 65973, 21357, 92192, 34191, 37779, 12606, 82937, 92679, 22037, 55367, 84185, 75303, 23840, 34109, 98416, 44176, 12115, 91288, 94680, 73209, 59640, 49660, 30054, 34007, 5417, 817, 11701, 60847, 77343, 26589, 8525, 35076, 44113, 26769, 84126, 32519, 31557, 95441, 33809, 24602, 39710, 17476, 13705, 80866, 25551, 2928, 18322, 7303, 76102, 17654, 74840, 87793, 18032, 44745, 46819, 92471, 82061, 49796, 26629, 8454, 30732, 76602, 5189, 33, 36906, 61688, 76221, 64744, 51289, 5917, 40049, 29691, 47288, 57351, 73606, 65503, 93503, 7754, 47201, 78913, 75155, 47061, 73596, 31442, 83935, 52510, 40153, 69714, 90627, 84445, 38349, 33577, 22782, 32945, 93158, 68581, 87194, 23704, 10964, 62838, 38062, 88315, 84583, 71274, 85531, 37366, 54993, 39640, 84098, 25280, 92866, 6986, 62308, 57797, 74741, 67034, 6367, 65003, 98779, 87062, 42077, 15657, 9236, 47432, 75266, 1710, 96069, 2606, 98091, 64954, 92167, 12287, 51369, 38536, 38736, 9339, 92175, 71349, 59051, 18372, 32019, 95986, 12597, 86499, 37168, 11909, 6517, 87920, 71185, 90468, 95757, 54219, 71654, 58637, 2092, 49776, 6452, 45043, 65413, 78795, 39502, 19689, 196, 20890, 31597, 84479, 10344, 9034, 42027, 86220, 33870, 19820, 81989, 36825, 77178, 84906, 31063, 13125, 48083, 36713, 8690, 85363, 38123, 23548, 17821, 66124, 26916, 2885, 31048, 57568, 8806, 74999, 75699, 54223, 24205, 15421, 57913, 23207, 75124, 71612, 75249, 82055, 67052, 21223, 67277, 59057, 4506, 15223, 38672, 59038, 1279, 87798, 78251, 78203, 92407, 73969, 77365, 45583, 14433, 94563, 56665, 66793, 69307, 13960, 47304, 50372, 94184, 98019, 35909, 10591, 18089, 91924, 6497, 59520, 76811, 27940, 56027, 66253, 8125, 13708, 87643, 29196, 48597, 12962, 48870, 44421, 24604, 85633, 27957, 53316, 61184, 52676, 65442, 36391, 85297, 52228, 42490, 79595, 215, 87744, 74059, 11872, 1819, 96439, 2823, 49588, 77312, 7583, 11470, 80907, 92704, 54939, 36548, 35805, 95075, 8967, 12500, 78717, 91350, 73752, 288, 35512, 170, 54580, 75507, 69006, 79993, 15898, 23475, 47993, 94675, 34156, 33787, 38519, 23318, 60986, 79285, 44142, 85154, 39722, 90448, 43679, 66225, 97227, 1753, 72708, 31051, 19611, 25380, 23434, 42484, 85944, 56246, 50866, 13700, 40297, 74077, 60236, 188, 37457, 40806, 77202, 69253, 92271, 5501, 59020, 86059, 63132, 47803, 66965, 49238, 64838, 61208, 63581, 35434, 87495, 22495, 61747, 30580, 95084, 75842, 10921, 59727, 53150, 74609, 50719, 29872, 93523, 45027, 33663, 10308, 25828, 40933, 90691, 14768, 64834, 20635, 81985, 92236, 81613, 72666, 21876, 17768, 80210, 2331, 93673, 6187, 61619, 58433, 70250, 78965, 7639, 32570, 38761, 16611, 81421, 81477, 98511, 85620, 39304, 64348, 1800, 46020, 78841, 24629, 76387, 91103, 9078, 55830, 7086, 88449, 33884, 47063, 42946, 71936, 57567, 26367, 1509, 15534, 87422, 65499, 26410, 15235, 9010, 46628, 90956, 38450, 60840, 8700, 33601, 78513, 32604, 1536, 73663, 70884, 79886, 10855, 12512, 78803, 39281, 6688, 89515, 77533, 78240, 72647, 73673, 85874, 39882, 15954, 22144, 64145, 71361, 4377, 19408, 3015, 26897, 82372, 13961, 58514, 34055, 87199, 93306, 97199, 20781, 7044, 42206, 19104, 43262, 85726, 69225, 63119, 84245, 30053, 2647, 93851, 41576, 41880, 31750, 12471, 36063, 94157, 28344, 64041, 70728, 12252, 94160, 9306, 58221, 64792, 94768, 92445, 56765, 76905, 22786, 67991, 16856, 66583, 62700, 11153, 2436, 92857, 82349, 94134, 43054, 42037, 56804, 41857, 34013, 46897, 8765, 31468, 69109, 75727, 82748, 2002, 63778, 26307, 75735, 56091, 38731, 53326, 59721, 15975, 31434, 89458, 12437, 2153, 53607, 22487, 56220, 25993, 10415, 75862, 54760, 98440, 14843, 11936, 22293, 61693, 80536, 26000, 12940, 10058, 54200, 47456, 79536, 95138, 1610, 29144, 46050, 45376, 89605, 98875, 14795, 91943, 83212, 64058, 65171, 76217, 6740, 36011, 30336, 31386, 91810, 61255, 68458, 51425, 17327, 45782, 16635, 44293, 33980, 34293, 17797, 49576, 39629, 13779, 67270, 82280, 98351, 53485, 38307, 87917, 98441, 82739, 12828, 88277, 17444, 55969, 73779, 51704, 32649, 31337, 57552, 34043, 66991, 24913, 83789, 68134, 85443, 68615, 73444, 4813, 58761, 35876, 24633, 80686, 62096, 51987, 72996, 99682, 64725, 93267, 98001, 90852, 8649, 75197, 87103, 76411, 68725, 48286, 62489, 40991, 54397, 36426, 92576, 5560, 34041, 65720, 65305, 55527, 38752, 47601, 16694, 96755, 20313, 49074, 99620, 74199, 51395, 6610, 5073, 79601, 19605, 64321, 16185, 9532, 61989, 69241, 48705, 24436, 90705, 87750, 51903, 21943, 13473, 98840, 14004, 16480, 53769, 22264, 77413, 40646, 66682, 57774, 41451, 28161, 76213, 36817, 16065, 68323, 84916, 79070, 78051, 79800, 72641, 83550, 87844, 87742, 40324, 4062, 87890, 7206, 24279, 28190, 73257, 41133, 13485, 92048, 48290, 68902, 11984, 30882, 63489, 63754, 31629, 64453, 10128, 95041, 93784, 63244, 43645, 17972, 68311, 74247, 97613, 34759, 76197, 18123, 31500, 34186, 84842, 92509, 8536, 64322, 9057, 13575, 90971, 36962, 9388, 83027, 3894, 3854, 17333, 36163, 46110, 55253, 57917, 91769, 46874, 68232, 60506, 49750, 87354, 41753, 4598, 51928, 2533, 61402, 87170, 36481, 95247, 96059, 84407, 26569, 22398, 5827, 87766, 38124, 7967, 86779, 36729, 38396, 35500, 96925, 52312, 51292, 43118, 40543, 54685, 33549, 67403, 56916, 90705, 86773, 13233, 38539, 60642, 26492, 98259, 4339, 59640, 25971, 27759, 39175, 96489, 54494, 58489, 86730, 3151, 67595, 1334, 10316, 66508, 82042, 89795, 10155, 91825, 9442, 4154, 19828, 78680, 71601, 32439, 55601, 1437, 99889, 91171, 60425, 86083, 75886, 23701, 93429, 69777, 1492, 14289, 84433, 56003, 89444, 82357, 47933, 87301, 744, 23923, 21048, 59903, 15927, 51309, 92290, 46122, 14838, 70752, 97092, 43293, 92506, 18564, 55024, 43921, 50173, 88643, 12394, 71908, 12287, 86280, 92599, 56273, 41161, 51100, 73416, 99757, 62736, 58598, 44944, 8686, 11646, 94812, 44845, 84527, 14622, 64395, 88779, 69559, 48381, 54560, 55124, 37458, 84194, 43450, 24206, 45760, 6150, 63065, 26385, 53759, 55437, 76655, 44506, 56223, 32236, 11364, 34010, 73596, 5947, 81614, 18545, 1023, 46467, 67183, 59761, 64145, 81817, 92922, 2315, 305, 39595, 54544, 66086, 55353, 60499, 30250, 57184, 29074, 17444, 56744, 52669, 67970, 82741, 5605, 22428, 59724, 35243, 33009, 94885, 37040, 77395, 61599, 56876, 48251, 80629, 33861, 77950, 90114, 83125, 58899, 91734, 42501, 37047, 98790, 9107, 62011, 19489, 77742, 51002, 95542, 90660, 77838, 79158, 41234, 57127, 28041, 38209, 99781, 79785, 32193, 48966, 92994, 20387, 97659, 30589, 54933, 60263, 33698, 14050, 43325, 93782, 75977, 71684, 40425, 42143, 17465, 45619, 67434, 10693, 60508, 97659, 50085, 88773, 75451, 15937, 83084, 24702, 72435, 67643, 23717, 28840, 20320, 37101, 1073, 22706, 40816, 13115, 98856, 82319, 46587, 40781, 24108, 18591, 38720, 80411, 61129, 85532, 19777, 45589, 92032, 97774, 30780, 11461, 72180, 88623, 92323, 10498, 89485, 12130, 66498, 37021, 31830, 44361, 55284, 20319, 96283, 99474, 37195, 10369, 88333, 65786, 72985, 73235, 29277, 74390, 54946, 47520, 59780, 17202, 83810, 4795, 736, 38751, 83923, 22123, 90, 45636, 14196, 23951, 48492, 33366, 77494, 67619, 77664, 98329, 44577, 11884, 34424, 44775, 22466, 26764, 30821, 30633, 86352, 86833, 33508, 51721, 32022, 73551, 27963, 69337, 45241, 95242, 84528, 29219, 80230, 60874, 42605, 83305, 19111, 56014, 97427, 48831, 7361, 60121, 57065, 78106, 42341, 50536, 64897, 53033, 99566, 29172, 59828, 34005, 82972, 18918, 13962, 76273, 50995, 87920, 77161, 53099, 53901, 30900, 40720, 52555, 76535, 9630, 27701, 8396, 1771, 49995, 34692, 91849, 52553, 49140, 30250, 9938, 77842, 43433, 41925, 67665, 94355, 4674, 71839, 75613, 26870, 24580, 26046, 94970, 16183, 60632, 84251, 19651, 87929, 99137, 88432, 91272, 82562, 24816, 27382, 4120, 75762, 80252, 88885, 2400, 23800, 63623, 87072, 59781, 50318, 54913, 43970, 41654, 31013, 94247, 45570, 68082, 8700, 31585, 68564, 95487, 80420, 78757, 10436, 29535, 45669, 12913, 39751, 92158, 92615, 20624, 59060, 66858, 54078, 76417, 40555, 60413, 67333, 63957, 29969, 21300, 22114, 268, 3444, 42435, 72226, 1551, 92697, 94273, 4845, 26925, 38811, 8977, 7523, 32481, 26348, 99076, 499, 42421, 92132, 39794, 25552, 93971, 59584, 29644, 85490, 90038, 99443, 53314, 12123, 63838, 40272, 81963, 60810, 67134, 60343, 18307, 99457, 66573, 35626, 71023, 88587, 23356, 35400, 42142, 44026, 61908, 91752, 37234, 3216, 62695, 47488, 16118, 80335, 22537, 31581, 58204, 35460, 88621, 88310, 20472, 52157, 89891, 12706, 41747, 12461, 52106, 49530, 85838, 84149, 45428, 56659, 27000, 93196, 68369, 89379, 82283, 53770, 57028, 92506, 45930, 45132, 5266, 25613, 18253, 62564, 42670, 71541, 4185, 83892, 72126, 24396, 41391, 41660, 71805, 596, 8280, 16758, 9497, 45766, 50894, 24185, 13114, 31876, 63655, 4447, 52054, 35918, 18151, 2838, 33399, 46846, 44892, 66937, 76713, 13434, 48081, 30941, 20684, 77120, 94618, 57303, 38711, 8083, 16459, 81750, 59812, 19258, 26278, 10398, 67597, 75926, 69026, 93983, 88442, 52922, 62549, 33843, 27602, 24986, 84549, 40815, 15371, 81440, 19296, 76726, 63529, 86918, 92904, 94037, 40272, 90467, 67507, 47643, 87609, 50336, 65868, 61406, 21512, 9405, 15949, 99903, 45882, 61205, 39699, 93419, 75938, 89932, 90347, 42102, 1691, 88224, 29562, 39922, 43078, 54167, 16794, 55537, 67075, 63818, 92579, 10229, 10676, 14401, 98086, 38532, 46812, 13025, 96363, 47009, 73292, 78825, 61241, 12698, 78926, 19836, 26352, 7003, 59016, 87718, 53149, 72035, 48010, 50794, 80796, 32920, 69612, 60912, 66725, 5767, 66623, 37812, 79892, 87647, 73821, 80622, 68045, 54618, 44670, 88022, 41992, 93636, 68403, 5558, 35023, 12286, 13143, 49446, 87917, 26299, 97593, 99501, 23257, 35824, 77599, 89116, 67992, 20871, 18056, 7091, 2564, 99087, 33053, 28285, 84012, 48559, 45818, 55505, 96565, 94012, 69606, 69096, 89748, 46624, 3664, 12826, 38506, 35044, 18753, 47464, 47312, 31362, 6535, 45185, 14019, 1575, 79097, 53362, 3838, 32667, 74207, 14826, 94360, 13008, 1097, 62937, 85525, 73775, 43879, 13492, 22700, 59016, 40202, 55289, 84491, 78910, 50638, 3938, 46876, 25398, 10538, 47985, 36919, 86239, 38147, 26628, 94971, 72807, 60176, 48803, 43755, 60101, 29878, 55881, 44430, 52723, 95194, 30274, 23328, 94218, 40488, 91011, 42042, 13655, 60870, 49786, 66501, 32885, 26767, 99995, 31732, 66434, 56600, 4939, 26406, 48848, 999, 77547, 57861, 58698, 85126, 70601, 15822, 28424, 38763, 67012, 58641, 17902, 11023, 10841, 44056, 47274, 10478, 10291, 6867, 91374, 62363, 83176, 87484, 11942, 27263, 57726, 1026, 70651, 14678, 903, 21756, 22089, 52895, 74297, 52336, 91344, 89458, 91916, 74959, 13687, 66548, 39789, 52239, 68817, 37226, 25107, 79867, 90839, 68736, 79040, 19589, 55687, 76252, 10679, 63566, 40221, 59703, 46247, 64993, 69487, 37666, 75198, 81697, 54856, 10219, 18079, 83746, 20800, 42613, 49804, 99278, 18055, 27448, 40222, 2244, 34334, 37479, 321, 3615, 82901, 26757, 35117, 73099, 43979, 83781, 5381, 28611, 67959, 54400, 97480, 44568, 76641, 6411, 24836, 51271, 37349, 69332, 12169, 20165, 49702, 7763, 50120, 41584, 88165, 71796, 20452, 22261, 79993, 13364, 64921, 4803, 14984, 84062, 44395, 73506, 27834, 79792, 87410, 98378, 43230, 29403, 13176, 83623, 49276, 26576, 99268, 36312, 24637, 47234, 4963, 53264, 50727, 84273, 19481, 22230, 26048, 18996, 7055, 51940, 46716, 81342, 23043, 85803, 95932, 42603, 2427, 98167, 52135, 62864, 77549, 51345, 55841, 76703, 3623, 9896, 45356, 21033, 27429, 65607, 3010, 50947, 48037, 43438, 88583, 62848, 80244, 66388, 90689, 58544, 10424, 2174, 45124, 96534, 56050, 73074, 72340, 17168, 75220, 93680, 30556, 11071, 21491, 61445, 52186, 90892, 39417, 61509, 28683, 58348, 68322, 15561, 28212, 39989, 66365, 54444, 89994, 79922, 71569, 31655, 43597, 96855, 71376, 35961, 65306, 51604, 79442, 13176, 46735, 28729, 18299, 47730, 89818, 43198, 49212, 28862, 27800, 57101, 21499, 9557, 39460, 97751, 57292, 55126, 9005, 88275, 57617, 22856, 40971, 56360, 52412, 66779, 15576, 7149, 54399, 13287, 51961, 7207, 68285, 21733, 96651, 62300, 16287, 11625, 25048, 49281, 68742, 17122, 38294, 66056, 98851, 96249, 52299, 83082, 97253, 98183, 43069, 66745, 75955, 40727, 62617, 30929, 40790, 27400, 13965, 77242, 31914, 68000, 99698, 96151, 57017, 52518, 62834, 35566, 81095, 97675, 90154, 82057, 71327, 7716, 67023, 14198, 13204, 32881, 25323, 41950, 48767, 15062, 4920, 90751, 3174, 70495, 71476, 54638, 48934, 39965, 8734, 15840, 99239, 65099, 3789, 56088, 51360, 84095, 45586, 2114, 72967, 20859, 14124, 83261, 19826, 25686, 60846, 85060, 43936, 94133, 10405, 73548, 52734, 24926, 11678, 93448, 14225, 26458, 82238, 22982, 39176, 59059, 62383, 75831, 52471, 49977, 1963, 50535, 50774, 37317, 24682, 51835, 75474, 15400, 34476, 7188, 51341, 68106, 37764, 1488, 88226, 77531, 77219, 91154, 39233, 39179, 58561, 23982, 74242, 90001, 6585, 8073, 21130, 54263, 98322, 58825, 70944, 67457, 42959, 4106, 44824, 88098, 8035, 55003, 23278, 80231, 536, 70250, 20965, 254, 96077, 79031, 91092, 76171, 75433, 31666, 37794, 10264, 45417, 69508, 64902, 48117, 88006, 17030, 12965, 93910, 72206, 26966, 52009, 4554, 20084, 31630, 34515, 65989, 98267, 85523, 36927, 27888, 93465, 22692, 57845, 71902, 41481, 39008, 93655, 19415, 1008, 82001, 85597, 96091, 37493, 61913, 31249, 23105, 72412, 17259, 41913, 54902, 20619, 45715, 34125, 73830, 69773, 68753, 25178, 92098, 70523, 14315, 29809, 99969, 45045, 11040, 57208, 96075, 59875, 1357, 74754, 26083, 23257, 20681, 84429, 89568, 31060, 20212, 25438, 79929, 16820, 33827, 27530, 51989, 57378, 41570, 10564, 66473, 84891, 33487, 14914, 57812, 54301, 24913, 83253, 61627, 8486, 11764, 26943, 55227, 78254, 9328, 1947, 73647, 56473, 17332, 95592, 29173, 56185, 99181, 33881, 15579, 2825, 7474, 23765, 10848, 28492, 41131, 21049, 13988, 28727, 25041, 75228, 21749, 71839, 22014, 18421, 58665, 17339, 20682, 21548, 98340, 63228, 22611, 78304, 81128, 29080, 6923, 96489, 15628, 99074, 5622, 38248, 99705, 34252, 30676, 92985, 32473, 50274, 54302, 83291, 9380, 24702, 99883, 42832, 92815, 8824, 3999, 47725, 23283, 76445, 21099, 61990, 96171, 13257, 56686, 77856, 65054, 52588, 28404, 64035, 83341, 54561, 92872, 72227, 32776, 60, 55606, 1098, 41958, 73020, 92423, 83409, 20976, 91563, 65805, 35657, 68670, 38702, 14456, 75886]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<average> sum(opposite) / 52))))   (<combine> -)   (<data> (<average> sum(main) / 52))))   (<combine> +)   (<data> (<average> sum(main) / 52))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<average> sum(opposite) / 52)))) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<average> sum(opposite) / 52))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))))))) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})))) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})))))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}))))) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :})))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<average> sum(opposite) / 52))))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})))) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})))) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<average> sum(main) / 52))))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))))) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})))))))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<average> sum(opposite) / 52)))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<point> main[index]))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<average> sum(opposite) / 52))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))))) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<average> sum(opposite) / 52))))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<combine> +)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<average> sum(opposite) / 52))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<average> sum(opposite) / 52))))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9116108786610879, 0.5049300800412835]