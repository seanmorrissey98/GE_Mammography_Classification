Generation:
0

Phenotype:
def p():
  x = 0.0
  index = 35
  if sum(opposite) / 52 + sum(opposite[:-index]) - sum(opposite[:-index]) - main[index] + sum(opposite[:-index]) - sum(main[-index:]) + sum(opposite) / 52 + sum(main[-index:]) > sum(main) / 52 + sum(main[-index:]):
    x = (x - 0.000001)
  index = 34
  if opposite[index] + sum(main) / 52 + sum(opposite[:-index]) - sum(main) / 52 + sum(main) / 52 - main[index] < sum(main[:-index]) - sum(main[:-index]) + sum(main) / 52:
    x = (x - 0.7)
  index = 1
  if sum(opposite) / 52 + sum(main) / 52 > sum(main) / 52 - sum(main) / 52:
    x = (x - 0.0001)
  index = 15
  if sum(main) / 52 + sum(main) / 52 + sum(main) / 52 + main[index] + main[index] > sum(opposite[:-index]):
    x = (x - 0.4)
  index = 0
  if sum(opposite[-index:]) - main[index] - sum(main) / 52 > sum(main[-index:]) + sum(opposite[-index:]) + sum(opposite[-index:]):
    x = (x - 0.0001)
  index = 48
  if main[index] < 1:
    if opposite[index] < main[index] + 0.0001:
      x = (x + 0.9)
  else:
    if opposite[index] < opposite[index] + 9:
      x = (x - 0.2)
    else:
      x = (x - 0.5)
  index = 50
  if sum(main[-index:]) > sum(opposite) / 52:
    x = (x - 0.2)
  index = 30
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.01)
  index = 44
  if main[index] < 1:
    if main[index] < main[index] + 0.4:
      x = (x - 0.001)
  else:
    if opposite[index] < main[index] + 1:
      x = (x - 0.4)
    else:
      x = (x - 0.4)
  index = 14
  if sum(opposite[:-index]) > main[index] - sum(main) / 52:
    x = (x + 0.00001)
  index = 37
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 1.0)
  index = 49
  if main[index] < 1:
    if opposite[index] > main[index] + 0.001:
      x = (x + 0.000001)
  else:
    if main[index] > main[index] + 4:
      x = (x + 0.5)
    else:
      x = (x - 0.3)
  index = 26
  if sum(opposite) / 52 > main[index]:
    x = (x - 0.4)
  index = 46
  if sum(opposite) / 52 > sum(main) / 52 + main[index]:
    x = (x + 0.7)
  index = 32
  if main[index] < 1:
    if main[index] > main[index] + 0.7:
      x = (x - 0.000001)
  else:
    if opposite[index] > main[index] + 2:
      x = (x - 0.000001)
    else:
      x = (x + 0.8)
  index = 10
  if sum(main) / 52 > main[index]:
    x = (x - 0.001)
  index = 47
  if opposite[index] > main[index]:
    x = (x + 0.5)
  index = 32
  if main[index] < 1:
    if opposite[index] > main[index] + 0.2:
      x = (x - 0.00001)
  else:
    if opposite[index] < main[index] + 2:
      x = (x - 0.1)
    else:
      x = (x + 0.8)
  index = 8
  if sum(opposite) / 52 > sum(opposite) / 52:
    x = (x + 0.2)
  index = 34
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.00001:
      x = (x - 0.4)
  else:
    if main[index] > main[index] + 1:
      x = (x + 0.3)
    else:
      x = (x + 0.6)
  index = 11
  if sum(opposite) / 52 < main[index] - sum(main) / 52 - opposite[index] + main[index]:
    x = (x - 0.7)
  index = 10
  if sum(main) / 52 < opposite[index]:
    x = (x + 0.5)
  index = 38
  if opposite[index] - sum(main[:-index]) < sum(opposite) / 52 - main[index] + main[index]:
    x = (x + 0.1)
  index = 36
  if sum(opposite) / 52 - sum(opposite) / 52 - sum(main) / 52 + sum(opposite) / 52 - opposite[index] < sum(main) / 52 - opposite[index] + sum(opposite) / 52 - sum(main[:-index]):
    x = (x - 1.0)
  index = 41
  if sum(main) / 52 > sum(main) / 52:
    x = (x - 1.0)
  index = 11
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.00001)
  index = 9
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.0001)
  index = 21
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x - 0.9)
  index = 45
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 5000:
    x = (x - 0.9)
  index = 14
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.4)
  index = 49
  if opposite[index] < sum(opposite) / 52:
    x = (x + 1.0)
  index = 6
  if sum(opposite) / 52 < sum(main) / 52:
    x = (x + 0.9)
  index = 40
  if sum(main[:-index]) > main[index]:
    x = (x + 0.00001)
  index = 25
  if opposite[index] > sum(opposite[:-index]):
    x = (x - 0.001)
  index = 37
  if main[index] > opposite[index]:
    x = (x + 0.001)
  index = 47
  if main[index] < 1:
    if main[index] > main[index] + 0.6:
      x = (x - 0.2)
  else:
    if opposite[index] < main[index] + 6:
      x = (x + 0.2)
    else:
      x = (x - 0.8)
  index = 51
  if main[index] < 1:
    if main[index] < main[index] + 0.00001:
      x = (x + 0.8)
  else:
    if main[index] > main[index] + 8:
      x = (x + 0.5)
    else:
      x = (x - 0.7)
  index = 17
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 5000:
    x = (x + 0.7)
  index = 10
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.7:
      x = (x + 0.6)
  else:
    if opposite[index] < opposite[index] + 2:
      x = (x + 0.4)
    else:
      x = (x - 0.3)
  index = 7
  if opposite[index] < sum(opposite) / 52 - opposite[index]:
    x = (x - 0.000001)
  index = 27
  if sum(main[:-index]) > main[index]:
    x = (x + 1.0)
  index = 31
  if sum(opposite) / 52 < sum(main) / 52:
    x = (x + 0.9)
  index = 50
  if main[index] < sum(opposite) / 52:
    x = (x - 0.000001)
  index = 29
  if sum(main) / 52 > sum(main) / 52:
    x = (x - 0.0001)
  index = 36
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.2:
      x = (x + 0.0000001)
  else:
    if main[index] > opposite[index] + 9:
      x = (x + 0.0001)
    else:
      x = (x + 0.000001)
  index = 46
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 50:
    x = (x + 0.3)
  index = 34
  if main[index] < 1:
    if main[index] > main[index] + 0.5:
      x = (x - 0.6)
  else:
    if main[index] < main[index] + 4:
      x = (x - 0.3)
    else:
      x = (x - 0.7)
  index = 30
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x - 0.2)
  index = 37
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.001)
  index = 29
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 100:
    x = (x + 0.1)
  index = 41
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.5)
  index = 40
  if opposite[index] < sum(main) / 52:
    x = (x + 0.6)
  index = 21
  if main[index] > sum(main) / 52:
    x = (x + 0.01)
  index = 18
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 5000:
    x = (x - 1.0)
  index = 41
  if main[index] < main[index]:
    x = (x - 0.0000001)
  index = 11
  if opposite[index] < main[index]:
    x = (x + 0.2)
  index = 7
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 5000:
    x = (x - 0.000001)
  index = 1
  if sum(opposite) / 52 < sum(main) / 52:
    x = (x + 0.00001)
  index = 28
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 500:
    x = (x + 0.2)
  index = 37
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.001)
  index = 27
  if main[index] > main[index]:
    x = (x + 0.2)
  index = 48
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.000001)
  index = 4
  if sum(main) / 52 < main[index]:
    x = (x + 0.00001)
  index = 33
  if sum(opposite) / 52 < main[index]:
    x = (x + 0.0001)
  index = 8
  if sum(opposite) / 52 < main[index]:
    x = (x + 0.01)
  index = 4
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.7)
  index = 0
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x + 0.01)
  index = 36
  if sum(main[:-index]) < sum(main) / 52:
    x = (x + 0.9)
  index = 0
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.01:
      x = (x - 0.0001)
  else:
    if main[index] < opposite[index] + 0:
      x = (x + 0.9)
    else:
      x = (x + 0.4)
  index = 48
  if main[index] + sum(main) / 52 > sum(opposite[-index:]):
    x = (x + 1.0)
  index = 40
  if main[index] < 1:
    if main[index] > opposite[index] + 0.0001:
      x = (x + 0.3)
  else:
    if opposite[index] < opposite[index] + 9:
      x = (x + 0.0000001)
    else:
      x = (x - 0.00001)
  index = 35
  if main[index] < sum(main) / 52:
    x = (x + 0.001)
  index = 9
  if opposite[index] > main[index]:
    x = (x - 0.000001)
  index = 51
  if sum(opposite[:-index]) - sum(main[:-index]) > main[index]:
    x = (x + 1.0)
  index = 45
  if sum(opposite[:-index]) < main[index]:
    x = (x + 0.8)
  index = 29
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x - 0.0000001)
  index = 9
  if main[index] < 1:
    if main[index] > opposite[index] + 0.0001:
      x = (x + 0.6)
  else:
    if main[index] > opposite[index] + 4:
      x = (x + 0.001)
    else:
      x = (x - 0.0001)
  index = 2
  if main[index] < opposite[index]:
    x = (x - 0.7)
  index = 21
  if main[index] > sum(main) / 52:
    x = (x + 0.0000001)
  index = 49
  if main[index] < 1:
    if main[index] > opposite[index] + 0.5:
      x = (x - 0.7)
  else:
    if main[index] < main[index] + 1:
      x = (x + 0.4)
    else:
      x = (x - 0.9)
  index = 47
  if sum(opposite) / 52 > opposite[index]:
    x = (x + 0.3)
  index = 5
  if main[index] > sum(main) / 52:
    x = (x - 0.4)
  index = 44
  if main[index] > sum(opposite) / 52:
    x = (x + 0.001)
  index = 8
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.00001)
  index = 13
  if sum(opposite) / 52 < sum(main) / 52:
    x = (x - 0.5)
  index = 47
  if main[index] < 1:
    if opposite[index] > main[index] + 0.9:
      x = (x + 0.000001)
  else:
    if opposite[index] < main[index] + 8:
      x = (x - 0.0000001)
    else:
      x = (x + 0.000001)
  index = 21
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x - 0.5)
  index = 47
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.0001)
  index = 25
  if main[index] < 1:
    if opposite[index] < main[index] + 0.1:
      x = (x - 0.3)
  else:
    if main[index] < main[index] + 3:
      x = (x - 0.001)
    else:
      x = (x + 0.00001)
  index = 35
  if sum(main) / 52 < opposite[index]:
    x = (x - 0.8)
  index = 11
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 50:
    x = (x - 0.3)
  index = 25
  if main[index] < 1:
    if main[index] > opposite[index] + 0.9:
      x = (x + 0.001)
  else:
    if opposite[index] < opposite[index] + 6:
      x = (x - 0.001)
    else:
      x = (x + 0.4)
  index = 23
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x + 0.0000001)
  index = 7
  if main[index] > sum(opposite[:-index]) + sum(opposite[:-index]):
    x = (x - 0.0000001)
  index = 6
  if sum(opposite[:-index]) < main[index] - sum(main[-index:]):
    x = (x - 0.7)
  index = 23
  if sum(opposite[:-index]) + sum(main[-index:]) < sum(opposite[:-index]):
    x = (x + 0.6)
  index = 50
  if sum(opposite) / 52 > sum(main[:-index]):
    x = (x - 0.001)
  index = 12
  if opposite[index] > main[index] - main[index]:
    x = (x - 0.6)
  index = 50
  if sum(main) / 52 < sum(main) / 52 - sum(opposite) / 52 + sum(main) / 52 + sum(opposite) / 52:
    x = (x - 0.6)
  index = 10
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.000001)
  index = 17
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x - 0.00001)
  index = 29
  if main[index] < 1:
    if main[index] > opposite[index] + 0.0000001:
      x = (x - 0.6)
  else:
    if opposite[index] < opposite[index] + 2:
      x = (x + 0.000001)
    else:
      x = (x + 0.001)
  index = 30
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.0000001)
  index = 14
  if sum(main) / 52 > sum(opposite) / 52 + sum(opposite) / 52:
    x = (x + 0.9)
  index = 48
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.001:
      x = (x - 0.1)
  else:
    if opposite[index] > opposite[index] + 7:
      x = (x - 0.001)
    else:
      x = (x + 0.000001)
  index = 20
  if main[index] > sum(opposite) / 52:
    x = (x + 0.01)
  index = 10
  if sum(main) / 52 < opposite[index]:
    x = (x + 0.001)
  index = 14
  if main[index] > sum(opposite) / 52:
    x = (x - 0.0000001)
  index = 43
  if sum(main) / 52 > main[index]:
    x = (x - 0.2)
  index = 24
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x + 0.0001)
  index = 32
  if opposite[index] < opposite[index]:
    x = (x + 0.7)
  index = 27
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x + 0.2)
  index = 35
  if opposite[index] > opposite[index]:
    x = (x + 1.0)
  index = 41
  if main[index] < 1:
    if main[index] < main[index] + 0.8:
      x = (x + 0.6)
  else:
    if main[index] < main[index] + 4:
      x = (x + 0.4)
    else:
      x = (x - 1.0)
  index = 47
  if sum(opposite[:-index]) < opposite[index]:
    x = (x - 0.3)
  index = 8
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 100:
    x = (x - 0.0001)
  index = 27
  if main[index] < 1:
    if main[index] < opposite[index] + 0.4:
      x = (x - 0.6)
  else:
    if opposite[index] < main[index] + 7:
      x = (x - 0.2)
    else:
      x = (x - 0.5)
  index = 21
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x - 1.0)
  index = 6
  if sum(main) / 52 < sum(main) / 52:
    x = (x + 0.3)
  index = 2
  if main[index] < sum(opposite) / 52:
    x = (x + 0.6)
  index = 30
  if sum(main) / 52 < main[index]:
    x = (x - 0.0001)
  index = 2
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.000001:
      x = (x - 0.000001)
  else:
    if opposite[index] < opposite[index] + 5:
      x = (x - 0.7)
    else:
      x = (x + 0.2)
  index = 17
  if sum(opposite) / 52 < main[index]:
    x = (x + 0.2)
  index = 5
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x + 0.5)
  index = 45
  if sum(main) / 52 < opposite[index]:
    x = (x + 0.7)
  return x
XXX_output_XXX = p()

Genotype:
[43574, 5497, 7065, 71439, 63021, 74902, 27729, 60355, 72506, 43170, 70643, 42568, 21565, 12910, 95086, 87583, 90820, 7675, 66714, 3639, 64018, 29190, 51268, 95536, 96964, 16126, 29078, 64394, 49389, 44611, 98044, 41434, 58072, 96067, 33318, 38627, 21754, 99050, 57688, 95699, 88094, 35640, 37892, 26287, 53034, 64581, 73614, 85158, 78964, 92049, 15398, 3973, 60806, 84922, 9127, 14175, 6173, 98217, 25079, 31927, 1798, 90259, 44084, 81702, 72704, 62314, 84652, 23825, 7759, 32972, 31244, 8546, 19657, 61767, 97003, 41055, 16714, 5357, 11125, 9041, 35655, 78692, 94469, 77238, 99730, 18246, 16055, 79011, 86364, 35281, 20258, 51908, 67803, 51599, 78154, 46683, 46507, 48323, 99325, 60868, 10741, 79624, 8611, 58642, 95203, 70960, 4170, 7798, 19290, 73344, 58253, 64111, 27963, 29190, 43110, 80593, 64117, 29456, 66849, 66128, 96959, 48489, 2577, 49163, 77215, 87323, 84038, 68981, 64401, 66190, 92094, 72717, 42569, 72787, 91796, 80741, 34102, 76339, 67547, 55528, 89766, 99887, 45686, 35803, 76212, 83967, 76022, 83862, 26357, 67383, 44403, 98847, 75810, 41881, 98762, 34354, 10252, 92964, 54096, 11058, 68570, 57240, 66207, 29746, 85262, 38264, 29315, 36700, 66994, 53662, 38665, 44789, 34944, 68647, 89896, 61059, 9213, 73851, 21302, 52626, 1513, 94319, 387, 9507, 9879, 66825, 39341, 30123, 92902, 26718, 44369, 82416, 55971, 24590, 42030, 84902, 57607, 10675, 14144, 52331, 82332, 27479, 97162, 42335, 45634, 100005, 3474, 85079, 75978, 88284, 77311, 73066, 99581, 18317, 85015, 28585, 60377, 53774, 78867, 58440, 94419, 3679, 64761, 1376, 18003, 83658, 85634, 74006, 93830, 60796, 25374, 15327, 40103, 75649, 75042, 10989, 13606, 51928, 33346, 53991, 81470, 84181, 76093, 54294, 65370, 90781, 4943, 17222, 94874, 43794, 99348, 36853, 45165, 90820, 34839, 81538, 53421, 13469, 26099, 98631, 2348, 80381, 59817, 17912, 61206, 77981, 95172, 61484, 85065, 7552, 18702, 57587, 76808, 91509, 63364, 89714, 68372, 25013, 7501, 98025, 27064, 15400, 73810, 46599, 81119, 47398, 50871, 2320, 98777, 76017, 60837, 68746, 42148, 28633, 3787, 46147, 16290, 6132, 59159, 73076, 24595, 99889, 56566, 88238, 58462, 3927, 6394, 99688, 5754, 64964, 25580, 32026, 97053, 64217, 60550, 3283, 78854, 86239, 2884, 33003, 56711, 32076, 5900, 61425, 83165, 54414, 38666, 5286, 89253, 24914, 98768, 91129, 97739, 97752, 20170, 68052, 59809, 62444, 51964, 84811, 97186, 99747, 69339, 44196, 44628, 82558, 14196, 72263, 68405, 13020, 76427, 91618, 65173, 46291, 70890, 38717, 80116, 84200, 1103, 98665, 34368, 57796, 1792, 22600, 70062, 56320, 15762, 25673, 11429, 40854, 97617, 19304, 63599, 21148, 22704, 26999, 3820, 8020, 18942, 3664, 8349, 7664, 8393, 90840, 81869, 63399, 45693, 12350, 11955, 71086, 58648, 4543, 19877, 8408, 85116, 51303, 68592, 97348, 21612, 6490, 5262, 32336, 37825, 43112, 23112, 33112, 61036, 25304, 85264, 8874, 39179, 90169, 29797, 57343, 46648, 31939, 63154, 79234, 96238, 14365, 18734, 66395, 24643, 15912, 8856, 92214, 29250, 91547, 52738, 22363, 50940, 85737, 8993, 59946, 76754, 33384, 35159, 30721, 53881, 60419, 23941, 57340, 8660, 18391, 79016, 57382, 27448, 29710, 17590, 4799, 25994, 14687, 16838, 28634, 95209, 98780, 1985, 87752, 29336, 98881, 50576, 21898, 30367, 37593, 25202, 24025, 7487, 10866, 31760, 67400, 67456, 29823, 59191, 11614, 71594, 9423, 65284, 15097, 69911, 40532, 45396, 99162, 96050, 92302, 2739, 86358, 52171, 19611, 86013, 79307, 36156, 6530, 44127, 73529, 26578, 5180, 26476, 60082, 61439, 48749, 1683, 71821, 13663, 54479, 75684, 70717, 98859, 79686, 93427, 55450, 2976, 53815, 8392, 622, 66355, 71868, 20958, 49008, 13188, 37731, 66249, 59354, 54116, 86030, 33760, 53637, 7808, 14314, 78022, 26457, 32076, 59679, 75474, 87468, 56952, 72635, 5582, 98061, 26517, 47542, 294, 9520, 74837, 40079, 71583, 65793, 45901, 60154, 54996, 83989, 32956, 98992, 37331, 46170, 10651, 96984, 48803, 58632, 9097, 14066, 17986, 24398, 25722, 55644, 27655, 31692, 16250, 78223, 92593, 78010, 90296, 69624, 29871, 63436, 46101, 73586, 35796, 25892, 42881, 65177, 712, 1866, 74357, 47423, 68644, 46930, 58818, 46434, 63076, 97455, 66559, 97434, 42117, 65898, 82567, 65494, 82936, 78245, 80545, 62866, 14003, 37128, 35055, 55281, 86168, 38601, 7687, 56774, 23870, 10270, 13414, 27722, 6573, 35703, 35821, 6744, 50447, 49262, 82010, 41974, 98536, 78052, 47731, 47655, 20328, 7153, 90835, 23193, 43909, 9667, 2452, 68514, 30195, 99499, 64311, 82997, 65293, 65059, 33978, 97201, 44842, 52379, 89800, 57110, 39753, 69778, 83841, 60717, 14532, 5507, 87264, 95431, 45958, 60548, 81971, 50872, 91819, 19977, 57488, 65963, 25001, 68938, 97726, 43324, 42786, 79360, 25164, 6067, 64060, 61531, 64528, 89479, 5906, 32948, 46726, 23114, 65298, 88031, 65975, 45787, 62965, 51620, 24112, 45369, 56516, 33405, 49986, 71457, 65800, 91179, 93158, 11643, 45516, 58685, 14197, 35387, 77889, 58220, 62043, 30215, 98797, 30226, 69840, 96124, 19774, 43808, 98558, 87500, 47884, 81298, 19828, 45441, 98465, 87491, 84877, 67793, 15837, 37246, 53523, 72403, 15283, 92036, 53518, 83070, 97568, 55414, 98093, 77976, 75091, 16973, 63336, 61048, 4810, 11301, 5598, 64380, 67845, 94115, 29203, 21360, 68779, 1176, 14316, 48515, 32428, 62235, 49568, 87612, 12109, 10903, 97871, 89241, 78765, 75959, 55125, 32496, 45829, 71075, 88523, 25984, 15126, 18949, 41492, 42008, 58572, 77379, 24911, 4179, 58061, 93271, 60810, 24137, 33365, 47774, 24809, 64360, 82139, 43340, 49328, 45997, 65878, 15685, 88283, 716, 75316, 86730, 93536, 2269, 3465, 79192, 98711, 4874, 71441, 25145, 91378, 52997, 73150, 83804, 93444, 17684, 42574, 93785, 89619, 27140, 74270, 23093, 50056, 67444, 14758, 33356, 62729, 61535, 38777, 3146, 74723, 46135, 12194, 19618, 11615, 23556, 7360, 82163, 51033, 966, 21390, 2237, 2260, 45480, 70391, 30449, 15642, 86220, 95161, 28189, 96841, 73666, 21575, 9087, 39816, 6046, 40024, 54890, 31996, 48958, 81888, 36508, 51246, 83401, 58966, 77983, 28017, 84247, 13684, 88902, 44752, 23888, 53492, 96687, 29679, 25657, 62332, 41635, 22469, 52376, 47031, 55326, 10734, 6063, 77586, 16161, 36469, 55004, 3616, 33515, 6656, 63796, 61886, 77421, 68591, 68420, 60945, 42488, 24645, 75108, 25179, 89119, 55817, 31535, 98544, 78660, 7927, 93924, 41335, 26864, 29793, 34174, 15584, 30381, 85185, 35013, 250, 82483, 74978, 83964, 96295, 10775, 98292, 48695, 44917, 95066, 1908, 96233, 70570, 9560, 42153, 60375, 86284, 65172, 37145, 21051, 63325, 74979, 17262, 13883, 52807, 23059, 88402, 27805, 83614, 87200, 70190, 52332, 22194, 49836, 36840, 29064, 63959, 35059, 11264, 61004, 70387, 86031, 73182, 77436, 91785, 67648, 10915, 23981, 44005, 64221, 22687, 94064, 41991, 31876, 25775, 33249, 98214, 12482, 55095, 21637, 40741, 31383, 759, 84801, 68105, 92106, 7024, 26881, 71030, 48439, 62267, 38877, 84281, 5738, 58377, 89772, 76894, 89961, 69286, 82469, 84513, 3018, 67008, 36396, 76507, 51841, 81766, 85630, 53879, 42815, 99311, 51546, 48012, 60831, 52508, 27065, 27577, 42939, 16113, 96776, 67546, 10447, 31687, 93932, 77388, 43153, 96022, 8787, 88714, 17917, 30268, 41856, 44837, 9006, 28849, 96145, 87843, 29916, 36664, 77214, 94692, 97259, 86867, 43341, 81464, 52261, 56905, 23021, 59805, 84018, 83053, 65916, 45199, 56492, 53938, 74814, 59401, 5156, 29893, 97947, 82065, 33985, 75961, 33023, 40625, 61624, 13978, 27662, 59861, 83332, 22339, 94946, 28388, 80985, 80349, 26428, 53620, 22048, 68023, 78689, 73629, 11567, 2979, 69934, 51252, 91974, 55594, 56305, 62051, 38760, 5504, 71039, 57308, 76172, 63560, 60098, 27137, 72829, 11560, 7057, 96129, 70223, 13514, 80370, 84784, 34038, 34309, 14519, 19473, 90246, 76551, 4847, 58584, 7150, 43761, 35987, 73823, 8390, 31787, 4785, 18275, 60366, 37305, 63714, 64554, 43465, 62576, 62745, 82385, 15938, 71469, 93181, 3706, 57343, 94835, 38020, 93903, 81756, 68920, 91558, 45431, 74124, 69474, 80988, 92785, 80908, 27334, 89140, 25253, 76668, 83738, 41616, 60831, 83315, 62276, 99419, 50917, 41933, 27361, 90629, 3746, 1117, 39516, 33310, 26188, 50228, 77520, 57628, 95347, 26691, 64275, 31243, 38198, 73594, 86060, 34600, 20941, 33339, 24600, 40855, 85373, 57420, 86440, 75081, 10087, 86605, 66517, 66361, 76736, 25073, 67573, 24965, 41375, 7543, 50309, 64373, 34870, 23016, 704, 23865, 62769, 83203, 31378, 5689, 24672, 24998, 82473, 306, 78511, 61329, 14447, 23303, 72405, 89815, 91128, 368, 58528, 20039, 2910, 89997, 57134, 56981, 30548, 608, 81205, 16520, 16977, 66378, 47846, 30291, 8861, 93704, 2573, 79010, 87588, 88649, 54273, 43793, 95956, 17821, 12748, 23217, 74675, 97329, 3743, 66747, 27121, 98911, 70654, 37607, 56835, 70228, 842, 38439, 42451, 56547, 57898, 34920, 2355, 57769, 43641, 96804, 99828, 2470, 50686, 52605, 81156, 39608, 8982, 70915, 15148, 34648, 1538, 70983, 80646, 22799, 37646, 64336, 65454, 44181, 6807, 1635, 58399, 92110, 42969, 86215, 42781, 47764, 69716, 49201, 21205, 74814, 49861, 33243, 97415, 20741, 63292, 84148, 46135, 91814, 93160, 45897, 88400, 20796, 76707, 51919, 17284, 33238, 81152, 32774, 14447, 82589, 72252, 94827, 2402, 9777, 50333, 11933, 73481, 57741, 35781, 4416, 7051, 32857, 79689, 71999, 56761, 18773, 45504, 57321, 30080, 56707, 97659, 31511, 8825, 4682, 80943, 86725, 1120, 66812, 57650, 9550, 2290, 96858, 63031, 99792, 32514, 29329, 47730, 53876, 859, 55070, 54276, 41463, 73961, 98416, 45814, 69416, 92954, 77444, 13393, 99842, 36402, 10109, 60893, 91658, 35250, 72320, 24612, 92298, 66939, 35785, 75057, 91899, 17057, 51001, 67069, 27995, 69089, 21498, 61019, 32963, 65689, 54619, 49338, 13065, 80551, 1023, 62937, 16176, 27036, 94709, 49291, 45364, 28213, 50781, 87808, 64657, 11483, 80714, 58816, 29196, 15582, 48185, 28983, 19061, 61046, 44309, 41358, 21592, 28921, 46702, 87236, 386, 26804, 68256, 83757, 68509, 83514, 73639, 3060, 94483, 16435, 47556, 44318, 87638, 64559, 69880, 81176, 61078, 69874, 80622, 35111, 81762, 60165, 33360, 26100, 87551, 49482, 72940, 13391, 2893, 79825, 37563, 57125, 62314, 54689, 81836, 62268, 87013, 42599, 3956, 52810, 52721, 32108, 74264, 17026, 68678, 1855, 2803, 488, 88233, 31973, 35209, 98836, 34275, 74847, 16899, 74506, 17748, 47880, 29099, 22456, 91603, 52534, 57735, 42600, 855, 8107, 63356, 27109, 26775, 79845, 96229, 31226, 57061, 63995, 3467, 71093, 33183, 72599, 90401, 57636, 15217, 38545, 82967, 36385, 13826, 22994, 29689, 96570, 47801, 23937, 84352, 22151, 87361, 51916, 12138, 58299, 24883, 66469, 63707, 40132, 56395, 81145, 80991, 65236, 91537, 74648, 52263, 20775, 86712, 84370, 73219, 16273, 38345, 75036, 90495, 4615, 1815, 89215, 65845, 59415, 143, 32332, 81835, 92846, 39516, 44623, 99619, 49258, 26493, 97595, 35043, 187, 86245, 97265, 19243, 85459, 18794, 34865, 16729, 91580, 89103, 67788, 63435, 39374, 32005, 53835, 38461, 73569, 31693, 74351, 19904, 53039, 38832, 65827, 6372, 16605, 24467, 56264, 74392, 31699, 2617, 1208, 3107, 62845, 40906, 18690, 13162, 25680, 52310, 13789, 75592, 17412, 37769, 54607, 43752, 88795, 83741, 72424, 94650, 84415, 30351, 26879, 7331, 38289, 2790, 20754, 79580, 99049, 2925, 83305, 44399, 55840, 28472, 20160, 97494, 46821, 224, 21579, 44697, 99932, 70237, 72514, 5899, 27982, 75348, 13062, 81896, 95696, 89922, 76653, 84286, 86311, 31666, 31125, 67363, 69742, 36257, 50449, 11239, 17015, 31301, 7086, 36700, 34155, 80767, 71267, 61879, 6464, 50853, 49071, 29737, 48025, 78845, 14102, 27335, 39118, 64483, 75259, 62728, 39000, 943, 6084, 10863, 89556, 1754, 84580, 50498, 34089, 20951, 80894, 95201, 48466, 56629, 35912, 68223, 84666, 21427, 17426, 57796, 33706, 28297, 14991, 68590, 39767, 57866, 31093, 1581, 55243, 2385, 71547, 16025, 10237, 30913, 72416, 96361, 23778, 4252, 90880, 2111, 5233, 23731, 15093, 52278, 28240, 67300, 79527, 21727, 72598, 25762, 32355, 5965, 69158, 15346, 2955, 80154, 45701, 77302, 32213, 95498, 51951, 21598, 87566, 88496, 44161, 58883, 61095, 27835, 86550, 32075, 37162, 39012, 76474, 92709, 4423, 86273, 49608, 82696, 97938, 3831, 46180, 45061, 21209, 35429, 3736, 40756, 86477, 49280, 4663, 12602, 27796, 40983, 45354, 98061, 27165, 36655, 94529, 54784, 23641, 96618, 85518, 71829, 8152, 23869, 15983, 33596, 19586, 89019, 12691, 7719, 28757, 77846, 78921, 87308, 1295, 54349, 39605, 43228, 44708, 71072, 40775, 69895, 28234, 37013, 15957, 71854, 66611, 61754, 715, 7785, 60355, 6010, 25038, 63717, 96451, 75716, 31204, 91524, 71233, 99392, 70088, 73910, 33168, 79890, 49157, 31738, 45412, 11275, 39655, 29674, 3576, 43573, 68165, 5646, 40987, 29831, 65443, 94749, 37586, 93684, 27912, 500, 93585, 59330, 81843, 86829, 73123, 825, 29578, 45716, 96151, 43565, 84079, 96162, 53933, 23042, 93648, 42645, 10709, 20522, 41216, 59604, 77148, 48551, 28117, 48296, 76279, 25403, 60198, 58546, 89498, 24621, 77336, 30345, 20683, 28040, 91018, 57880, 78093, 65995, 3662, 22419, 79209, 79132, 423, 12744, 17147, 97651, 78990, 62104, 99245, 10190, 90803, 6041, 93597, 4640, 33324, 45982, 82966, 14213, 72811, 60299, 2833, 5685, 88855, 95750, 99784, 83422, 39180, 57920, 86979, 6665, 40097, 77785, 79368, 97873, 99088, 79046, 11274, 63394, 10599, 42674, 52195, 32071, 71687, 73848, 50680, 10052, 53094, 80599, 15275, 15625, 96228, 19802, 36251, 29038, 55337, 27587, 65813, 45796, 25006, 3828, 1816, 80092, 2909, 92455, 47128, 90368, 61131, 71064, 43128, 61436, 38609, 63944, 69975, 94761, 92752, 57717, 5312, 17886, 80502, 17048, 67472, 62345, 6089, 28071, 32963, 79874, 24619, 75299, 3699, 61557, 88420, 89572, 3470, 9511, 59963, 12679, 74653, 80617, 49461, 49878, 6984, 94402, 21902, 54387, 65919, 83051, 3236, 4606, 80323, 12150, 42043, 50141, 29963, 98446, 87605, 52994, 42882, 65886, 35507, 64855, 57676, 37924, 72266, 67471, 19136, 75195, 60359, 79468, 49278, 14841, 5916, 11266, 18590, 63405, 62167, 42181, 97885, 25896, 46923, 54651, 37049, 35587, 72163, 61834, 29056, 93064, 34770, 26086, 53564, 70396, 88790, 69093, 77114, 36993, 80328, 74907, 37029, 3361, 1947, 62589, 78912, 39064, 66135, 30420, 18799, 36660, 64210, 75006, 9704, 98768, 17617, 77137, 38218, 9202, 781, 42069, 53611, 34154, 80286, 35344, 8915, 53741, 92066, 6921, 91287, 81061, 95443, 18302, 63654, 73437, 59266, 73193, 84126, 33552, 94557, 87797, 61208, 66467, 34985, 67097, 56898, 68630, 36107, 23473, 29682, 86671, 19976, 9270, 98610, 83226, 83533, 54115, 59298, 3119, 14118, 27598, 94609, 84104, 22908, 83370, 33626, 60641, 7536, 48971, 78097, 50150, 76363, 31230, 63891, 60956, 60142, 45654, 89818, 1930, 61715, 39293, 32003, 60446, 19507, 73170, 38849, 83787, 85952, 49896, 60642, 89794, 97062, 8404, 22646, 24180, 25843, 68335, 56954, 98775, 9761, 20440, 36326, 14319, 46321, 98117, 18763, 27793, 26924, 757, 52700, 50669, 45454, 20551, 44583, 60847, 91177, 11557, 82418, 98661, 15192, 28201, 39455, 40744, 10921, 84334, 43860, 60904, 78771, 50918, 87399, 24584, 26146, 68601, 82389, 33001, 29570, 97772, 71196, 92580, 85324, 38560, 59451, 2340, 85129, 48887, 44246, 95845, 99537, 40113, 43910, 13491, 47455, 11338, 26821, 4561, 17714, 57691, 81704, 95794, 89385, 42921, 52987, 40005, 16095, 76945, 91053, 44402, 7502, 72275, 77158, 87907, 47304, 70019, 32253, 18445, 87938, 84392, 40890, 54999, 12824, 45940, 70512, 10314, 99242, 17049, 33216, 76247, 51969, 75757, 30812, 79053, 87632, 91689, 28202, 59269, 67335, 58766, 42965, 14570, 82952, 93493, 99155, 79647, 40988, 20517, 40736, 7397, 66223, 21271, 2993, 65801, 43479, 46337, 67827, 40901, 12672, 1527, 28185, 32097, 9800, 84425, 18844, 32946, 84480, 41687, 82043, 5853, 39260, 39480, 36903, 45530, 28243, 19584, 95777, 37762, 57001, 24617, 23529, 67887, 19946, 51233, 12868, 11098, 82438, 19768, 93055, 90268, 81185, 22310, 57832, 37461, 24816, 92597, 91189, 61331, 30947, 10367, 96690, 67327, 51710, 79931, 2554, 10061, 16707, 71219, 5170, 36412, 41413, 77871, 18909, 47313, 45277, 36876, 60408, 39491, 50863, 64181, 5296, 1122, 97906, 44885, 67516, 95832, 45877, 92722, 75169, 3702, 85362, 68827, 16881, 64678, 94038, 36170, 8833, 16181, 42043, 28597, 37306, 11551, 29012, 68610, 59256, 80097, 89691, 5337, 59061, 72952, 31709, 6734, 64536, 22262, 35663, 32861, 13402, 20463, 2142, 82549, 78517, 8542, 61783, 87062, 45596, 75009, 25421, 21759, 97625, 5194, 95082, 2444, 52748, 62990, 73145, 92077, 55286, 48757, 92547, 33581, 94872, 12665, 85852, 57556, 17182, 74943, 86066, 39498, 88672, 7277, 74639, 71021, 37026, 38589, 28361, 7173, 60404, 36884, 74331, 24813, 34102, 44267, 1350, 96497, 64168, 28977, 19869, 39514, 24203, 48979, 37132, 61551, 28426, 86599, 28050, 4920, 73914, 41742, 55580, 57553, 64040, 74350, 86188, 94632, 25248, 71155, 27119, 46768, 19252, 26839, 66550, 89484, 55835, 99786, 31940, 98231, 53044, 82659, 24195, 61816, 20417, 35480, 86404, 98776, 4462, 38878, 16975, 84454, 43181, 51357, 71771, 87240, 48671, 17427, 1419, 32913, 56166, 59021, 42590, 42742, 35249, 76957, 59989, 37623, 85756, 27446, 80855, 41448, 34068, 90126, 94525, 73187, 7255, 11106, 2, 40897, 26602, 14944, 39485, 79783, 22125, 22225, 54003, 27141, 30297, 13270, 59546, 78368, 97244, 5412, 82941, 16668, 35080, 36582, 46007, 7919, 93275, 64276, 6479, 52897, 12721, 11169, 93334, 72932, 92970, 66298, 71473, 64188, 68930, 12904, 16132, 38881, 79668, 5503, 98020, 69401, 12396, 49329, 12262, 66342, 2587, 68029, 20019, 40521, 99973, 91944, 62153, 77949, 47779, 3314, 12963, 59722, 67246, 42259, 27422, 86357, 65087, 77645, 14314, 16146, 1019, 8674, 94024, 38067, 51916, 62126, 24818, 66492, 32967, 50103, 92272, 83988, 25930, 47231, 66446, 67020, 2161, 16694, 69118, 98110, 95519, 32222, 30463, 37268, 44460, 32894, 42468, 53354, 26188, 64379, 5187, 22138, 94727, 53109, 3828, 73264, 7328, 49084, 40877, 71939, 76730, 27207, 60268, 66646, 422, 39371, 39570, 13195, 494, 5903, 10239, 58297, 8521, 26957, 67531, 42207, 81591, 6677, 96136, 52222, 72419, 45567, 62985, 55519, 16564, 23528, 63049, 12277, 34368, 37972, 38691, 67463, 11614, 10868, 42568, 5178, 7128, 43340, 27425, 78131, 86992, 76641, 58074, 3419, 63780, 85534, 74342, 63073, 22581, 77566, 71560, 50792, 58759, 30306, 77158, 11720, 17319, 5289, 17020, 58898, 15254, 4154, 10754, 66924, 73666, 38536, 52660, 64117, 1341, 81076, 95416, 72449, 86976, 24827, 59148, 57826, 97369, 81445, 89695, 51235, 5417, 8297, 27577, 63138, 78075, 35803, 70728, 77858, 70264, 22852, 53008, 47248, 70228, 46906, 91478, 5422, 76389, 34956, 91096, 5061, 92805, 4538, 41921, 12390, 84478, 11682, 44929, 81531, 95290, 39345, 25456, 45252, 39340, 96991, 48931, 28836, 41617, 90381, 87203, 58910, 55153, 16890, 17393, 15994, 91147, 25898, 80374, 32350, 57974, 47570]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))))))))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> -)   (<data> (<average> sum(main) / 52))))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<point> main[index]))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> +)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<point> main[index]))))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<average> sum(main) / 52))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))))) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<average> sum(main) / 52))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})))) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> <)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<average> sum(main) / 52))))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<point> opposite[index]))))))))   (<eval> <)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<average> sum(opposite) / 52))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))))) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :})))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}))))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))))))) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))))) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))))))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<average> sum(opposite) / 52))))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<average> sum(opposite) / 52)))))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<average> sum(opposite) / 52)))) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})))) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}))))))))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.8943514644351465, 0.5057072190218586]