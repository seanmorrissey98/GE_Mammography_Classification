Generation:
0

Phenotype:
def p():
  x = 0.0
  index = 13
  if main[index] + main[index] + sum(opposite) / 52 - main[index] - sum(main) / 52 + sum(opposite[:-index]) > main[index] + opposite[index] - sum(opposite) / 52 + main[index]:
    x = (x - 0.3)
  index = 43
  if sum(opposite) / 52 + sum(opposite) / 52 + opposite[index] > sum(opposite[-index:]) + sum(opposite) / 52 + sum(main) / 52 - sum(main[-index:]) - sum(opposite[-index:]) + sum(opposite) / 52:
    x = (x - 0.6)
  index = 26
  if main[index] + sum(opposite) / 52 - sum(main[:-index]) > sum(main[-index:]) - sum(main[:-index]):
    x = (x + 0.2)
  index = 43
  if opposite[index] + sum(main[-index:]) + sum(main[:-index]) < sum(main[:-index]) - main[index] - sum(main) / 52 + sum(main) / 52 + sum(opposite) / 52:
    x = (x - 0.5)
  index = 49
  if sum(opposite) / 52 > sum(opposite[:-index]):
    x = (x - 0.0001)
  index = 30
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.0000001)
  index = 13
  if main[index] - main[index] + main[index] > main[index] + opposite[index] - sum(main[-index:]):
    x = (x + 0.2)
  index = 28
  if sum(opposite) / 52 > sum(opposite[:-index]):
    x = (x - 1.0)
  index = 23
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.000001)
  index = 36
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.00001)
  index = 3
  if sum(main) / 52 < sum(main) / 52:
    x = (x + 0.7)
  index = 48
  if main[index] < main[index]:
    x = (x - 0.5)
  index = 2
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.2)
  index = 28
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x + 0.8)
  index = 15
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.0000001)
  index = 31
  if opposite[index] > main[index]:
    x = (x - 0.01)
  index = 17
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x + 0.000001)
  index = 51
  if main[index] < opposite[index]:
    x = (x + 0.9)
  index = 22
  if main[index] > sum(main) / 52:
    x = (x - 0.3)
  index = 25
  if main[index] < 1:
    if main[index] < main[index] + 0.3:
      x = (x + 0.7)
  else:
    if opposite[index] < main[index] + 3:
      x = (x + 0.8)
    else:
      x = (x + 0.5)
  index = 40
  if main[index] < 1:
    if main[index] > opposite[index] + 0.01:
      x = (x - 0.0001)
  else:
    if main[index] < main[index] + 7:
      x = (x + 0.00001)
    else:
      x = (x + 0.0000001)
  index = 28
  if main[index] < 1:
    if main[index] > main[index] + 0.01:
      x = (x + 0.6)
  else:
    if opposite[index] > main[index] + 8:
      x = (x + 1.0)
    else:
      x = (x + 0.0000001)
  index = 34
  if opposite[index] > main[index]:
    x = (x - 0.2)
  index = 21
  if main[index] < 1:
    if main[index] < opposite[index] + 0.5:
      x = (x + 0.3)
  else:
    if main[index] > main[index] + 5:
      x = (x + 1.0)
    else:
      x = (x - 0.8)
  index = 33
  if sum(opposite) / 52 < sum(main[-index:]):
    x = (x - 0.1)
  index = 48
  if sum(opposite) / 52 > sum(main[:-index]):
    x = (x - 0.8)
  index = 16
  if opposite[index] > sum(main) / 52:
    x = (x - 0.6)
  index = 1
  if main[index] > main[index]:
    x = (x - 0.00001)
  index = 23
  if sum(opposite) / 52 < sum(main) / 52:
    x = (x + 0.2)
  index = 4
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.6:
      x = (x - 0.000001)
  else:
    if main[index] < main[index] + 3:
      x = (x + 0.7)
    else:
      x = (x - 0.6)
  index = 26
  if main[index] < sum(main) / 52:
    x = (x + 0.0001)
  index = 6
  if main[index] > sum(opposite) / 52:
    x = (x - 0.000001)
  index = 33
  if main[index] < 1:
    if main[index] < main[index] + 0.01:
      x = (x - 0.3)
  else:
    if main[index] < opposite[index] + 1:
      x = (x - 0.0000001)
    else:
      x = (x - 0.9)
  index = 48
  if sum(opposite[-index:]) > sum(main) / 52:
    x = (x + 0.000001)
  index = 39
  if main[index] < 1:
    if main[index] < opposite[index] + 0.3:
      x = (x + 1.0)
  else:
    if opposite[index] > opposite[index] + 2:
      x = (x + 0.9)
    else:
      x = (x - 1.0)
  index = 12
  if sum(main) / 52 < opposite[index]:
    x = (x - 0.0000001)
  index = 28
  if main[index] < 1:
    if opposite[index] < main[index] + 0.001:
      x = (x - 0.9)
  else:
    if opposite[index] > opposite[index] + 1:
      x = (x + 0.6)
    else:
      x = (x - 0.000001)
  index = 46
  if main[index] > sum(main[:-index]):
    x = (x - 0.001)
  index = 39
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 5000:
    x = (x - 0.8)
  index = 10
  if opposite[index] > sum(main) / 52:
    x = (x + 0.1)
  index = 15
  if sum(main[:-index]) > main[index]:
    x = (x + 1.0)
  index = 5
  if main[index] < 1:
    if opposite[index] < main[index] + 1.0:
      x = (x - 0.7)
  else:
    if main[index] > main[index] + 8:
      x = (x - 0.01)
    else:
      x = (x + 0.9)
  index = 28
  if opposite[index] > sum(opposite) / 52:
    x = (x - 0.2)
  index = 30
  if opposite[index] < main[index]:
    x = (x + 0.00001)
  index = 42
  if main[index] < sum(main) / 52:
    x = (x - 0.01)
  index = 10
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.2:
      x = (x + 0.9)
  else:
    if main[index] > opposite[index] + 7:
      x = (x - 0.0001)
    else:
      x = (x + 0.01)
  index = 8
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x - 0.2)
  index = 28
  if sum(main) / 52 > sum(main) / 52:
    x = (x - 0.00001)
  index = 36
  if main[index] < 1:
    if opposite[index] > opposite[index] + 1.0:
      x = (x - 0.7)
  else:
    if opposite[index] < main[index] + 3:
      x = (x + 0.4)
    else:
      x = (x + 0.5)
  index = 33
  if main[index] > main[index]:
    x = (x + 0.8)
  index = 25
  if opposite[index] < sum(main) / 52:
    x = (x - 0.001)
  index = 50
  if sum(main[:-index]) < opposite[index]:
    x = (x + 0.3)
  index = 36
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x - 0.1)
  index = 47
  if main[index] > opposite[index]:
    x = (x - 0.3)
  index = 50
  if main[index] - sum(main[:-index]) > sum(opposite) / 52 - opposite[index]:
    x = (x - 0.7)
  index = 13
  if sum(opposite) / 52 - opposite[index] + sum(opposite) / 52 - opposite[index] + opposite[index] - sum(opposite) / 52 > opposite[index] + sum(main[-index:]) + sum(opposite[:-index]) + sum(main[:-index]):
    x = (x + 0.00001)
  index = 49
  if opposite[index] + sum(main) / 52 > opposite[index] - opposite[index]:
    x = (x - 0.4)
  index = 12
  if sum(opposite) / 52 < sum(opposite) / 52:
    x = (x - 1.0)
  index = 42
  if opposite[index] > sum(main[-index:]) - sum(opposite) / 52:
    x = (x - 0.5)
  index = 49
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 50:
    x = (x + 0.6)
  index = 21
  if opposite[index] - sum(opposite[-index:]) < sum(main) / 52:
    x = (x - 0.0001)
  index = 16
  if main[index] < 1:
    if main[index] > main[index] + 0.1:
      x = (x + 0.00001)
  else:
    if main[index] < main[index] + 8:
      x = (x + 0.8)
    else:
      x = (x - 0.4)
  index = 46
  if main[index] < 1:
    if opposite[index] < main[index] + 0.001:
      x = (x - 0.4)
  else:
    if opposite[index] < opposite[index] + 3:
      x = (x - 0.3)
    else:
      x = (x - 0.7)
  index = 46
  if main[index] < sum(main) / 52:
    x = (x - 0.5)
  index = 12
  if opposite[index] < opposite[index]:
    x = (x - 0.0001)
  index = 22
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x - 0.6)
  index = 29
  if sum(main) / 52 > opposite[index]:
    x = (x - 1.0)
  index = 10
  if opposite[index] > main[index]:
    x = (x + 0.1)
  index = 38
  if sum(main) / 52 < main[index]:
    x = (x - 0.000001)
  index = 40
  if sum(opposite[:-index]) < sum(main) / 52 + main[index] + main[index]:
    x = (x - 0.000001)
  index = 15
  if main[index] < 1:
    if main[index] > opposite[index] + 0.5:
      x = (x - 0.2)
  else:
    if opposite[index] > opposite[index] + 3:
      x = (x + 0.8)
    else:
      x = (x + 0.0001)
  index = 9
  if main[index] < 1:
    if main[index] > main[index] + 0.4:
      x = (x - 0.00001)
  else:
    if opposite[index] > opposite[index] + 2:
      x = (x - 0.001)
    else:
      x = (x - 0.000001)
  index = 17
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.7)
  index = 40
  if sum(main) / 52 > sum(main) / 52 - main[index]:
    x = (x + 0.7)
  index = 37
  if sum(main) / 52 > sum(main) / 52:
    x = (x + 0.000001)
  index = 23
  if opposite[index] < sum(opposite) / 52:
    x = (x - 0.2)
  index = 9
  if opposite[index] < opposite[index]:
    x = (x - 0.00001)
  index = 51
  if main[index] > sum(main) / 52:
    x = (x - 0.7)
  index = 12
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.000001)
  index = 34
  if main[index] > opposite[index]:
    x = (x - 0.000001)
  index = 38
  if main[index] < sum(main) / 52:
    x = (x + 0.00001)
  index = 49
  if sum(opposite) / 52 > main[index]:
    x = (x - 0.7)
  index = 42
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.0000001)
  index = 17
  if sum(opposite) / 52 > sum(opposite) / 52:
    x = (x - 0.00001)
  index = 30
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.000001:
      x = (x + 0.2)
  else:
    if main[index] < opposite[index] + 5:
      x = (x - 0.1)
    else:
      x = (x + 0.01)
  index = 4
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.8)
  index = 9
  if opposite[index] < sum(main) / 52:
    x = (x - 0.000001)
  index = 21
  if sum(opposite) / 52 < sum(main) / 52:
    x = (x - 0.1)
  index = 49
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 500:
    x = (x + 0.9)
  index = 8
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 100:
    x = (x - 0.2)
  index = 34
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x - 0.2)
  index = 46
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.0001)
  index = 31
  if main[index] < 1:
    if opposite[index] < main[index] + 0.2:
      x = (x - 0.9)
  else:
    if main[index] < opposite[index] + 3:
      x = (x - 0.0000001)
    else:
      x = (x - 0.001)
  index = 10
  if sum(opposite[-index:]) < sum(opposite[:-index]):
    x = (x + 0.4)
  index = 51
  if sum(opposite) / 52 < main[index]:
    x = (x - 0.0001)
  index = 18
  if sum(main) / 52 > sum(main) / 52:
    x = (x + 0.1)
  index = 4
  if main[index] < main[index]:
    x = (x - 0.01)
  index = 37
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.9)
  index = 10
  if main[index] > main[index]:
    x = (x - 0.000001)
  index = 15
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x + 0.01)
  index = 27
  if main[index] > main[index]:
    x = (x - 0.0000001)
  index = 11
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 500:
    x = (x - 1.0)
  index = 15
  if sum(main) / 52 > opposite[index]:
    x = (x - 0.5)
  index = 10
  if opposite[index] < main[index]:
    x = (x + 0.7)
  index = 3
  if main[index] - sum(main) / 52 < sum(main[:-index]):
    x = (x - 0.4)
  index = 11
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x - 0.0001)
  index = 20
  if main[index] < 1:
    if main[index] > opposite[index] + 0.9:
      x = (x + 0.000001)
  else:
    if opposite[index] < main[index] + 7:
      x = (x + 0.3)
    else:
      x = (x + 0.6)
  index = 5
  if sum(opposite[-index:]) < sum(main) / 52:
    x = (x - 0.4)
  index = 37
  if main[index] < 1:
    if main[index] < main[index] + 0.4:
      x = (x + 0.8)
  else:
    if main[index] > opposite[index] + 6:
      x = (x - 0.9)
    else:
      x = (x + 0.9)
  index = 25
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x - 0.6)
  index = 44
  if sum(main[:-index]) > opposite[index] + opposite[index]:
    x = (x - 0.4)
  index = 34
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.6)
  index = 33
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.0000001)
  index = 22
  if opposite[index] < opposite[index]:
    x = (x - 0.4)
  index = 22
  if opposite[index] < sum(main) / 52:
    x = (x + 1.0)
  index = 38
  if main[index] < 1:
    if main[index] > main[index] + 0.8:
      x = (x - 0.1)
  else:
    if main[index] > main[index] + 3:
      x = (x - 0.000001)
    else:
      x = (x - 0.001)
  index = 0
  if opposite[index] < sum(main) / 52:
    x = (x + 0.8)
  index = 37
  if opposite[index] < opposite[index]:
    x = (x + 0.9)
  index = 17
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x - 0.0000001)
  index = 12
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 50:
    x = (x + 0.2)
  index = 38
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x - 0.4)
  index = 33
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.001:
      x = (x - 0.01)
  else:
    if opposite[index] < opposite[index] + 5:
      x = (x - 0.8)
    else:
      x = (x + 1.0)
  index = 33
  if opposite[index] > sum(main) / 52:
    x = (x + 0.5)
  index = 27
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 50:
    x = (x - 0.8)
  index = 48
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 50:
    x = (x + 0.8)
  index = 13
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 1000:
    x = (x - 0.2)
  index = 1
  if sum(main[:-index]) < sum(opposite[-index:]):
    x = (x - 0.01)
  index = 22
  if sum(main) / 52 > sum(main) / 52:
    x = (x - 0.5)
  index = 27
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 500:
    x = (x - 0.0001)
  index = 48
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x - 1.0)
  index = 7
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.0001:
      x = (x + 0.5)
  else:
    if opposite[index] > opposite[index] + 2:
      x = (x + 0.8)
    else:
      x = (x - 0.001)
  index = 37
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.00001)
  index = 11
  if opposite[index] < sum(main) / 52:
    x = (x - 0.00001)
  index = 48
  if opposite[index] < sum(opposite) / 52:
    x = (x - 0.00001)
  index = 23
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.3)
  index = 39
  if sum(main) / 52 > sum(main) / 52 - sum(main[:-index]):
    x = (x + 0.0000001)
  index = 48
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.8:
      x = (x - 0.2)
  else:
    if main[index] < opposite[index] + 2:
      x = (x - 0.000001)
    else:
      x = (x - 0.000001)
  index = 37
  if sum(main[:-index]) < sum(main) / 52:
    x = (x + 0.00001)
  index = 34
  if main[index] > sum(main) / 52:
    x = (x - 1.0)
  index = 32
  if main[index] < main[index]:
    x = (x - 0.001)
  index = 30
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.00001)
  index = 28
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 1.0)
  index = 34
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.0000001)
  index = 6
  if opposite[index] > sum(opposite) / 52:
    x = (x + 0.0000001)
  index = 2
  if sum(opposite) / 52 < sum(main) / 52:
    x = (x + 0.00001)
  index = 20
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x - 0.0001)
  index = 50
  if sum(opposite[-index:]) < sum(opposite) / 52:
    x = (x - 0.9)
  index = 2
  if sum(opposite) / 52 < opposite[index]:
    x = (x - 0.001)
  index = 44
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.7)
  index = 19
  if main[index] < sum(opposite) / 52:
    x = (x - 0.001)
  index = 35
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.0000001)
  index = 33
  if sum(main) / 52 < main[index]:
    x = (x - 0.01)
  index = 2
  if sum(opposite) / 52 > opposite[index]:
    x = (x + 0.5)
  index = 26
  if main[index] < 1:
    if main[index] > opposite[index] + 0.7:
      x = (x - 0.7)
  else:
    if opposite[index] > opposite[index] + 0:
      x = (x + 0.3)
    else:
      x = (x - 0.0000001)
  index = 12
  if opposite[index] < main[index]:
    x = (x + 0.1)
  index = 23
  if sum(main) / 52 < opposite[index]:
    x = (x + 0.5)
  index = 15
  if opposite[index] - sum(main[:-index]) + sum(opposite[:-index]) + sum(main) / 52 > sum(main[:-index]) + sum(main) / 52 + sum(main) / 52 - main[index] + opposite[index]:
    x = (x - 0.7)
  index = 49
  if sum(main[:-index]) + sum(main) / 52 > sum(opposite[:-index]):
    x = (x - 0.0001)
  index = 38
  if main[index] + opposite[index] < main[index] - sum(opposite) / 52 + sum(main) / 52 + sum(main) / 52 + sum(main) / 52:
    x = (x - 0.00001)
  index = 2
  if opposite[index] + sum(main) / 52 > sum(opposite) / 52 + sum(main[:-index]):
    x = (x + 0.0001)
  index = 28
  if opposite[index] - sum(main) / 52 + sum(main) / 52 + main[index] < opposite[index] - opposite[index]:
    x = (x - 0.1)
  index = 23
  if sum(opposite[:-index]) < sum(opposite) / 52:
    x = (x + 0.000001)
  index = 46
  if main[index] < 1:
    if opposite[index] > main[index] + 0.000001:
      x = (x + 0.7)
  else:
    if main[index] > main[index] + 4:
      x = (x + 0.000001)
    else:
      x = (x - 0.000001)
  index = 27
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.9)
  index = 31
  if main[index] < 1:
    if main[index] > opposite[index] + 0.001:
      x = (x + 0.1)
  else:
    if main[index] < opposite[index] + 0:
      x = (x - 0.4)
    else:
      x = (x + 0.5)
  index = 33
  if main[index] < 1:
    if main[index] < opposite[index] + 0.000001:
      x = (x - 0.5)
  else:
    if opposite[index] > main[index] + 1:
      x = (x - 0.0001)
    else:
      x = (x + 0.001)
  index = 21
  if opposite[index] < sum(opposite[-index:]):
    x = (x - 0.0000001)
  index = 12
  if sum(opposite[:-index]) > opposite[index]:
    x = (x - 0.01)
  index = 34
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.00001)
  index = 22
  if sum(opposite[-index:]) > opposite[index]:
    x = (x - 0.0001)
  index = 30
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x + 0.5)
  index = 4
  if opposite[index] < sum(opposite) / 52:
    x = (x + 0.6)
  index = 31
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.3)
  index = 2
  if main[index] < opposite[index]:
    x = (x - 0.0000001)
  index = 16
  if sum(main) / 52 > sum(main[:-index]):
    x = (x + 0.2)
  index = 30
  if main[index] < 1:
    if main[index] < main[index] + 0.9:
      x = (x + 0.000001)
  else:
    if opposite[index] < main[index] + 9:
      x = (x - 0.000001)
    else:
      x = (x + 0.5)
  index = 9
  if sum(opposite) / 52 < main[index]:
    x = (x - 0.3)
  index = 14
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x + 0.0001)
  index = 2
  if sum(main) / 52 < opposite[index]:
    x = (x - 0.3)
  index = 47
  if main[index] < sum(main) / 52:
    x = (x + 0.0000001)
  index = 36
  if main[index] < 1:
    if main[index] > main[index] + 0.7:
      x = (x - 0.2)
  else:
    if main[index] > opposite[index] + 9:
      x = (x + 0.9)
    else:
      x = (x - 0.7)
  index = 34
  if sum(main[:-index]) < sum(opposite) / 52:
    x = (x - 0.01)
  index = 6
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 1.0)
  index = 43
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x + 0.2)
  index = 17
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x - 0.8)
  index = 35
  if main[index] > opposite[index]:
    x = (x + 0.0000001)
  index = 49
  if sum(opposite) / 52 > main[index]:
    x = (x - 0.000001)
  index = 13
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.4)
  index = 11
  if main[index] < 1:
    if main[index] < opposite[index] + 0.5:
      x = (x - 0.00001)
  else:
    if opposite[index] < main[index] + 9:
      x = (x + 0.0001)
    else:
      x = (x - 0.5)
  index = 11
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.6)
  index = 17
  if main[index] < 1:
    if main[index] < main[index] + 0.1:
      x = (x + 0.5)
  else:
    if opposite[index] < main[index] + 3:
      x = (x + 0.6)
    else:
      x = (x + 0.8)
  index = 35
  if main[index] > main[index]:
    x = (x - 0.000001)
  index = 29
  if sum(opposite[-index:]) > main[index]:
    x = (x - 0.1)
  index = 0
  if sum(opposite) / 52 < opposite[index]:
    x = (x - 0.6)
  index = 40
  if main[index] < 1:
    if opposite[index] > main[index] + 0.0001:
      x = (x - 0.0001)
  else:
    if opposite[index] < opposite[index] + 7:
      x = (x + 0.01)
    else:
      x = (x - 0.00001)
  index = 46
  if sum(main[:-index]) > sum(opposite[:-index]):
    x = (x + 0.001)
  index = 35
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 1000:
    x = (x + 0.01)
  index = 48
  if main[index] < 1:
    if opposite[index] < main[index] + 0.4:
      x = (x - 0.0000001)
  else:
    if main[index] < main[index] + 1:
      x = (x - 0.00001)
    else:
      x = (x - 0.6)
  index = 32
  if main[index] > sum(opposite) / 52:
    x = (x - 0.6)
  index = 46
  if sum(main) / 52 > main[index]:
    x = (x - 0.0001)
  index = 42
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 100:
    x = (x + 0.00001)
  index = 6
  if opposite[index] > main[index]:
    x = (x - 0.8)
  index = 14
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.5)
  index = 51
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.4:
      x = (x - 0.00001)
  else:
    if main[index] > opposite[index] + 2:
      x = (x - 0.9)
    else:
      x = (x + 0.7)
  index = 16
  if opposite[index] < main[index]:
    x = (x + 0.4)
  index = 43
  if sum(opposite) / 52 > sum(main) / 52:
    x = (x - 0.5)
  index = 10
  if sum(main) / 52 < sum(main) / 52:
    x = (x - 0.7)
  index = 9
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.1)
  index = 37
  if main[index] > sum(opposite) / 52:
    x = (x - 0.4)
  index = 20
  if main[index] < sum(opposite) / 52:
    x = (x + 0.01)
  index = 50
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x - 0.1)
  index = 25
  if main[index] < 1:
    if main[index] < opposite[index] + 0.5:
      x = (x + 0.001)
  else:
    if opposite[index] < opposite[index] + 7:
      x = (x + 0.7)
    else:
      x = (x + 1.0)
  index = 0
  if main[index] < 1:
    if main[index] > opposite[index] + 0.00001:
      x = (x - 0.0000001)
  else:
    if main[index] < opposite[index] + 0:
      x = (x - 0.8)
    else:
      x = (x - 0.6)
  index = 16
  if sum(main[-index:]) < sum(main[-index:]):
    x = (x - 1.0)
  index = 35
  if main[index] > sum(main) / 52:
    x = (x + 0.01)
  index = 23
  if opposite[index] > sum(opposite) / 52:
    x = (x - 0.01)
  index = 12
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x - 0.7)
  index = 26
  if main[index] > sum(opposite) / 52 - sum(opposite) / 52:
    x = (x + 0.8)
  return x
XXX_output_XXX = p()

Genotype:
[78387, 38291, 97223, 14950, 86842, 73670, 36816, 74061, 30076, 59143, 31256, 33514, 27641, 12124, 44182, 88561, 15150, 75577, 92678, 87486, 80665, 29185, 82463, 38946, 75018, 84625, 84638, 11194, 42030, 61427, 96870, 66973, 29985, 12401, 93310, 2532, 51286, 21092, 90208, 11570, 69536, 49610, 30825, 66707, 12566, 77400, 58026, 20690, 17532, 3845, 7878, 65905, 74899, 1001, 92954, 89392, 21614, 64830, 92140, 69748, 24151, 43690, 60334, 12634, 26727, 55017, 97564, 38801, 31264, 49651, 87145, 83602, 89791, 33002, 38482, 67938, 81186, 26854, 10236, 11628, 93346, 23632, 47563, 5737, 28513, 85744, 15030, 86863, 99133, 34942, 22402, 9479, 53736, 11473, 59028, 26656, 24742, 29714, 74044, 1458, 38859, 98726, 28663, 14449, 2623, 32154, 27443, 7970, 7869, 69058, 32886, 31382, 69750, 44379, 51119, 39856, 41919, 9458, 13208, 64191, 33544, 62446, 99134, 57372, 55832, 58712, 95057, 83211, 25638, 21721, 9128, 28261, 67256, 12834, 70618, 75389, 12146, 956, 6670, 40783, 16899, 68117, 32146, 11095, 30121, 78055, 84751, 20495, 13480, 66454, 46453, 96933, 28501, 9654, 47628, 82150, 61126, 27858, 8367, 91286, 72737, 68356, 5815, 12090, 44432, 7707, 25371, 26224, 81843, 13376, 31113, 38404, 26696, 2900, 87250, 60645, 11659, 17972, 91618, 80891, 20835, 17251, 55362, 81417, 54930, 12179, 38428, 44365, 40714, 22315, 63593, 19323, 48660, 59846, 54497, 47962, 45876, 20485, 66504, 86377, 19790, 73749, 3402, 62366, 23426, 78898, 25731, 60289, 54970, 42449, 82049, 44596, 67260, 742, 27961, 63283, 42034, 38973, 75017, 75794, 27587, 94378, 68264, 50566, 79513, 80242, 58957, 95856, 93178, 67973, 152, 84339, 77189, 60031, 14660, 2230, 49745, 43616, 27271, 95980, 172, 18681, 99682, 3837, 91294, 72666, 43775, 143, 6858, 42862, 77350, 89628, 70270, 97442, 55938, 73783, 41168, 25295, 79594, 85553, 91834, 86212, 34126, 9019, 12807, 38333, 24541, 90870, 6824, 31599, 90802, 76006, 20872, 74952, 98345, 66538, 9208, 53407, 76660, 47556, 16880, 38290, 58499, 586, 97839, 24374, 71325, 16284, 21525, 17639, 23542, 32263, 81238, 90643, 12994, 620, 797, 68273, 62933, 68263, 18042, 74512, 47369, 45501, 56606, 23601, 38261, 94549, 97705, 59771, 1501, 44080, 96826, 4931, 89815, 17979, 76019, 70267, 59043, 81454, 85332, 11906, 74397, 10103, 76972, 81880, 9116, 14295, 45076, 502, 3554, 23082, 60576, 8709, 58428, 71870, 53090, 31736, 75069, 38296, 99769, 20806, 86261, 85484, 17816, 86733, 49027, 13121, 14905, 55256, 76958, 31228, 19640, 19138, 70334, 17910, 57792, 25587, 74401, 31658, 50231, 70399, 21391, 21967, 90505, 5130, 10171, 36644, 41251, 4777, 39871, 36335, 37339, 6185, 93262, 22755, 14582, 44787, 24508, 51662, 25715, 96925, 39629, 21159, 35934, 85667, 76603, 40688, 66323, 83940, 78430, 14903, 12523, 6394, 73892, 71337, 67284, 5019, 45555, 81374, 73656, 35980, 96618, 72256, 65151, 28334, 13931, 452, 37044, 87433, 24434, 4118, 94910, 63658, 27231, 72032, 15747, 31246, 15603, 72180, 28893, 34848, 28317, 30522, 38275, 70286, 27537, 64304, 83728, 93311, 38092, 93504, 21795, 27487, 8208, 85390, 35549, 57217, 71785, 46866, 55447, 55580, 5758, 51099, 70283, 11020, 19691, 95144, 19906, 6380, 49072, 82151, 94413, 85370, 24344, 99411, 69886, 28867, 96391, 93565, 62477, 32957, 53182, 76852, 93973, 94303, 71034, 43168, 19955, 935, 23854, 6226, 61452, 6939, 13187, 98818, 40861, 25892, 92055, 94665, 82538, 73955, 5421, 32753, 9745, 79287, 6934, 86008, 82741, 21179, 39681, 39317, 77075, 65763, 27521, 17842, 35924, 42676, 63420, 81672, 42696, 81278, 51043, 87920, 27402, 62818, 85078, 50077, 57869, 36878, 61399, 41165, 9885, 35008, 64576, 72102, 28476, 73412, 73555, 58385, 51908, 93719, 80998, 38353, 1731, 79825, 90332, 40913, 87358, 37352, 53348, 67663, 42881, 33993, 62099, 74621, 75208, 17820, 93617, 59946, 92211, 66938, 13340, 26755, 42967, 31235, 4512, 23958, 22198, 74431, 87138, 94349, 64514, 17938, 29598, 14796, 18628, 8319, 66869, 35821, 24577, 29427, 54256, 24197, 35098, 26590, 22037, 7679, 3804, 14007, 94614, 87596, 94134, 59691, 54262, 11198, 21650, 14267, 75149, 97798, 33778, 29920, 57669, 40337, 17025, 77867, 95705, 61622, 56592, 90811, 95597, 99487, 33235, 37302, 61159, 99832, 17103, 51477, 90334, 58340, 98711, 22171, 53925, 33517, 69082, 23608, 89048, 32479, 9802, 205, 568, 30774, 97952, 66456, 83644, 10576, 68001, 16570, 15708, 49102, 54256, 67144, 77018, 16690, 67264, 34622, 15263, 71612, 43368, 78700, 17755, 30567, 26887, 57278, 52370, 32050, 21299, 93094, 28829, 3084, 54733, 12778, 60261, 74430, 49507, 49732, 44905, 95236, 97547, 30973, 88131, 21144, 38706, 93745, 45171, 40154, 13122, 5887, 58736, 74668, 3309, 54891, 41095, 96803, 66159, 27946, 65367, 75954, 66734, 64288, 78393, 43483, 66166, 14893, 76497, 64051, 89487, 63810, 35415, 73706, 20952, 28295, 22859, 22037, 87085, 17516, 69621, 42572, 31919, 98441, 48321, 69061, 61223, 31745, 94079, 79481, 85556, 49551, 26793, 52197, 76679, 37402, 27152, 93800, 90750, 24684, 33762, 83788, 87757, 40142, 18424, 31182, 21400, 20170, 67601, 21201, 64419, 73409, 68963, 70931, 71767, 30824, 6965, 12784, 49358, 72709, 22700, 43631, 40015, 75273, 30836, 57658, 99872, 17609, 25734, 30454, 41502, 49426, 68988, 71780, 96345, 55589, 54266, 35021, 30012, 75873, 24531, 79880, 34318, 29535, 20722, 64665, 59391, 6823, 27, 72440, 90147, 76916, 39607, 30349, 54724, 4151, 14767, 5341, 85598, 16872, 28225, 16668, 56982, 21765, 89509, 99959, 74570, 3061, 61897, 46168, 9798, 53184, 22623, 15662, 66418, 84732, 45554, 3411, 35564, 55198, 22528, 81309, 41136, 86795, 73290, 82409, 74445, 52960, 16676, 80149, 38130, 23157, 37821, 94333, 52599, 16067, 21043, 96412, 78070, 38472, 20657, 50023, 62132, 42720, 25443, 33993, 84554, 66765, 80009, 52729, 48755, 63112, 90409, 435, 40954, 13026, 95446, 12906, 96730, 3224, 1484, 54616, 55230, 23625, 42403, 12162, 16954, 30035, 96911, 21744, 29809, 80196, 72337, 82053, 88633, 1651, 74056, 8783, 88997, 74492, 95197, 52058, 85702, 36110, 54352, 72444, 79270, 27331, 32088, 4667, 30723, 87778, 2483, 36720, 9566, 82703, 72589, 46281, 76923, 91007, 13131, 17188, 13762, 9549, 95814, 6103, 58003, 53051, 48178, 53610, 34909, 17779, 90272, 77457, 75114, 72403, 126, 44112, 51018, 48236, 35615, 82741, 95223, 88949, 12908, 37325, 86678, 39070, 62031, 78004, 21716, 55647, 9459, 9075, 56812, 78838, 19701, 71783, 44522, 94831, 30944, 78795, 39929, 13497, 12515, 96682, 62408, 78496, 32061, 56615, 7230, 37393, 48545, 42087, 79078, 83847, 82681, 29247, 98360, 48389, 42399, 16440, 94396, 92304, 99789, 93266, 41709, 64589, 42432, 77333, 32949, 34348, 53267, 44181, 11620, 70327, 76944, 66546, 92733, 69849, 85823, 29476, 64237, 71897, 20860, 65308, 60668, 36868, 43016, 14167, 76223, 54882, 3105, 7529, 36939, 90789, 22773, 15542, 45483, 19845, 41193, 29304, 4295, 27782, 3371, 81272, 34879, 75245, 85270, 19159, 87195, 66533, 50835, 52794, 58863, 94585, 29553, 13748, 22725, 81955, 60692, 99392, 85752, 91584, 66924, 42153, 67057, 24397, 94260, 61159, 27335, 62497, 76757, 44077, 56964, 18970, 66797, 54446, 61498, 13280, 43359, 60166, 24065, 3655, 85177, 15425, 12477, 9150, 85137, 49068, 99179, 87149, 75687, 66883, 62704, 42244, 62078, 3354, 16957, 70873, 6280, 90593, 80940, 38507, 39731, 70861, 62085, 20317, 88793, 43844, 4421, 34375, 35030, 19926, 35191, 31192, 1348, 11224, 39242, 91886, 72361, 4436, 90186, 78777, 73317, 42776, 93113, 92361, 68218, 51563, 57634, 20141, 7158, 37421, 43446, 62587, 90461, 77953, 86736, 5572, 48822, 39695, 2961, 84363, 57659, 71951, 12422, 88761, 51543, 3247, 81026, 95890, 20513, 42162, 8278, 40812, 94123, 23153, 54754, 47173, 27475, 88743, 18017, 80236, 14370, 19940, 84530, 19386, 33876, 96845, 39667, 16431, 93551, 28955, 50909, 80760, 47841, 36768, 74632, 66406, 40263, 82121, 25527, 29261, 99354, 16205, 22293, 20311, 26471, 53000, 38566, 59259, 49759, 83856, 55502, 17143, 84792, 44064, 23687, 62104, 14953, 39895, 19508, 31226, 43991, 2023, 73640, 720, 30582, 59785, 8733, 50578, 75636, 29203, 84671, 42777, 95299, 86380, 83686, 50671, 29227, 23599, 99689, 47420, 28851, 15831, 33380, 53753, 55136, 97866, 90049, 17084, 46326, 42843, 43911, 84781, 73249, 20731, 63364, 43860, 36388, 70336, 74987, 72264, 21051, 14936, 82759, 72553, 99135, 73361, 10737, 83677, 83144, 84800, 72199, 48596, 18128, 34852, 59278, 97779, 71414, 21436, 10037, 63486, 39448, 6930, 23288, 27976, 17864, 23104, 19560, 45232, 33709, 99132, 81157, 92412, 46315, 36493, 64651, 12655, 50193, 65200, 32921, 12216, 2039, 85872, 63752, 14854, 36705, 93895, 51309, 60479, 7745, 10765, 83593, 59352, 22664, 34435, 9671, 33561, 7770, 64432, 52174, 27907, 20068, 38652, 4386, 2153, 99926, 22605, 61412, 80097, 83330, 41401, 74967, 93413, 24690, 27239, 7927, 62283, 23668, 18668, 47820, 39650, 37660, 66633, 61241, 5846, 40766, 62200, 66213, 16234, 97179, 49111, 32409, 93305, 24354, 85583, 90638, 83995, 45108, 85372, 4801, 81089, 79489, 23887, 9107, 97201, 36177, 98281, 28809, 725, 98015, 67142, 7855, 73916, 26293, 24999, 97691, 33384, 54327, 44268, 65770, 81326, 97580, 11827, 90827, 5567, 17479, 84161, 19268, 65126, 84968, 25493, 543, 39495, 16163, 37704, 29864, 30722, 69170, 196, 47923, 2233, 41596, 26908, 72419, 25528, 38094, 85137, 87557, 22267, 1960, 78268, 20080, 50148, 18323, 44788, 88083, 65247, 81778, 87585, 45320, 52586, 89622, 90694, 84368, 78392, 60329, 21283, 53013, 92564, 28496, 61331, 97290, 7638, 14212, 80528, 91056, 74136, 51134, 86483, 38393, 88986, 25879, 32388, 14903, 96907, 58393, 44598, 7768, 42033, 39018, 23798, 74748, 49841, 38065, 36160, 73290, 19045, 250, 88286, 33637, 43307, 15901, 23950, 21556, 36535, 21818, 78209, 57540, 91434, 74267, 55551, 28588, 87098, 38594, 31306, 51788, 36638, 395, 81404, 31136, 71114, 39007, 29478, 10668, 64845, 22889, 29709, 97452, 31560, 48626, 18821, 83332, 61721, 66458, 74802, 66923, 365, 77057, 95421, 49957, 36118, 82789, 56296, 51488, 13257, 55187, 68927, 58127, 9823, 99577, 62146, 19398, 44237, 45389, 2425, 86917, 99222, 94311, 77949, 80605, 60094, 85050, 20426, 4624, 7156, 70955, 56188, 44169, 53121, 6439, 63534, 21966, 97337, 60993, 58139, 10606, 25077, 24787, 76098, 70200, 60137, 64833, 9533, 5269, 37367, 94479, 76375, 24317, 56818, 31706, 90257, 4071, 70699, 86123, 24824, 67598, 55387, 46583, 38702, 44796, 55778, 52874, 76238, 34138, 23632, 14608, 9628, 10204, 20208, 83533, 78331, 24065, 70399, 97435, 82597, 88526, 76483, 88406, 70253, 49445, 78971, 81215, 47786, 10233, 59725, 46247, 63065, 84522, 29316, 72703, 75124, 14159, 50519, 65799, 28779, 39444, 87426, 92840, 74032, 99459, 44606, 1257, 32597, 45768, 91931, 34009, 8144, 38206, 95067, 53004, 93461, 27088, 7101, 59463, 73687, 70394, 9179, 59763, 96118, 52, 14698, 84841, 63989, 5125, 71611, 96393, 21233, 44654, 18468, 64466, 39593, 28622, 17497, 11232, 84783, 47290, 64319, 6130, 89282, 47921, 1544, 98777, 19999, 48122, 50177, 26331, 19669, 67012, 10141, 42540, 86551, 86574, 72687, 92414, 56579, 95949, 31906, 61475, 48731, 95329, 22373, 43969, 98154, 10523, 70132, 73327, 82744, 83902, 52672, 70350, 86600, 57723, 59350, 61731, 34321, 11960, 79437, 49319, 96787, 88144, 20423, 44892, 78113, 69271, 30520, 20127, 47644, 33729, 97291, 17686, 96229, 57856, 97113, 28828, 82472, 69320, 40572, 67331, 90364, 9011, 53855, 36133, 57376, 4402, 26992, 50219, 48866, 19611, 67081, 60808, 22148, 36445, 8099, 68872, 5504, 80302, 70657, 4802, 11464, 43212, 5682, 87195, 91315, 85874, 20059, 56198, 24370, 5528, 15686, 41713, 58137, 2559, 55051, 58183, 13121, 65717, 41605, 89398, 7811, 70003, 53248, 52843, 29042, 12572, 1708, 77691, 97056, 81576, 51821, 50829, 82281, 25146, 37159, 42040, 18400, 55839, 51431, 15099, 93077, 76438, 20890, 73224, 97520, 59370, 99271, 56359, 55787, 34632, 22477, 27793, 63896, 91263, 77195, 64229, 82533, 39639, 98558, 98879, 20023, 31137, 54917, 73761, 39907, 96143, 67862, 13401, 8749, 93025, 70293, 13473, 18300, 49275, 65503, 36833, 99855, 27573, 3524, 99267, 40417, 43892, 6341, 67213, 57144, 13366, 27345, 3207, 34051, 55135, 15849, 23143, 90462, 62338, 5630, 4224, 11335, 746, 90547, 21148, 57789, 47804, 17445, 96724, 5219, 6439, 65755, 53971, 26954, 8925, 89627, 9195, 32716, 57553, 11826, 27002, 11683, 23989, 15001, 98195, 85159, 15349, 39719, 40572, 6679, 85035, 2278, 4784, 99172, 12848, 58839, 98542, 78639, 56329, 66578, 8048, 90017, 56136, 41750, 641, 97438, 39125, 24595, 52743, 4631, 46950, 61764, 18589, 45453, 2671, 2704, 36896, 48252, 1864, 1769, 30249, 52242, 62299, 34311, 99786, 92658, 1772, 92763, 13002, 15601, 10094, 17922, 40900, 91170, 60347, 17696, 37798, 4437, 80297, 82405, 40772, 42816, 78488, 86128, 14931, 49035, 14010, 14048, 94399, 37853, 33745, 63364, 85619, 49215, 5303, 64754, 94941, 12404, 16135, 23161, 81837, 15262, 13350, 46758, 48805, 81314, 6739, 24657, 29133, 60030, 48570, 75393, 40660, 30337, 83080, 58646, 53014, 30311, 92053, 1375, 1924, 21410, 96019, 77868, 6104, 17676, 51531, 86948, 80004, 77000, 74959, 74902, 99038, 2320, 29224, 58471, 13742, 31593, 46150, 89483, 16739, 99750, 62493, 31204, 20631, 30853, 61136, 30119, 85276, 58026, 69943, 99674, 13245, 22987, 8166, 63186, 58664, 1036, 4931, 16566, 38216, 75057, 98928, 53315, 74324, 87673, 69774, 2975, 23139, 46433, 13340, 3655, 82989, 64753, 60159, 49716, 37088, 4621, 12267, 3686, 48563, 54663, 19239, 77641, 32416, 33019, 20128, 84133, 21447, 36895, 42728, 48459, 69689, 83160, 11834, 81032, 47805, 4707, 17164, 57496, 77889, 67888, 55367, 11824, 4370, 7557, 57875, 33717, 6330, 36072, 17403, 46965, 52, 10840, 30164, 403, 70495, 72588, 70737, 36169, 36560, 16656, 87832, 85893, 1485, 17634, 41383, 29612, 79656, 685, 44936, 11887, 78997, 74721, 83178, 34142, 24503, 29457, 99778, 50025, 37919, 52341, 38332, 95702, 25923, 15082, 34724, 45215, 73007, 80629, 16079, 77343, 71105, 57938, 55671, 93520, 36706, 87661, 12406, 75640, 29597, 89095, 51076, 75297, 67802, 57229, 50269, 89364, 90313, 38740, 51328, 73689, 2659, 95993, 21762, 22552, 5799, 25638, 50415, 33927, 56003, 16463, 44266, 50881, 88172, 40859, 97018, 30050, 35288, 78914, 54016, 79208, 31683, 62934, 79225, 77472, 80067, 98341, 57646, 58482, 39909, 35643, 57235, 50085, 33528, 53555, 68363, 75004, 19271, 11009, 4072, 92192, 82832, 5776, 51660, 12574, 1974, 17489, 19809, 53291, 13726, 76256, 65647, 51621, 1476, 26550, 84074, 74561, 83152, 26709, 2832, 20657, 58312, 98721, 89819, 33444, 86710, 49620, 20404, 1698, 84372, 10232, 98968, 2117, 6487, 10264, 87488, 11519, 67539, 64462, 32937, 21012, 44263, 8874, 95073, 19182, 85127, 87799, 28680, 31799, 66788, 48071, 30103, 14591, 41965, 71263, 65486, 82367, 53795, 79616, 73009, 59846, 34983, 71241, 68627, 88766, 65245, 75290, 26757, 55787, 49900, 6001, 8916, 35269, 82369, 3643, 91411, 65332, 37448, 97383, 81622, 30325, 72307, 60486, 36678, 17485, 36066, 82229, 15604, 38652, 45485, 53610, 16394, 20999, 97816, 51889, 50515, 91203, 48426, 73644, 75495, 85412, 38699, 85172, 44397, 69130, 71288, 61723, 31368, 81784, 67539, 87036, 61213, 26606, 23135, 32136, 17113, 57483, 80023, 75359, 34998, 11641, 97243, 23912, 55041, 86323, 72679, 8346, 66036, 70972, 76288, 22249, 56237, 62583, 58617, 44485, 57977, 42707, 75373, 83782, 9815, 60643, 88446, 15380, 33522, 38965, 3916, 91783, 14153, 71016, 92793, 6213, 64321, 65697, 35108, 16623, 35883, 92954, 15776, 85007, 38900, 65848, 60103, 61426, 8325, 43471, 74678, 15504, 89304, 18094, 60155, 61340, 72845, 72898, 74124, 39242, 15998, 47496, 35848, 5334, 46550, 67749, 65746, 311, 32749, 88407, 88005, 72571, 11948, 49418, 69940, 12516, 38921, 46925, 15345, 80629, 13867, 35016, 28857, 15376, 44450, 70862, 35652, 97606, 89175, 61256, 37280, 63512, 7729, 12764, 10785, 36699, 63721, 42222, 48869, 10812, 74338, 63957, 50907, 82401, 9258, 95730, 32304, 43561, 48166, 67812, 24283, 29860, 66799, 16763, 16596, 60675, 6361, 3363, 92920, 88871, 81817, 36468, 54637, 51519, 83364, 99571, 81292, 72285, 42079, 86203, 68588, 54394, 27340, 80734, 1402, 6496, 80234, 42271, 54208, 31329, 73753, 85033, 83587, 11494, 41479, 51545, 54736, 14674, 75079, 98777, 14519, 37185, 84482, 92363, 46985, 45945, 44347, 18308, 19183, 81311, 47341, 8619, 28357, 92851, 29401, 15746, 69097, 21785, 83245, 97850, 12846, 40770, 97436, 92071, 81387, 18241, 90189, 77623, 27494, 78109, 25153, 24722, 81780, 98765, 32151, 61895, 96205, 15382, 98639, 24092, 96871, 5838, 54892, 99809, 51484, 23573, 88030, 27744, 25603, 46099, 80727, 18434, 70811, 41276, 58580, 78052, 22879, 88735, 39065, 91959, 33155, 23461, 52290, 85011, 96160, 72867, 58142, 69986, 46886, 48718, 70653, 83109, 1215, 23785, 44824, 17610, 68269, 89517, 73266, 96100, 59132, 84567, 17887, 73787, 11863, 31669, 2190, 58569, 15590, 31019, 14764, 10265, 18717, 18481, 96377, 54118, 81017, 80716, 98899, 93048, 89670, 40799, 15725, 49835, 6201, 24925, 31744, 9798, 31975, 11127, 11413, 33086, 29719, 71383, 10044, 49792, 11223, 59953, 48556, 57013, 51617, 92394, 37783, 75672, 50307, 32318, 71310, 10079, 98103, 91255, 82915, 79775, 5348, 43989, 37183, 74877, 96672, 13786, 53908, 6889, 82161, 71405, 2822, 730, 24182, 33030, 50896, 66807, 51148, 16875, 77474, 42928, 62338, 72718, 3484, 62293, 94363, 22043, 73397, 45718, 14433, 45913, 30193, 64366, 97125, 30751, 56155, 5683, 80821, 73106, 12675, 3910, 94619, 78246, 36738, 71485, 75574, 86722, 82201, 17495, 52113, 85430, 57387, 91591, 61546, 77033, 2629, 33018, 36232, 77971, 95901, 11354, 5747, 29039, 4681, 72718, 12756, 76065, 22396, 78613, 30007, 534, 68833, 68537, 89182, 19544, 8513, 42101, 64445, 93305, 3444, 81597, 95888, 55698, 65178, 87364, 46632, 87760, 74709, 69959, 23556, 7337, 68629, 37663, 42849, 357, 71868, 21100, 7030, 18679, 32839, 61015, 55543, 26843, 22250, 86214, 44182, 70143, 50107, 7021, 51968, 11521, 58600, 58033, 8184, 23858, 73547, 61606, 68702, 43772, 81744, 69264, 27995, 40432, 98627, 58175, 79683, 31908, 86218, 92687, 82883, 43941, 28990, 83461, 87035, 81894, 61775, 7461, 3686, 66165, 87633, 65834, 12857, 51166, 14055, 93269, 33785, 30683, 31823, 28114, 89889, 89042, 4943, 99879, 60099, 77571, 38828, 85772, 91772, 23769, 64074, 10344, 75636, 3669, 16391, 74856, 47773, 20196, 80905, 54059, 73712, 41067, 18626, 32950, 94511, 46147, 521, 60013, 82455, 21629, 45941, 78472, 82613, 99819, 80630, 28737, 6354, 1074, 72631, 8353, 33382, 73749, 50003, 40176, 28166, 74743, 64732, 71874, 25875, 79088, 95070, 38885, 72018, 57074, 21624, 47793, 42507, 24431, 48137, 71446, 5936, 39096, 81206, 72284, 39637, 7426, 14783, 38297, 5443, 46307, 39007, 696, 61089, 89519, 24081, 26362, 76482, 65751, 84028, 23261, 57637, 53209, 40767, 86575, 75817, 77999, 79455, 64417, 1612, 88381, 75520, 49489, 16385, 81469, 17151, 43366, 18497, 63848, 91825, 89296, 28025, 80856, 16962, 33385, 79450, 34220, 47319, 14188, 73204, 34445, 70144, 28725, 20923, 4689, 94083, 3574, 81852, 21062, 86896, 9942, 84830, 80759, 76278, 56156, 43127, 23398, 7558, 41344, 63497, 46643, 22688, 33271, 87388, 19678, 38313, 56491, 71217, 35443, 95489, 74365, 68890, 51210, 14175, 60550, 99727, 64962, 70608, 64317, 53334, 57276, 74179, 50131, 66974, 48799, 89129, 52385, 52012, 41046, 31501, 60915, 11257, 52557, 54393, 25971, 64332, 24200, 49954, 30843, 80415, 98300, 2657, 67664, 93106, 28720, 97315, 40843, 49414, 53774, 43071, 77550, 53660, 8577, 12259, 73729, 12100, 91034, 93284, 84074, 73755, 43630, 96996, 25430, 30802, 95275, 79155, 66920, 55413, 57134, 20768, 40072, 28009, 82789, 90828, 28350, 93398, 54494, 9905, 93763, 39259, 43453, 51003, 22327, 71265, 39456, 40437, 60599, 84670, 59176, 22972, 43090, 96085, 2554, 80584, 1877, 76579, 89499, 93727, 64775, 4666, 54976, 80363, 85445, 12229, 91673, 11211, 71085, 32078, 6931, 49135, 3393, 95947, 48147, 89758, 56130, 9591, 22492, 5882, 82797, 23126, 3166, 21827, 17077, 54963, 27994, 40924, 44777, 82755, 46529, 43256, 11244, 8023, 55198, 88654, 40049, 97903, 76567, 25607, 43417, 33065, 76136, 81859, 34268, 37159, 80011, 90701, 3584, 17061, 6511, 1750, 15984, 5045, 25871, 80461, 50006, 59993, 34646, 6489, 56880, 57556, 26529, 64728, 96007, 71187, 46051, 85230, 58908, 46137, 87542, 22430, 85813, 3784, 69837, 77150, 7828, 58798, 22825, 98330, 31676, 71536, 18534, 88597, 75808, 20659, 2647, 72213, 40867, 82392, 45911, 87779, 18585, 90429, 32596, 74850, 52067, 61402, 39153, 94426, 69165, 67520, 16395, 48697, 8184, 64453, 36902, 38891, 67855, 68140, 39255, 64686, 45236, 27731, 5477, 19631, 38463, 56195, 92974, 95577, 15841, 38180, 29756, 71085, 5057, 78441, 17079, 71143, 19753, 72738, 3949, 46868, 81853, 28505, 49422, 70279, 39341, 33411, 71335, 35059, 62257, 65001, 55244, 31159, 83151, 12277, 66363, 45050, 94395, 23618, 49991, 24923, 92300, 9925, 77657, 96105, 46796, 29108, 21684, 70131, 89459, 88877, 29924, 67447, 70552, 28078, 66735, 61254, 31989, 81470, 16373, 79078, 76053, 93094, 6507, 61491, 13452, 87293, 81724, 23454, 70512, 72071, 26558, 94199, 14953, 65958, 58698, 7185, 84940, 68320, 75260, 85640, 64384, 55755, 22138, 97285, 87873, 32832, 28252, 29419, 28171, 91235, 11458, 51403, 78122, 78532, 90225, 51756, 24665, 42148, 42994, 77098, 96005, 11925, 58546, 54151, 13927, 22184, 6551, 44873, 40764, 14522, 71031, 54713, 99669, 68558, 20015, 43101, 26887, 33233, 38346, 38847, 32157, 10599, 29434, 82946, 47973, 8337, 65612, 94830, 61383, 4898, 12694, 68276, 38903, 82844, 41221, 82307, 94702, 4005, 92978, 82768, 77696, 77975, 15862, 90812, 2920, 32914, 95490, 96976, 89118, 2594, 89773, 79613, 9717, 37263, 28744, 653, 48586, 9888, 20087, 57556, 27819, 71307, 19938, 82965, 85309, 66719, 90599, 5451, 37434, 79201, 47100, 1105, 95158, 15282, 32717, 92012, 37418, 97178, 47722, 75575, 47304, 86562, 89378, 691, 19307, 62582, 8716, 43944, 18993, 9185, 64995, 99234, 96297, 70721, 62888, 44486, 84957, 63757, 57496, 13874, 76552, 11272, 19927, 45644, 9810, 57880, 89060, 15401, 63168, 46918, 13182, 54086, 34421, 53993, 39491, 60229, 12887, 81026, 99234, 71722, 59935, 96829, 73949, 16926, 66183, 46577, 82183, 99495, 39617, 81065, 32280, 64489, 40597, 40178, 1273, 58165, 11334, 20822, 47255, 4017, 8404, 88554, 26149, 10715, 42621, 70464, 37861, 26335, 79724, 42450, 57931, 65301, 5403, 6816, 60902, 92473, 35236, 5689, 55665, 21354, 73534, 91737, 37230, 8670, 24866, 74793, 70724, 68540, 79376, 50823, 46042, 56681, 58431, 36314, 53036, 9017, 62241, 94601, 24186, 95113, 89250, 98268, 71925, 57531, 42017, 40655, 30169, 8503, 55168, 88225, 58267, 54182, 84750, 13143, 53557, 23151, 56476, 13658, 54020, 62493, 79668, 16083, 3478, 93091, 37825, 30795, 55021, 7578, 21451, 86573, 21296, 21558, 83522, 31057, 56928, 69876, 762, 69664, 8265, 22345, 45190, 88545, 48806, 86397, 57388, 66766, 70120, 27912, 77717, 66840, 80220, 71208, 7578, 9329, 8273, 2578, 62175, 31056, 14884, 28524, 97382, 88150, 62987, 99860, 19157, 70841, 43346, 83837, 71894, 83452, 3525, 30950, 76764, 31492, 61056, 93972, 63911, 88223, 38525, 31731, 43634, 54380, 78495, 27792, 98136, 84617, 99503, 19938, 91029, 47362, 83243, 41006, 30637, 36104, 65220, 9649, 21722, 93927, 85494, 14254, 91657, 73957, 60926, 19327, 37900, 3398, 62900, 41345, 18177, 44553, 54812, 15228, 16854, 30814, 74874, 97537, 20379, 25738, 5174, 63144, 5844, 63179, 14061, 51746, 43242, 82820, 59315, 31710, 26463, 48040, 32256, 80576, 46245, 75594, 46915, 30135, 64023, 85797, 10444, 91730, 3836, 46095, 60519, 76235, 55217, 56850, 86762, 96343, 76784, 1667, 11509, 84376, 10258, 59851, 57770, 93162, 75932, 95066, 72731, 57689, 54947, 98308, 82909, 42056, 88304, 448, 47304, 28362, 80072, 93687, 26107, 82932, 99778, 31455, 95747, 880, 52426, 32773, 55234, 40460, 82110, 89935, 29706, 25814, 19330, 81752, 64257, 82727, 86, 52512, 99858, 44150, 71627, 31083, 7176, 72208, 46043, 88922, 64240, 14911, 21414, 12674, 94479, 36799, 75619, 82120, 10961, 94791, 72744, 63271, 10395, 33015, 12622, 92305, 73509, 76280, 15424, 24568, 9119, 89654, 25524, 40567, 17403, 75578, 40786, 36807, 40565, 95857, 89636, 7048, 8699, 45075, 10415, 82865, 66761, 96706, 68298, 97548, 68975, 62730, 51049, 55045, 50349, 15743, 93566, 96877, 2507, 33429, 52810, 9737, 58195, 38203, 11268, 92062, 42058, 53640, 40482, 67661, 33283, 44006, 70828, 88529, 56659, 91557, 50260, 87104, 50879, 12599, 60163, 40466, 98745, 93189, 13319, 29966, 70918, 98417, 26367, 97990, 43671, 9861, 19762, 63806, 81578, 16255, 36853, 23793, 54426, 27668, 51285, 93445, 33349, 25688, 22491, 97589, 70786, 38013, 25769, 35264, 88908, 4862, 85749, 69029, 57190, 6294, 78064, 4124, 57374, 68458, 508, 91961, 7735, 57911, 12302, 98803, 76547, 55189, 45580, 43231, 36511, 12820, 84021, 30899, 47716, 89084, 69635, 77057, 45365, 55482, 86388, 48278, 37760, 10514, 91998, 18267, 8233, 18041, 90598, 54274, 45058, 86005, 96700, 72378, 181, 10769, 52496, 24804, 11015, 22360, 38423, 70388, 98967, 12980, 68531, 25917, 87795, 60425, 46379, 59835, 43956, 76223, 70977, 99390, 11470, 3375, 63632, 7556, 51446, 40608, 38701, 28045, 90626, 83681, 9362, 74421, 49792, 70009, 80234, 1486, 39263, 1997, 91798, 65552, 68859, 10451, 29218, 80875, 22491, 59413, 86082, 79916, 94304, 6144, 38465, 48616, 33661, 68437, 11530, 65446, 48661, 75695, 45921, 21450, 14752, 36577, 30699, 53721, 61092, 27255, 33544, 7742, 66015, 77087, 27329, 80894, 26310, 97937, 30799, 87539, 87367, 89826, 52223, 50860, 15870, 53411, 97685, 43521, 15371, 30710, 31419, 98146, 29804, 73653, 39427, 11718, 13497, 88315, 65595, 99159, 52765, 38222, 25752, 1141, 75668, 64143, 31599, 36119, 87507, 33395, 91071, 34974, 65662, 68113, 69579, 45664, 43864, 76056, 15390, 13696, 17091, 32339, 67637, 17945, 63771, 59773, 19530, 95522, 7230, 66329, 72457, 99386, 99018, 43958, 68215, 21816, 39999, 43671, 88140, 88746, 65150, 69032, 38111, 23278, 58991, 5035, 88413, 23992, 30880, 13444, 27558, 87361, 50054, 86057, 59886, 2579, 62631, 58056, 89828, 641, 90487, 50673, 42388, 87981, 71672, 93608, 50272, 28705, 43263, 33985, 37728, 42770, 82679, 33203, 21411, 32304, 442, 51621, 92542, 79666, 71756, 46233, 80682, 70293, 22142, 99801, 25774, 29039, 90601, 27490, 97819, 46347, 63685, 81749, 42678, 80291, 88620, 60240, 10562, 87881, 41665, 22456, 13648, 84023, 36852, 61565, 696, 81076, 77131, 72771, 44414, 42715, 72070, 83484, 98617, 66719, 45065, 86113, 44690, 24713, 15302, 98403, 38897, 29979, 4392, 83815, 20738, 4900, 38547, 35621, 93199, 49386, 81806, 22514, 33109, 71103, 5228, 48676, 81258, 42026, 21873, 1996, 7101, 40298, 57547, 79889, 87740, 94867, 71832, 84432, 29686, 34181, 96174, 63581, 53019, 2191, 93719, 23631, 45129, 16970, 30312, 70248, 5615, 79273, 80544, 48720, 8252, 29287, 9380, 94961, 61453, 26085, 49406, 31464, 37003, 10271, 1319, 47051, 31245, 89026, 41950, 6326, 15104, 98529, 22071, 3071, 43319, 66750, 42408, 45436, 79318, 71374, 33100, 19763, 12880, 23239, 85379, 20238, 53848, 13567, 94345, 42933, 87925, 69408, 67884, 6020, 79730, 63501, 90314, 35744, 82471, 68351, 69121, 37188, 91399, 6606, 76081, 31740, 97830, 11031, 85011, 30757, 5809, 16613, 24746, 72152, 87447, 67569, 58804, 83536, 87775, 74793, 76549, 75828, 63634, 20058, 59816, 35151, 28400, 47025, 69019, 11614, 58154, 45458, 81567, 40860, 96570, 90585, 28301, 83714, 58236, 89259, 7224, 53726, 93409, 91182, 6944, 85097, 84522, 3494, 13659, 48141, 89851, 49232, 78031, 29949, 41213, 38094, 60322, 96263, 70503, 51350, 47650, 8649, 86485, 21475, 25950, 36735, 94827, 52828, 63672, 81825, 54757, 79411, 17517, 41473, 62010, 55504, 88552, 92537, 26126, 74019, 9703, 99381, 33782, 92240, 39159, 16164, 34257, 83910, 72996, 31685, 74053, 14682, 4148, 96184, 11013, 26985, 97918, 53536, 83318, 32907, 96230, 76705, 35121, 77002, 42814, 97257, 24728, 19207, 60466, 41042, 45722, 78690, 31030, 67977, 27389, 34573, 6668, 96523, 88157, 27950, 82515, 55419, 1118, 27117, 19365, 75879, 75917, 12246, 72559, 10863, 99862, 26905, 92077, 27088, 43306, 73057, 44177, 90238, 49365, 39592, 49199, 65551, 57510, 46687, 26705, 966, 65978, 78606, 88212, 71333, 2413, 39807, 25335, 22617, 21288, 85449, 81464, 5003, 6127, 30458, 78096, 75635, 25111, 94794, 11821, 63887, 53111, 90124, 18969, 56896, 59999, 25384, 63971, 50279, 20959, 4021, 1452, 95674, 70046, 14927, 51215, 19290, 9897, 9864, 93556, 93980, 57836, 9463, 28474, 52088, 40505, 89692, 82610, 21933, 12986, 19848, 80152, 86384, 95960, 12553, 72517, 89435, 7031, 37966, 36083, 63301, 52526, 3794, 58122, 40639, 7619, 37535, 73088, 3731, 2476, 61606, 43726, 58962, 23584, 49331, 63312, 8902, 72048, 51072, 91503, 24257, 6814, 84082, 8170, 31198, 37517, 91447, 69118, 90100, 83717, 79861, 50161, 24881, 266, 55428, 62846, 89558, 4938, 34263, 70028, 22432, 96004, 88473, 32839, 76594, 87539, 1708, 22347, 26384, 6306, 30776, 34956, 14395, 67123, 75015, 31215, 854, 51763, 2580, 82414, 7825, 91475, 69457, 17273, 61561, 18486, 95946, 45123, 66764, 76294, 48242, 96691, 35036, 92975, 43174, 21547, 22042, 33406, 21288, 40478, 15064, 8257, 64271, 82516, 22552, 24400, 30768, 30470, 50596, 73536, 71685, 54714, 89066, 4046, 57102, 82642, 35516, 19193, 99118, 32103, 21286, 82596, 53594, 62151, 35865, 33349, 44766, 69328, 42792, 32839, 63976, 63337, 99550, 15360, 35629, 22648, 52343, 95090, 4576, 37620, 37272, 7779, 46994, 37899, 56750, 39478, 10341, 10462, 19388, 31522, 53783, 82138, 73106, 59306, 89729, 64501, 56289, 29201, 69425, 68429, 38313, 13283, 41910, 64366, 66773, 71266, 61720, 28126, 21174, 36429, 71015, 68476, 21715, 33128, 69660, 13805, 89753, 22581, 84630, 89456, 21359, 86346, 94682, 90980, 38480, 24856, 65914, 25813, 63446, 18179, 4521, 18681, 57504, 59299, 13990, 78206, 14767, 29523, 1779, 2711, 92482, 8932, 6817, 18632, 4879, 20379, 91569, 97308, 96609, 53397, 40796, 51176, 65034, 77087, 75385, 29493, 59534, 11207, 93373, 9132, 35357, 30385, 77718, 70236, 19742, 7769, 95819, 87025, 9814, 89756, 24069, 15673, 48153, 59454, 1029, 45237, 67502, 61795, 44666, 59726, 17192, 2423, 70743, 37942, 32138, 38741, 62562, 80072, 26353, 38260, 36731, 16397, 16387, 98866, 87851, 37030, 3839, 63724, 65217, 61046, 47456, 34165, 10525, 76589, 18314, 736, 96640, 42397, 2100, 66207, 91625, 57736, 90129, 89125, 14818, 44850, 43086, 2830, 13730, 44289, 16747, 49068, 69369, 37492, 79061, 22767, 83764, 33183, 77972, 50739, 50391, 18941, 13716, 35145, 97008, 517, 13680, 19939, 18314, 45403, 1732, 39620, 74821, 49197, 71573, 40059, 8801, 16566, 2288, 97714, 10095, 2941, 8196, 31914, 53437, 94488, 22886, 68524, 29435, 45698, 5742, 76857, 65233, 60855, 20616, 19972, 91512, 88272, 89293, 84046, 81754, 64185, 91993, 59904, 837, 83645, 77410, 15416, 80924, 50248, 63087, 47123, 97104, 59204, 5554, 87164, 66748, 43114, 17142, 45850, 61045, 27248, 39480, 42118, 15244, 43689, 94533, 22712, 92972, 65322, 42850, 22206, 94411, 62930, 70459, 5650, 36269, 62542, 81281, 62544, 57460, 84698, 13115, 98434, 89265, 95565, 2208, 65404, 80191, 15574, 24442, 15911, 99838, 43208, 274, 6356, 45780, 52149, 18658, 38836, 42184, 71920, 21541, 29456]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<average> sum(opposite) / 52))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<average> sum(main) / 52))))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<average> sum(opposite) / 52)))))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<average> sum(opposite) / 52))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<average> sum(main) / 52))))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<average> sum(opposite) / 52)))))))) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :})))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})))) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))))))) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))))   (<combine> -)   (<data> (<average> sum(opposite) / 52))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<average> sum(opposite) / 52)))) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})))))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}))))) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<average> sum(main) / 52))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})))))) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))))) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})))))))))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<average> sum(main) / 52))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index])))))))))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<combine> +)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<average> sum(main) / 52)))))))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<combine> +)   (<data> (<point> main[index]))))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :})))) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})))))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))))))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<average> sum(opposite) / 52)))) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9011506276150628, 0.5053179320463608]