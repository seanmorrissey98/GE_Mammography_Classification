Generation:
9

Phenotype:
def p():
  x = 0.0
  index = 46
  if sum(opposite) / 52 - sum(opposite) / 52 - sum(main) / 52 - sum(opposite) / 52 < sum(opposite) / 52 + sum(opposite) / 52 - sum(main[-index:]) + sum(opposite[-index:]) - sum(opposite) / 52:
    x = (x - 0.3)
  index = 28
  if sum(main[-index:]) + sum(main[:-index]) - main[index] > sum(opposite[:-index]) - main[index]:
    x = (x - 0.000001)
  index = 27
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.0001:
      x = (x + 0.3)
  else:
    if main[index] > opposite[index] + 3:
      x = (x + 0.1)
    else:
      x = (x + 0.0000001)
  index = 24
  if sum(main[:-index]) + opposite[index] - sum(main[-index:]) < sum(main) / 52 + sum(main) / 52:
    x = (x - 1.0)
  index = 32
  if sum(main) / 52 + sum(opposite[-index:]) + sum(opposite[-index:]) > main[index]:
    x = (x - 0.2)
  index = 13
  if sum(opposite) / 52 > sum(opposite) / 52 - main[index] + opposite[index]:
    x = (x - 0.6)
  index = 20
  if main[index] + sum(main) / 52 > sum(main[-index:]):
    x = (x + 0.4)
  index = 1
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 50:
    x = (x + 0.0001)
  index = 0
  if main[index] < 1:
    if main[index] > opposite[index] + 0.7:
      x = (x - 0.5)
  else:
    if main[index] < opposite[index] + 5:
      x = (x - 1.0)
    else:
      x = (x + 0.0001)
  index = 5
  if sum(main) / 52 + main[index] > opposite[index] - main[index]:
    x = (x + 0.001)
  index = 42
  if main[index] > main[index]:
    x = (x - 0.1)
  index = 31
  if opposite[index] > main[index]:
    x = (x + 0.0001)
  index = 12
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.0000001)
  index = 14
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x + 0.1)
  index = 25
  if opposite[index] < sum(main) / 52:
    x = (x + 0.4)
  index = 40
  if opposite[index] < opposite[index]:
    x = (x + 1.0)
  index = 28
  if sum(opposite) / 52 < sum(opposite[-index:]):
    x = (x + 1.0)
  index = 43
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x + 0.00001)
  index = 16
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x - 0.2)
  index = 23
  if sum(main) / 52 > sum(main) / 52:
    x = (x - 0.0000001)
  index = 39
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.3:
      x = (x + 0.8)
  else:
    if opposite[index] < main[index] + 8:
      x = (x + 0.0001)
    else:
      x = (x + 0.7)
  index = 10
  if sum(main) / 52 > sum(main) / 52:
    x = (x - 0.001)
  index = 14
  if sum(main) / 52 < sum(main) / 52:
    x = (x + 0.01)
  index = 36
  if opposite[index] < sum(opposite) / 52:
    x = (x + 0.2)
  index = 14
  if main[index] < 1:
    if opposite[index] > main[index] + 0.4:
      x = (x - 0.4)
  else:
    if main[index] > opposite[index] + 9:
      x = (x + 0.6)
    else:
      x = (x + 0.0000001)
  index = 19
  if main[index] < sum(opposite) / 52:
    x = (x + 0.2)
  index = 51
  if opposite[index] > sum(opposite) / 52:
    x = (x - 0.000001)
  index = 34
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 5000:
    x = (x + 0.7)
  index = 13
  if main[index] < 1:
    if opposite[index] < main[index] + 0.4:
      x = (x - 0.7)
  else:
    if opposite[index] > opposite[index] + 5:
      x = (x + 0.6)
    else:
      x = (x - 1.0)
  index = 27
  if main[index] < 1:
    if opposite[index] > main[index] + 0.2:
      x = (x - 0.0000001)
  else:
    if opposite[index] > opposite[index] + 4:
      x = (x + 0.000001)
    else:
      x = (x + 0.8)
  index = 17
  if sum(main) / 52 < sum(opposite[:-index]):
    x = (x - 0.4)
  index = 22
  if sum(main) / 52 < sum(main) / 52:
    x = (x - 0.9)
  index = 33
  if main[index] < opposite[index]:
    x = (x - 0.2)
  index = 12
  if sum(main) / 52 > sum(main) / 52:
    x = (x + 0.1)
  index = 28
  if main[index] < 1:
    if main[index] < opposite[index] + 0.00001:
      x = (x + 0.0000001)
  else:
    if opposite[index] > main[index] + 9:
      x = (x - 0.001)
    else:
      x = (x - 0.6)
  index = 37
  if sum(main) / 52 > main[index]:
    x = (x + 0.2)
  index = 23
  if sum(opposite) / 52 < main[index]:
    x = (x + 0.0001)
  index = 23
  if main[index] < 1:
    if main[index] > opposite[index] + 0.3:
      x = (x - 0.8)
  else:
    if opposite[index] > opposite[index] + 2:
      x = (x - 0.0000001)
    else:
      x = (x - 0.1)
  index = 4
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.1)
  index = 11
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.01)
  index = 30
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x + 0.0001)
  index = 34
  if opposite[index] > main[index]:
    x = (x + 1.0)
  index = 2
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.0000001)
  index = 9
  if opposite[index] > opposite[index]:
    x = (x - 0.8)
  index = 9
  if main[index] > main[index]:
    x = (x - 0.7)
  index = 48
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x + 0.5)
  index = 9
  if sum(main[:-index]) > sum(main[:-index]):
    x = (x - 0.01)
  index = 32
  if opposite[index] > opposite[index]:
    x = (x + 0.4)
  index = 9
  if main[index] < 1:
    if opposite[index] > main[index] + 0.000001:
      x = (x + 0.000001)
  else:
    if opposite[index] > main[index] + 8:
      x = (x - 0.5)
    else:
      x = (x - 0.000001)
  index = 33
  if main[index] < 1:
    if main[index] < opposite[index] + 0.01:
      x = (x - 0.5)
  else:
    if main[index] < opposite[index] + 6:
      x = (x + 0.00001)
    else:
      x = (x + 0.2)
  index = 17
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 1.0)
  index = 19
  if sum(main) / 52 < opposite[index]:
    x = (x + 0.00001)
  index = 34
  if main[index] < 1:
    if main[index] > opposite[index] + 0.00001:
      x = (x + 0.001)
  else:
    if main[index] < main[index] + 7:
      x = (x + 0.5)
    else:
      x = (x + 0.3)
  index = 30
  if opposite[index] < sum(main) / 52:
    x = (x - 0.8)
  index = 51
  if sum(main[:-index]) > opposite[index]:
    x = (x + 0.001)
  index = 23
  if sum(main) / 52 > main[index] - sum(opposite) / 52:
    x = (x + 0.4)
  index = 26
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x + 0.9)
  index = 17
  if main[index] < opposite[index]:
    x = (x + 0.0000001)
  index = 27
  if opposite[index] < main[index]:
    x = (x + 0.00001)
  index = 1
  if main[index] < 1:
    if opposite[index] < main[index] + 0.001:
      x = (x + 0.001)
  else:
    if opposite[index] > main[index] + 1:
      x = (x + 0.6)
    else:
      x = (x - 0.001)
  index = 45
  if opposite[index] < main[index]:
    x = (x - 0.8)
  index = 35
  if main[index] < 1:
    if main[index] < main[index] + 0.6:
      x = (x + 0.2)
  else:
    if opposite[index] > main[index] + 2:
      x = (x + 0.00001)
    else:
      x = (x + 0.3)
  index = 20
  if opposite[index] < sum(opposite) / 52:
    x = (x + 0.8)
  index = 3
  if sum(opposite) / 52 < main[index]:
    x = (x + 0.7)
  index = 12
  if main[index] < 1:
    if opposite[index] < main[index] + 0.0001:
      x = (x + 0.5)
  else:
    if opposite[index] < opposite[index] + 7:
      x = (x + 0.7)
    else:
      x = (x - 0.3)
  index = 40
  if main[index] < 1:
    if opposite[index] > main[index] + 0.000001:
      x = (x - 0.2)
  else:
    if opposite[index] > main[index] + 1:
      x = (x + 0.7)
    else:
      x = (x + 0.001)
  index = 21
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.00001)
  index = 8
  if sum(opposite) / 52 > main[index]:
    x = (x + 0.2)
  index = 15
  if sum(main[:-index]) > opposite[index]:
    x = (x - 0.0000001)
  index = 29
  if opposite[index] < sum(main) / 52:
    x = (x - 0.001)
  index = 8
  if sum(opposite) / 52 > main[index]:
    x = (x + 0.0001)
  index = 46
  if sum(main[:-index]) > sum(main) / 52:
    x = (x - 0.00001)
  index = 10
  if sum(main) / 52 > opposite[index]:
    x = (x - 0.1)
  index = 50
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 1.0)
  index = 24
  if sum(opposite) / 52 > opposite[index]:
    x = (x + 0.5)
  index = 29
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x + 0.9)
  index = 21
  if opposite[index] < opposite[index]:
    x = (x + 1.0)
  index = 27
  if opposite[index] - opposite[index] < main[index] - opposite[index]:
    x = (x + 0.9)
  index = 28
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.8:
      x = (x + 0.001)
  else:
    if main[index] > opposite[index] + 8:
      x = (x - 0.0000001)
    else:
      x = (x + 0.7)
  index = 23
  if main[index] < sum(opposite) / 52:
    x = (x + 0.0001)
  index = 24
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.9)
  index = 23
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.6)
  index = 13
  if main[index] > opposite[index]:
    x = (x - 0.8)
  index = 34
  if sum(opposite) / 52 > main[index]:
    x = (x + 0.000001)
  index = 16
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x + 0.9)
  index = 5
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.4)
  index = 25
  if main[index] < 1:
    if main[index] < main[index] + 1.0:
      x = (x + 0.00001)
  else:
    if main[index] > main[index] + 1:
      x = (x - 0.0000001)
    else:
      x = (x + 0.3)
  index = 20
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.001)
  index = 26
  if main[index] > sum(main) / 52:
    x = (x - 0.001)
  index = 24
  if opposite[index] - opposite[index] + sum(opposite) / 52 - sum(main[-index:]) > opposite[index] + sum(opposite[-index:]):
    x = (x - 0.001)
  index = 19
  if opposite[index] < main[index]:
    x = (x - 0.3)
  index = 44
  if sum(main[-index:]) > sum(main) / 52 - sum(main) / 52:
    x = (x - 0.1)
  index = 31
  if main[index] < 1:
    if main[index] < opposite[index] + 0.01:
      x = (x + 0.6)
  else:
    if main[index] < main[index] + 8:
      x = (x - 0.00001)
    else:
      x = (x - 0.00001)
  index = 34
  if sum(opposite) / 52 < sum(opposite) / 52:
    x = (x + 0.01)
  index = 13
  if opposite[index] > opposite[index]:
    x = (x + 0.001)
  index = 11
  if sum(opposite) / 52 > main[index]:
    x = (x - 0.5)
  index = 30
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.00001:
      x = (x - 0.01)
  else:
    if opposite[index] > main[index] + 7:
      x = (x + 0.000001)
    else:
      x = (x - 1.0)
  index = 32
  if sum(opposite[-index:]) > sum(main) / 52:
    x = (x - 0.8)
  index = 43
  if main[index] < sum(main) / 52:
    x = (x - 0.1)
  index = 29
  if sum(opposite) / 52 < main[index]:
    x = (x - 0.1)
  index = 29
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x + 0.9)
  index = 13
  if sum(main) / 52 < sum(opposite[-index:]):
    x = (x + 0.000001)
  index = 14
  if opposite[index] > main[index]:
    x = (x + 0.00001)
  index = 6
  if main[index] > opposite[index]:
    x = (x + 0.1)
  index = 32
  if main[index] < 1:
    if opposite[index] < main[index] + 0.5:
      x = (x - 0.9)
  else:
    if opposite[index] > main[index] + 1:
      x = (x + 0.3)
    else:
      x = (x - 0.2)
  index = 46
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 1.0)
  index = 34
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.7:
      x = (x + 0.6)
  else:
    if main[index] > main[index] + 4:
      x = (x - 0.3)
    else:
      x = (x - 0.001)
  index = 30
  if main[index] < 1:
    if main[index] > main[index] + 0.00001:
      x = (x + 0.5)
  else:
    if main[index] > opposite[index] + 4:
      x = (x + 0.001)
    else:
      x = (x + 0.01)
  index = 43
  if sum(opposite) / 52 < main[index]:
    x = (x - 0.0001)
  index = 32
  if opposite[index] < opposite[index]:
    x = (x + 0.3)
  index = 39
  if sum(main) / 52 > sum(main) / 52:
    x = (x - 0.4)
  index = 46
  if main[index] < 1:
    if opposite[index] > main[index] + 0.00001:
      x = (x + 0.1)
  else:
    if opposite[index] < main[index] + 3:
      x = (x + 0.01)
    else:
      x = (x - 0.6)
  index = 48
  if main[index] > sum(opposite) / 52:
    x = (x - 0.3)
  index = 17
  if opposite[index] < main[index]:
    x = (x + 0.3)
  index = 42
  if main[index] < sum(main) / 52:
    x = (x + 1.0)
  index = 45
  if main[index] < 1:
    if main[index] > opposite[index] + 0.001:
      x = (x - 0.000001)
  else:
    if opposite[index] > main[index] + 4:
      x = (x - 0.000001)
    else:
      x = (x + 0.7)
  index = 27
  if main[index] < 1:
    if opposite[index] < main[index] + 0.3:
      x = (x + 0.7)
  else:
    if main[index] > main[index] + 6:
      x = (x + 0.0001)
    else:
      x = (x + 1.0)
  index = 30
  if main[index] < 1:
    if opposite[index] < main[index] + 1.0:
      x = (x + 0.00001)
  else:
    if opposite[index] < opposite[index] + 6:
      x = (x - 0.3)
    else:
      x = (x + 0.0001)
  index = 24
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.3)
  index = 7
  if sum(opposite) / 52 > main[index]:
    x = (x + 1.0)
  index = 35
  if main[index] < main[index]:
    x = (x - 0.4)
  index = 33
  if main[index] < opposite[index]:
    x = (x + 0.2)
  index = 44
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.6)
  index = 9
  if main[index] < main[index]:
    x = (x + 0.6)
  index = 23
  if main[index] < 1:
    if opposite[index] < main[index] + 0.0001:
      x = (x + 0.001)
  else:
    if main[index] > main[index] + 1:
      x = (x - 0.9)
    else:
      x = (x + 0.8)
  index = 3
  if opposite[index] < sum(opposite) / 52:
    x = (x - 0.6)
  index = 46
  if main[index] > opposite[index]:
    x = (x + 0.5)
  index = 15
  if sum(opposite) / 52 > sum(opposite) / 52:
    x = (x + 0.7)
  index = 28
  if main[index] < 1:
    if opposite[index] < main[index] + 0.8:
      x = (x + 0.2)
  else:
    if opposite[index] > main[index] + 0:
      x = (x + 0.00001)
    else:
      x = (x - 0.9)
  index = 22
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 50:
    x = (x - 0.9)
  index = 40
  if sum(main) / 52 > sum(main[-index:]) - sum(main[:-index]):
    x = (x - 0.6)
  index = 41
  if main[index] < 1:
    if opposite[index] < main[index] + 0.3:
      x = (x - 0.5)
  else:
    if opposite[index] > opposite[index] + 2:
      x = (x - 0.0001)
    else:
      x = (x + 0.0001)
  return x
XXX_output_XXX = p()

Genotype:
[87718, 8989, 52828, 6538, 47330, 60958, 22198, 98705, 35009, 84964, 47143, 27220, 32655, 26856, 59097, 4255, 88356, 96218, 30793, 82278, 11453, 56216, 81407, 22261, 48998, 48409, 564, 4591, 23495, 64194, 42467, 15430, 16763, 95283, 46855, 35785, 9494, 81959, 80144, 74701, 92182, 78228, 79711, 71509, 52870, 68223, 70712, 81743, 68606, 32183, 37711, 13681, 42275, 29495, 74445, 80185, 66341, 21737, 3253, 58511, 56802, 24005, 64889, 15409, 66969, 69081, 83569, 45087, 7171, 71201, 22966, 79548, 96508, 80937, 6424, 9974, 98981, 3106, 18752, 71322, 88320, 92540, 69070, 97681, 12355, 27620, 39067, 136, 74, 69034, 34808, 21, 87399, 30920, 32857, 61433, 78058, 88781, 26494, 23462, 54732, 35025, 34599, 18252, 7177, 53688, 29990, 74911, 82156, 73897, 28775, 25656, 31366, 58064, 34642, 95928, 4310, 51379, 2755, 76644, 72083, 56907, 16845, 62529, 87606, 35679, 99851, 93147, 9459, 3065, 78084, 7586, 15338, 39578, 50046, 9651, 1852, 9331, 52889, 89490, 85444, 15751, 90582, 39473, 91279, 69746, 70958, 23730, 63888, 22696, 28724, 71816, 69834, 67212, 75651, 89326, 98839, 79947, 53736, 53815, 5812, 38883, 12702, 96403, 89931, 60294, 89210, 49865, 11990, 22731, 33000, 67067, 27627, 96754, 89299, 29846, 41687, 47986, 29882, 74477, 39445, 97165, 65911, 30946, 10644, 63163, 25160, 3873, 97890, 46146, 38646, 44542, 35415, 37854, 23840, 94224, 63199, 98597, 46319, 42688, 36387, 14796, 90424, 88933, 99693, 43843, 59154, 70991, 25892, 84380, 40596, 19877, 2242, 8978, 43570, 18441, 98336, 43375, 21468, 52377, 92272, 61810, 22286, 47430, 55596, 73087, 45566, 10676, 48510, 73289, 64638, 841, 90068, 66055, 12941, 25032, 77291, 92275, 36862, 28735, 50911, 11639, 49188, 56826, 62230, 15516, 48390, 1267, 22685, 86594, 62093, 75960, 86578, 29539, 1458, 5312, 26442, 8482, 5684, 33788, 7422, 72396, 56319, 68161, 44804, 61562, 43665, 17876, 2460, 33857, 28751, 23314, 18163, 41068, 72124, 55170, 91293, 96903, 46217, 76456, 96105, 9078, 32162, 67834, 37100, 85017, 79359, 20142, 30639, 64892, 13947, 8032, 12151, 76040, 43135, 68258, 93612, 72880, 77547, 50876, 27342, 93471, 31692, 65181, 94014, 12994, 66669, 29537, 20681, 95289, 70984, 76120, 16166, 45875, 64206, 87111, 66308, 89872, 93062, 73213, 84744, 97892, 59384, 56004, 76595, 89820, 27205, 79016, 72270, 77192, 25717, 42197, 29898, 36053, 1980, 79354, 91560, 66840, 27812, 75081, 31211, 14427, 98492, 2248, 75347, 72677, 43953, 40469, 34090, 73864, 58448, 20523, 91885, 3028, 8578, 16052, 38494, 63051, 96308, 35605, 37644, 58058, 16285, 47941, 44314, 38031, 37956, 94741, 59522, 12530, 65819, 83340, 68609, 78410, 28913, 32409, 78342, 63847, 73237, 32040, 91680, 84814, 49033, 52877, 32828, 14670, 48956, 50720, 13482, 3804, 81177, 64736, 29272, 3788, 58496, 36643, 11990, 84105, 99758, 27786, 2487, 12068, 76255, 19333, 74096, 62619, 38078, 64172, 5964, 88478, 61082, 29800, 39153, 88408, 56533, 99607, 82740, 2595, 7889, 45568, 45337, 18355, 92195, 16809, 16662, 85735, 32570, 12850, 14702, 73397, 43289, 66933, 47712, 24885, 72478, 84924, 58207, 10116, 92098, 27906, 39942, 83017, 23526, 41400, 73696, 95849, 1434, 6124, 28213, 26029, 7633, 52857, 52421, 7758, 64035, 29627, 40101, 82500, 40948, 66059, 88402, 14196, 7043, 14175, 5716, 55979, 56263, 56338, 80355, 96530, 63339, 97065, 46493, 27715, 87660, 73949, 7735, 61810, 81014, 42705, 99663, 97287, 94065, 45338, 9495, 21504, 86178, 82761, 13507, 82374, 59036, 53280, 62220, 41861, 92185, 16956, 23084, 2529, 73634, 74730, 64859, 80576, 48964, 64422, 56317, 41065, 24264, 83335, 95027, 51448, 70417, 21998, 18484, 85645, 98469, 19109, 47672, 99780, 79012, 10792, 23803, 94412, 58584, 90231, 40028, 60128, 55991, 43429, 93516, 60081, 29054, 91926, 95963, 73065, 98517, 27699, 49158, 45853, 5036, 84973, 54901, 83743, 8026, 35849, 97430, 69879, 17563, 33859, 88832, 55556, 26051, 43327, 46198, 79278, 59925, 48259, 84365, 74697, 38120, 59701, 78649, 93494, 58865, 92495, 98476, 41781, 37605, 65940, 2257, 43187, 58780, 76572, 28661, 22055, 28452, 97240, 27952, 14988, 15891, 1690, 32386, 64740, 99186, 73852, 55152, 51376, 51571, 80673, 71185, 82120, 99279, 66616, 3108, 67472, 83969, 67557, 12897, 80359, 48112, 85937, 97540, 71002, 9144, 56863, 54603, 59865, 89315, 9711, 66351, 63647, 34095, 20865, 89729, 75626, 11126, 11797, 91466, 26357, 93337, 44308, 97096, 11654, 15288, 36488, 30035, 18789, 33834, 33564, 71258, 72252, 27924, 88696, 16169, 45257, 47123, 31058, 31003, 91320, 77371, 49007, 4672, 67597, 80590, 65073, 60200, 27958, 15911, 74591, 73113, 46287, 21290, 39145, 2211, 10631, 20710, 1685, 64980, 51311, 99919, 35896, 52625, 31057, 7062, 62627, 55145, 56997, 70745, 26980, 40674, 34664, 61622, 97270, 9058, 19076, 9886, 28616, 59216, 65124, 47634, 95422, 80913, 92451, 15736, 81536, 71529, 99630, 63652, 22495, 99569, 19980, 22451, 42676, 43564, 18500, 73815, 20787, 81344, 71842, 21957, 16964, 34943, 56189, 40391, 2634, 42836, 41607, 9689, 22958, 58827, 56412, 48759, 81529, 44403, 84155, 93297, 30344, 7316, 720, 87059, 8989, 89443, 45890, 66257, 81245, 34434, 48316, 95199, 61780, 27141, 63361, 3598, 52266, 31474, 42152, 95929, 49091, 30256, 84157, 99741, 41423, 71911, 92704, 69606, 80599, 36505, 10720, 3148, 59874, 60170, 43676, 45037, 69777, 91952, 92467, 54192, 29723, 34124, 6497, 72202, 49720, 41272, 9466, 34029, 52980, 5562, 56005, 30335, 86257, 60569, 48427, 66655, 17444, 68390, 54430, 17765, 50432, 18590, 50187, 47203, 92597, 90223, 8015, 32445, 7823, 61302, 86944, 9186, 75302, 22324, 77098, 1293, 63657, 95605, 97960, 152, 12564, 4695, 27570, 44547, 72671, 90156, 46785, 49277, 57288, 88167, 47595, 69887, 25978, 81796, 83353, 49570, 40573, 1456, 36114, 76577, 19050, 64348, 68240, 60, 49713, 60591, 79871, 57791, 1597, 83402, 42751, 69974, 44467, 52549, 76431, 45544, 97816, 61403, 97907, 68272, 40325, 38383, 81845, 35464, 15477, 23188, 19653, 7524, 24897, 35876, 72910, 61954, 64251, 58757, 99794, 75196, 60131, 33424, 33939, 25408, 47654, 50232, 61993, 83294, 56693, 68096, 96062, 44645, 61275, 19399, 50988, 98688, 25245, 48356, 2630, 25566, 55043, 19747, 63234, 24097, 36682, 12567, 4963, 11893, 81547, 9529, 94452, 18376, 42208, 53572, 84805, 14457, 28375, 87962, 97154, 16542, 10433, 54763, 42751, 78331, 75027, 29837, 81396, 43946, 53002, 49204, 25592, 66383, 23826, 9797, 50827, 17669, 25379, 60746, 29044, 39027, 59, 44507, 64738, 71573, 95837, 57101, 87340, 6387, 64600, 77984, 54463, 15001, 54297, 73856, 68269, 83945, 27016, 62313, 87788, 76985, 3326, 74740, 75783, 28199, 24452, 40281, 13889, 92914, 13753, 44729, 46878, 84542, 82077, 10576, 37510, 18532, 34354, 70417, 29485, 20338, 56554, 25124, 77042, 16282, 73395, 42035, 13670, 15850, 28374, 77952, 56271, 69275, 89921, 13966, 63128, 27247, 46052, 41352, 81837, 74128, 97842, 4348, 81133, 74634, 21803, 16718, 4479, 1153, 72783, 85409, 33442, 10449, 11819, 54661, 82069, 89305, 57537, 47011, 13262, 78331, 30724, 58261, 39204, 23208, 805, 43656, 77828, 79534, 401, 37605, 51556, 77104, 59809, 36461, 42709, 30728, 57024, 55494, 67416, 68519, 46473, 29464, 14233, 54777, 57172, 30813, 41715, 43427, 15391, 28484, 947, 89201, 62685, 33078, 18455, 27785, 56532, 4844, 35696, 12718, 95745, 6129, 1915, 83080, 28944, 93295, 39043, 72407, 46828, 72256, 70681, 64653, 63061, 59008, 22072, 68125, 95046, 49202, 90724, 7541, 26848, 68586, 33499, 40656, 73229, 73691, 53918, 84082, 34837, 32350, 97737, 85010, 89586, 5574, 56688, 59793, 89786, 71709, 68299, 99764, 47385, 38698, 20340, 89662, 22095, 65914, 77605, 35628, 93870, 16707, 57109, 10794, 81983, 48807, 47930, 96680, 73299, 11868, 97097, 79562, 46519, 4759, 16832, 86377, 70439, 65222, 25981, 46619, 82246, 69965, 43491, 54462, 46827, 19499, 75290, 58298, 7970, 80143, 41500, 1483, 52544, 52968, 82439, 28812, 6072, 48175, 74774, 65664, 83484, 80369, 48430, 82666, 70251, 1368, 43503, 64779, 16816, 83161, 9484, 60171, 96301, 33778, 5054, 34793, 79826, 90565, 12508, 57189, 72243, 77162, 40558, 67972, 45003, 91936, 68837, 86362, 20112, 63174, 29230, 44717, 71976, 72691, 8890, 69922, 59633, 32882, 81611, 24750, 22434, 3940, 84501, 85185, 13032, 23157, 18231, 57990, 56131, 29105, 90208, 34523, 23160, 86321, 89250, 57312, 13112, 29072, 71329, 45412, 36236, 49875, 98133, 76356, 54827, 36215, 71419, 7990, 44836, 23121, 35796, 65769, 6637, 42867, 40731, 16123, 14734, 79853, 99911, 66584, 89750, 63968, 32528, 415, 44572, 65190, 50623, 31042, 57460, 5980, 40767, 54973, 45582, 6689, 89976, 82311, 97944, 5461, 24518, 44698, 46258, 98270, 80073, 18972, 70849, 61023, 15143, 70765, 65123, 98905, 51975, 51710, 70539, 42589, 43996, 79196, 72574, 40050, 27607, 53373, 56928, 54266, 46943, 37988, 69876, 93607, 88643, 35043, 8996, 95446, 65165, 61425, 91365, 79121, 51597, 87915, 77314, 45866, 1074, 27283, 94508, 88992, 39236, 24713, 40044, 58902, 7843, 52445, 97825, 7983, 50174, 59068, 78293, 49303, 99881, 77503, 31256, 75656, 12835, 50884, 11759, 66760, 76138, 62742, 73433, 61382, 14708, 78251, 32144, 27242, 76255, 40693, 59204, 83480, 81925, 60967, 44473, 25409, 82453, 24820, 41731, 57537, 2117, 80604, 75949, 29613, 26660, 43861, 3316, 98508, 87199, 77350, 40297, 70851, 80959, 17610, 76066, 91504, 18886, 77149, 97173, 86877, 56503, 12524, 1991, 24591, 75556, 25278, 96745, 4950, 48266, 13987, 20786, 1062, 38759, 5209, 93396, 63319, 55357, 2444, 3768, 31622, 36575, 78183, 4363, 90410, 95624, 87686, 75032, 52527, 78153, 83690, 48763, 12097, 44556, 32823, 35755, 29942, 56382, 9481, 57188, 98806, 99394, 59026, 44518, 38304, 33725, 71381, 2728, 19688, 88739, 36661, 84607, 50853, 67057, 25888, 16881, 58643, 55976, 7866, 40061, 11666, 87829, 50010, 70739, 62388, 72398, 87391, 18544, 40064, 70966, 22444, 95029, 26687, 73084, 11983, 56394, 94746, 13144, 56246, 73727, 64930, 95605, 1369, 25178, 48153, 10467, 41597, 32363, 57534, 98183, 38134, 92100, 74082, 6574, 49692, 11811, 7531, 19036, 33748, 63591, 27861, 16894, 57779, 51922, 73287, 24903, 15372, 1147, 35591, 50526, 64998, 50803, 75175, 60492, 53930, 90122, 82851, 49987, 84496, 96894, 34155, 80952, 76490, 35781, 72042, 61757, 99115, 57437, 9019, 97674, 2692, 57881, 63207, 28786, 15754, 17345, 62334, 99025, 65717, 6269, 71457, 3150, 86177, 47346, 99756, 80162, 83792, 10897, 34191, 93815, 12957, 48401, 16901, 21491, 30287, 55716, 23745, 76991, 30632, 53384, 82568, 91017, 29199, 56418, 4186, 50519, 78136, 49464, 50890, 82352, 32345, 89658, 96457, 18993, 291, 36440, 72460, 58117, 6596, 70342, 4901, 22493, 90346, 74446, 34132, 45264, 81450, 64368, 58721, 89833, 21247, 36358, 66567, 2469, 11473, 74890, 8551, 24373, 95165, 87517, 6496, 24420, 12456, 27019, 93215, 55085, 83260, 24847, 79631, 10836, 10052, 63811, 99621, 28017, 45454, 25958, 76719, 25765, 14073, 50583, 88507, 15813, 17953, 19273, 95468, 41021, 10681, 91593, 26612, 30635, 6849, 88468, 20285, 94032, 6484, 47363, 15509, 45591, 11711, 64348, 20490, 4511, 35561, 65644, 58612, 73645, 45520, 97368, 80510, 73666, 1577, 13465, 83166, 57451, 64125, 71190, 57295, 10250, 39634, 44313, 33976, 17249, 69081, 58279, 37391, 2322, 75817, 76536, 15992, 14435, 39377, 91076, 53399, 66629, 47906, 98554, 12646, 52079, 45653, 42168, 16538, 70977, 75445, 47686, 3821, 98481, 40652, 67463, 94070, 58708, 12452, 31885, 51413, 98271, 54592, 20156, 70995, 12968, 14352, 61286, 87306, 98571, 41487, 59475, 44364, 62267, 66036, 71768, 70967, 29926, 58167, 34997, 15388, 19959, 61903, 81030, 5362, 85251, 22458, 78695, 69243, 86150, 62339, 68721, 38311, 64205, 63697, 69065, 89989, 41658, 54866, 95549, 86305, 39418, 12443, 12249, 2260, 36778, 59101, 41715, 57297, 61670, 39405, 3927, 27281, 93589, 54795, 73058, 5998, 61334, 63490, 27589, 6973, 93641, 7286, 1851, 27183, 52443, 30419, 3263, 28719, 68153, 32331, 78168, 85939, 15354, 79790, 9161, 19074, 18870, 37263, 23827, 82575, 8473, 84249, 17231, 54900, 18788, 41969, 13629, 63499, 13779, 50876, 24862, 75877, 667, 96200, 44356, 87316, 75965, 11983, 85249, 68545, 43977, 81049, 99428, 99172, 56476, 13575, 8857, 86862, 97801, 27559, 50802, 46763, 1188, 64221, 52563, 21055, 1323, 56527, 44942, 91868, 39638, 93447, 14287, 26832, 17711, 71661, 52478, 93544, 91435, 75995, 93053, 8758, 13690, 53613, 39435, 51907, 7986, 10448, 87265, 68215, 21350, 16050, 77943, 15777, 56276, 64307, 86486, 52440, 5524, 18712, 9529, 19222, 35294, 13841, 88496, 80340, 72888, 5377, 60609, 44368, 36640, 92857, 55293, 12365, 43669, 89509, 16366, 1791, 84415, 27627, 3036, 11751, 54861, 63188, 10890, 95131, 57457, 17073, 33219, 73767, 16747, 6389, 63466, 96763, 14313, 83796, 7463, 92601, 14176, 18036, 90245, 63819, 53566, 96731, 46211, 6301, 92063, 62195, 29285, 53963, 54830, 17728, 75918, 86263, 19486, 81684, 29289, 33723, 95099, 97797, 25000, 9379, 99529, 5492, 96528, 46046, 42473, 6040, 34929, 33172, 35239, 48227, 72965, 44044, 28449, 13674, 45001, 46981, 73830, 76636, 17690, 39462, 14890, 90461, 88643, 91028, 42976, 23147, 93465, 51510, 74987, 16410, 47239, 15922, 95352, 63159, 78394, 62858, 32719, 23761, 60451, 28629, 47204, 97, 24968, 23740, 97005, 31749, 82863, 22951, 71300, 21345, 57885, 2761, 36473, 40754, 93216, 72733, 44180, 9650, 89334, 15125, 14773, 90377, 97698, 83459, 44275, 93589, 81776, 79789, 51659, 47469, 25077, 52433, 31384, 30691, 82483, 70600, 84098, 56247, 69193, 21974, 79264, 64963, 26043, 33524, 74573, 54730, 77572, 29763, 38640, 99158, 6075, 43487, 71345, 83823, 2233, 98927, 3351, 65064, 34798, 33903, 73376, 88220, 36959, 6603, 40869, 96919, 68579, 37133, 48741, 29493, 55384, 33958, 86410, 60298, 59936, 17516, 28778, 33494, 43210, 78855, 31095, 84178, 23107, 66001, 19187, 49236, 39156, 26187, 43641, 93797, 15848, 27984, 2827, 98493, 44426, 75959, 85721, 33679, 68253, 86838, 17007, 72796, 85212, 51783, 77334, 8325, 59684, 86670, 13543, 71853, 46625, 92035, 68444, 4259, 24041, 7801, 42557, 86091, 67771, 81708, 84889, 57307, 42635, 28055, 82184, 82202, 88873, 1358, 81407, 20148, 76463, 48735, 52294, 49113, 4252, 77297, 6405, 56122, 64873, 13542, 12853, 70612, 51547, 19993, 42246, 54570, 18488, 14422, 21957, 39741, 64469, 59898, 69798, 64823, 16155, 64338, 82358, 17734, 82704, 47443, 33897, 86370, 48738, 32186, 81832, 95844, 93261, 83947, 86841, 5290, 25745, 84246, 7801, 83744, 5470, 73696, 20250, 86225, 39227, 88858, 26957, 30598, 47228, 45653, 85339, 19711, 81350, 79775, 25467, 46625, 32303, 27038, 98802, 93433, 57920, 99564, 63041, 77800, 13665, 35413, 95425, 89710, 9088, 58717, 13025, 64674, 48710, 69940, 83272, 61336, 84374, 11755, 665, 16390, 62178, 67122, 74859, 55636, 99830, 94312, 67945, 52641, 34629, 33509, 45326, 76450, 679, 99530, 83949, 85807, 18490, 78603, 98605, 70696, 27018, 79714, 95627, 29204, 62443, 86701, 50503, 22953, 21340, 66626, 25321, 69160, 25100, 89033, 95059, 83538, 99541, 14992, 45946, 48290, 58055, 4276, 7870, 13674, 9857, 29581, 94406, 34684, 63376, 47823, 30328, 62069, 41226, 93850, 4159, 95229, 62788, 8022, 83225, 44760, 20122, 99832, 98295, 19102, 77317, 62648, 18149, 84357, 5699, 42277, 86560, 88380, 59999, 71480, 52379, 6388, 35835, 73063, 53597, 22800, 76260, 36329, 49662, 21127, 96262, 64209, 30105, 13089, 45492, 67956, 15539, 93703, 63980, 95562, 45252, 20649, 61413, 93131, 15155, 65106, 42745, 62401, 95781, 39221, 58534, 78320, 89425, 58836, 76746, 74796, 91846, 65269, 78415, 18202, 54776, 39791, 12393, 86545, 86831, 89622, 60281, 17011, 34857, 70502, 93049, 86859, 4198, 71814, 49919, 90511, 15022, 83290, 84818, 40146, 28349, 28700, 63811, 5244, 91959, 23462, 43736, 75185, 95214, 58913, 85963, 79420, 28931, 55281, 13187, 76687, 62877, 80813, 40695, 3389, 36430, 83850, 43587, 69794, 82455, 85865, 13278, 8474, 86022, 54043, 30115, 44150, 66832, 10612, 517, 48749, 75022, 70562, 76613, 58081, 55298, 65078, 99590, 55598, 61964, 11880, 47647, 62022, 73975, 10764, 81782, 82264, 71613, 72570, 69042, 41866, 90111, 23388, 51617, 27182, 94986, 75676, 30177, 7233, 68041, 69990, 99820, 85791, 77235, 4215, 41946, 99559, 91386, 50795, 74674, 74037, 18805, 22987, 4024, 65521, 32405, 86425, 88431, 63716, 40094, 48287, 26585, 68234, 27852, 28394, 92826, 4252, 9982, 98764, 87435, 68239, 32239, 64979, 14207, 94809, 99260, 89720, 90221, 58738, 83367, 8007, 1717, 47256, 7229, 2148, 57025, 304, 33033, 79063, 85346, 69722, 53595, 34157, 6747, 38595, 7992, 60602, 93263, 16545, 47430, 8038, 48408, 68597, 65532, 89827, 83652, 67505, 61991, 24620, 1516, 78534, 38919, 83237, 71945, 98385, 33777, 21237, 29625, 22219, 57168, 69215, 25093, 7846, 35518, 28958, 62554, 4424, 76778, 35758, 46746, 37145, 84981, 71820, 2767, 67616, 5042, 24392, 5659, 71783, 18151, 51161, 35236, 95378, 69912, 6710, 49963, 93152, 91368, 74096, 54944, 28091, 41324, 64002, 42969, 97163, 24133, 29617, 88603, 59704, 37585, 91070, 93684, 70944, 63571, 60631, 18404, 48383, 63742, 88393, 77081, 6404, 45461, 68001, 76128, 3056, 97527, 2641, 83521, 69557, 29267, 51926, 38464, 49531, 61621, 32375, 1573, 26287, 94617, 41112, 87751, 95604, 65475, 8007, 89317, 52878, 65769, 40931, 21245, 48259, 85193, 79813, 81783, 23373, 61681, 48429, 30740, 69304, 69061, 40037, 69909, 91782, 98543, 26861, 58259, 14919, 30960, 86195, 74791, 34359, 51005, 94536, 71866, 72310, 60153, 8080, 16076, 60539, 66295, 7082, 30872, 83287, 42968, 69753, 5624, 70033, 88836, 10028, 93848, 94306, 32209, 63058, 31784, 44556, 71410, 11498, 78684, 4942, 81276, 19467, 24661, 3672, 86260, 39692, 90024, 62573, 76805, 93215, 73132, 12020, 76879, 75726, 35253, 67704, 63661, 50398, 12263, 36160, 53221, 14314, 14352, 13320, 79029, 87260, 76363, 81619, 54496, 15386, 77063, 33995, 39909, 75573, 39423, 14277, 24066, 94862, 79224, 36362, 80248, 17889, 86416, 41094, 35698, 60204, 82911, 97998, 80973, 79745, 96709, 29685, 19093, 11142, 35156, 20848, 26906, 36724, 30692, 75978, 91586, 74580, 29586, 87274, 10274, 18490, 60416, 18317, 48895, 91927, 10162, 14798, 55826, 47650, 25949, 90165, 19800, 96232, 37787, 7957, 58674, 22712, 81952, 57745, 23400, 15915, 70411, 71642, 51790, 34911, 31213, 77225, 45919, 78030, 61916, 51360, 16421, 43402, 85562, 25646, 74403, 85758, 15720, 71564, 95646, 74439, 94220, 1543, 96734, 98039, 77473, 49394, 68455, 80627, 66339, 97764, 32536, 83289, 63896, 77049, 31099, 20656, 7528, 20448, 50052, 85804, 9863, 99653, 67982, 55535, 15000, 69784, 19157, 12180, 11738, 25450, 34123, 77355, 38037, 30824, 29828, 24708, 23180, 96913, 66988, 74511, 35578, 44037, 90919, 53819, 61483, 8216, 4280, 32585, 29330, 64754, 40846, 34354, 53748, 3194, 35170, 85760, 25577, 88673, 10048, 57476, 90706, 36576, 36266, 20158, 39970, 97748, 7268, 40045, 30339, 54442, 6168, 47052, 79246, 93290, 98473, 95745, 21048, 35155, 47711, 5852, 1803, 70309]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<average> sum(opposite) / 52))))   (<combine> -)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<average> sum(opposite) / 52))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<average> sum(opposite) / 52))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<average> sum(opposite) / 52)))))))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<point> main[index]))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))))   (<eval> <)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<average> sum(main) / 52))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))))) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))))))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})))) {::} (<code> (<index> index =  (<n> 51)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<average> sum(opposite) / 52)))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}))))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})))) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}))))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})))))))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<average> sum(opposite) / 52))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})))))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})))))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :})))))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.47201882845188287, 0.5598923512523328]