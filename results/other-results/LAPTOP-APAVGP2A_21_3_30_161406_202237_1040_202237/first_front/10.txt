Generation:
9

Phenotype:
def p():
  x = 0.0
  index = 6
  if sum(opposite) / 52 + opposite[index] < main[index] - sum(main) / 52 - sum(opposite) / 52 + sum(main[:-index]):
    x = (x - 0.7)
  index = 3
  if sum(opposite) / 52 + main[index] + sum(main) / 52 + opposite[index] > sum(opposite[-index:]) + opposite[index] - sum(main) / 52 - opposite[index]:
    x = (x - 0.0001)
  index = 2
  if opposite[index] - opposite[index] < sum(main[:-index]):
    x = (x + 0.4)
  index = 32
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.9)
  index = 14
  if main[index] < 1:
    if main[index] < opposite[index] + 0.2:
      x = (x + 0.5)
  else:
    if opposite[index] < main[index] + 6:
      x = (x + 1.0)
    else:
      x = (x + 0.0001)
  index = 4
  if main[index] > sum(main) / 52:
    x = (x + 0.3)
  index = 2
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x - 0.4)
  index = 39
  if sum(main) / 52 > opposite[index]:
    x = (x - 0.9)
  index = 32
  if sum(main) / 52 < main[index]:
    x = (x - 0.3)
  index = 15
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.2:
      x = (x - 0.5)
  else:
    if opposite[index] < main[index] + 9:
      x = (x - 0.6)
    else:
      x = (x - 0.000001)
  index = 21
  if opposite[index] > sum(opposite) / 52:
    x = (x - 0.00001)
  index = 26
  if sum(main) / 52 > sum(main) / 52:
    x = (x + 0.7)
  index = 20
  if sum(main) / 52 > opposite[index]:
    x = (x - 0.1)
  index = 43
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.1)
  index = 0
  if opposite[index] < main[index]:
    x = (x + 0.001)
  index = 43
  if sum(opposite[:-index]) > opposite[index] + main[index]:
    x = (x + 0.00001)
  index = 36
  if sum(opposite) / 52 < sum(opposite) / 52:
    x = (x + 0.2)
  index = 45
  if opposite[index] < main[index]:
    x = (x + 1.0)
  index = 27
  if opposite[index] < opposite[index]:
    x = (x + 0.1)
  index = 11
  if opposite[index] < opposite[index]:
    x = (x + 0.9)
  index = 41
  if sum(main[:-index]) > sum(main) / 52 - opposite[index] - opposite[index]:
    x = (x - 0.2)
  index = 46
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 5000:
    x = (x + 0.3)
  index = 23
  if main[index] < 1:
    if opposite[index] > main[index] + 0.001:
      x = (x - 0.000001)
  else:
    if opposite[index] > main[index] + 6:
      x = (x + 0.8)
    else:
      x = (x - 0.000001)
  index = 46
  if main[index] < 1:
    if opposite[index] > main[index] + 0.8:
      x = (x - 0.6)
  else:
    if main[index] > opposite[index] + 9:
      x = (x - 0.1)
    else:
      x = (x + 0.6)
  index = 21
  if sum(opposite[-index:]) > sum(opposite) / 52 - sum(main[-index:]):
    x = (x - 0.6)
  index = 5
  if sum(main) / 52 + opposite[index] > opposite[index] + sum(main) / 52:
    x = (x + 0.7)
  index = 9
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.001)
  index = 2
  if sum(main) / 52 > main[index]:
    x = (x - 0.1)
  index = 8
  if opposite[index] > opposite[index]:
    x = (x - 0.2)
  index = 43
  if sum(main) / 52 < main[index]:
    x = (x + 0.0000001)
  index = 24
  if main[index] < 1:
    if main[index] < opposite[index] + 0.9:
      x = (x - 0.0001)
  else:
    if main[index] < main[index] + 5:
      x = (x - 0.6)
    else:
      x = (x - 0.01)
  index = 13
  if opposite[index] < sum(main) / 52:
    x = (x + 0.4)
  index = 40
  if sum(main) / 52 < main[index]:
    x = (x + 0.3)
  index = 25
  if main[index] < sum(main) / 52:
    x = (x + 0.0000001)
  index = 21
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x - 0.0001)
  index = 39
  if main[index] < 1:
    if main[index] > main[index] + 0.8:
      x = (x + 0.9)
  else:
    if main[index] > main[index] + 8:
      x = (x - 0.4)
    else:
      x = (x - 0.9)
  index = 22
  if sum(main) / 52 < main[index]:
    x = (x - 0.2)
  index = 20
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.4:
      x = (x - 0.1)
  else:
    if opposite[index] < opposite[index] + 9:
      x = (x + 0.2)
    else:
      x = (x + 0.00001)
  index = 19
  if opposite[index] > main[index]:
    x = (x - 0.00001)
  index = 11
  if main[index] > main[index]:
    x = (x + 0.7)
  index = 21
  if opposite[index] > main[index]:
    x = (x + 0.3)
  index = 37
  if main[index] < 1:
    if main[index] > main[index] + 0.2:
      x = (x + 1.0)
  else:
    if main[index] < main[index] + 2:
      x = (x + 1.0)
    else:
      x = (x + 0.6)
  index = 40
  if opposite[index] > opposite[index]:
    x = (x + 0.0001)
  index = 25
  if main[index] < 1:
    if main[index] < opposite[index] + 0.9:
      x = (x - 0.001)
  else:
    if main[index] < main[index] + 2:
      x = (x - 0.3)
    else:
      x = (x - 0.001)
  index = 38
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.00001)
  index = 32
  if main[index] < 1:
    if main[index] < main[index] + 0.8:
      x = (x + 0.9)
  else:
    if opposite[index] < main[index] + 7:
      x = (x - 0.00001)
    else:
      x = (x - 0.6)
  index = 35
  if sum(opposite) / 52 < opposite[index]:
    x = (x - 0.5)
  index = 10
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.00001:
      x = (x + 0.0001)
  else:
    if opposite[index] > opposite[index] + 6:
      x = (x - 0.7)
    else:
      x = (x - 0.3)
  index = 18
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.4:
      x = (x - 0.00001)
  else:
    if main[index] > main[index] + 3:
      x = (x - 0.6)
    else:
      x = (x + 0.8)
  index = 40
  if sum(opposite) / 52 < sum(opposite) / 52:
    x = (x - 0.001)
  index = 31
  if sum(main[-index:]) < main[index]:
    x = (x - 1.0)
  index = 4
  if sum(opposite) / 52 < opposite[index]:
    x = (x - 0.0000001)
  index = 48
  if main[index] < sum(opposite) / 52:
    x = (x - 0.2)
  index = 44
  if opposite[index] > sum(main) / 52:
    x = (x + 0.00001)
  index = 21
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 50:
    x = (x - 0.2)
  index = 41
  if main[index] > opposite[index]:
    x = (x + 0.5)
  index = 31
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 100:
    x = (x + 0.0001)
  index = 0
  if sum(opposite) / 52 < opposite[index]:
    x = (x - 0.001)
  index = 37
  if sum(opposite) / 52 > sum(opposite) / 52:
    x = (x - 0.0000001)
  index = 26
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 5000:
    x = (x - 0.3)
  index = 12
  if sum(main) / 52 > sum(main[:-index]):
    x = (x - 0.2)
  index = 48
  if main[index] < 1:
    if main[index] > opposite[index] + 0.8:
      x = (x - 0.0001)
  else:
    if main[index] > opposite[index] + 5:
      x = (x - 0.1)
    else:
      x = (x + 0.9)
  index = 30
  if main[index] < sum(opposite[-index:]):
    x = (x + 0.6)
  index = 26
  if opposite[index] > main[index]:
    x = (x - 0.3)
  index = 18
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.9:
      x = (x - 0.4)
  else:
    if opposite[index] < main[index] + 2:
      x = (x - 0.1)
    else:
      x = (x + 0.4)
  index = 2
  if sum(main[-index:]) > sum(opposite) / 52:
    x = (x + 0.00001)
  index = 29
  if sum(opposite[-index:]) > sum(opposite) / 52:
    x = (x + 0.8)
  index = 28
  if opposite[index] > main[index]:
    x = (x - 0.00001)
  index = 27
  if main[index] < sum(main) / 52:
    x = (x + 0.5)
  index = 24
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.00001)
  index = 22
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.9:
      x = (x + 0.001)
  else:
    if opposite[index] < main[index] + 5:
      x = (x + 0.0001)
    else:
      x = (x - 0.01)
  index = 5
  if main[index] < opposite[index]:
    x = (x - 0.1)
  index = 26
  if opposite[index] > main[index]:
    x = (x - 0.001)
  index = 36
  if main[index] > opposite[index]:
    x = (x + 0.2)
  index = 9
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 5000:
    x = (x + 1.0)
  index = 38
  if main[index] < main[index]:
    x = (x + 0.2)
  index = 4
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 1.0)
  index = 46
  if main[index] < 1:
    if main[index] < opposite[index] + 0.00001:
      x = (x + 0.1)
  else:
    if opposite[index] < main[index] + 9:
      x = (x - 0.9)
    else:
      x = (x + 0.001)
  index = 19
  if opposite[index] + main[index] > main[index]:
    x = (x + 0.1)
  index = 35
  if sum(opposite) / 52 < main[index]:
    x = (x + 0.8)
  index = 46
  if opposite[index] > sum(main) / 52:
    x = (x - 0.4)
  index = 46
  if main[index] < main[index]:
    x = (x - 0.01)
  index = 11
  if sum(main) / 52 < sum(main) / 52:
    x = (x + 0.2)
  index = 36
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.9:
      x = (x + 0.3)
  else:
    if opposite[index] < opposite[index] + 7:
      x = (x - 0.7)
    else:
      x = (x + 0.9)
  index = 46
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x - 0.2)
  index = 10
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x - 0.4)
  index = 14
  if opposite[index] > opposite[index]:
    x = (x - 0.5)
  index = 12
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 1000:
    x = (x - 0.001)
  index = 28
  if main[index] < 1:
    if main[index] < opposite[index] + 0.001:
      x = (x - 0.2)
  else:
    if main[index] > main[index] + 9:
      x = (x - 0.3)
    else:
      x = (x - 0.1)
  index = 39
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x + 1.0)
  index = 19
  if opposite[index] > opposite[index]:
    x = (x + 0.3)
  index = 19
  if main[index] + sum(opposite) / 52 < sum(opposite[:-index]):
    x = (x - 0.01)
  index = 25
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.1)
  index = 12
  if sum(opposite[-index:]) > sum(main) / 52:
    x = (x - 0.5)
  index = 43
  if main[index] < opposite[index]:
    x = (x + 1.0)
  index = 29
  if sum(main) / 52 > sum(main) / 52:
    x = (x + 0.2)
  index = 28
  if opposite[index] > sum(opposite) / 52:
    x = (x + 0.7)
  index = 5
  if opposite[index] > sum(opposite) / 52:
    x = (x - 0.4)
  index = 37
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 50:
    x = (x + 0.6)
  index = 11
  if main[index] > sum(opposite) / 52:
    x = (x - 1.0)
  index = 25
  if sum(opposite) / 52 < sum(opposite) / 52:
    x = (x - 0.8)
  index = 0
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.6)
  index = 42
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.001)
  index = 8
  if sum(main[:-index]) > opposite[index]:
    x = (x + 0.001)
  index = 2
  if main[index] < 1:
    if main[index] < main[index] + 0.0000001:
      x = (x - 0.9)
  else:
    if opposite[index] > opposite[index] + 4:
      x = (x + 0.2)
    else:
      x = (x - 0.00001)
  index = 45
  if opposite[index] > sum(opposite) / 52:
    x = (x + 0.1)
  index = 11
  if main[index] < opposite[index]:
    x = (x - 0.8)
  index = 32
  if sum(main) / 52 > sum(opposite) / 52:
    x = (x + 0.7)
  index = 28
  if opposite[index] < sum(opposite) / 52:
    x = (x - 0.7)
  index = 42
  if sum(opposite) / 52 < opposite[index]:
    x = (x + 0.0000001)
  index = 11
  if main[index] < 1:
    if main[index] < opposite[index] + 0.7:
      x = (x + 0.001)
  else:
    if opposite[index] > main[index] + 1:
      x = (x + 0.0000001)
    else:
      x = (x - 0.0000001)
  index = 28
  if main[index] > main[index]:
    x = (x - 0.4)
  index = 20
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.1)
  index = 39
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.7:
      x = (x + 0.2)
  else:
    if main[index] < main[index] + 8:
      x = (x - 0.0000001)
    else:
      x = (x + 0.9)
  index = 37
  if sum(opposite) / 52 > sum(opposite[:-index]):
    x = (x + 1.0)
  index = 21
  if sum(main[:-index]) > opposite[index] + main[index]:
    x = (x + 0.5)
  index = 2
  if sum(main[-index:]) < sum(opposite) / 52 + sum(main) / 52:
    x = (x + 0.1)
  index = 36
  if sum(opposite) / 52 + opposite[index] > sum(opposite) / 52 + main[index]:
    x = (x - 0.01)
  index = 28
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 1000:
    x = (x - 0.7)
  index = 4
  if sum(main) / 52 < sum(main) / 52:
    x = (x - 0.4)
  index = 23
  if sum(main) / 52 < sum(main) / 52:
    x = (x - 0.2)
  index = 26
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 50:
    x = (x + 0.7)
  index = 1
  if main[index] < sum(main) / 52:
    x = (x + 0.00001)
  index = 34
  if main[index] < main[index]:
    x = (x - 0.001)
  index = 0
  if sum(opposite) / 52 > sum(opposite) / 52:
    x = (x + 0.5)
  index = 36
  if opposite[index] - opposite[index] + opposite[index] < sum(opposite) / 52 - main[index]:
    x = (x - 0.5)
  return x
XXX_output_XXX = p()

Genotype:
[2979, 86499, 87117, 81078, 55544, 26485, 10315, 69758, 24822, 40851, 13390, 2717, 80030, 11502, 60443, 65733, 78245, 55365, 25653, 72907, 25554, 4522, 48302, 608, 31338, 40254, 2998, 56303, 90895, 78712, 91008, 92608, 37899, 57795, 392, 9542, 30182, 75142, 20019, 77806, 41887, 34633, 49119, 91340, 37028, 43993, 82325, 30472, 54430, 91178, 31800, 89494, 85854, 12976, 15561, 36736, 51417, 4307, 95099, 30542, 1845, 8499, 52342, 3373, 20459, 1617, 65409, 47734, 72714, 92364, 93145, 43691, 52590, 77344, 38526, 30124, 78573, 40027, 33509, 99354, 87565, 60817, 7061, 17186, 48744, 72339, 88682, 50469, 11459, 5193, 53747, 14570, 89140, 745, 7474, 27533, 94145, 30, 46051, 78407, 38434, 96760, 72423, 19241, 71427, 82931, 41386, 373, 50958, 5202, 19052, 56094, 18119, 46579, 46075, 91074, 58227, 27954, 3889, 76037, 77659, 28901, 45222, 21456, 62963, 78330, 85879, 38368, 2969, 37720, 34161, 61709, 670, 75489, 77113, 56066, 28613, 3715, 11174, 6861, 9457, 2078, 69041, 97461, 84570, 94736, 67668, 4104, 76833, 59196, 640, 81989, 9055, 47869, 78032, 35903, 90880, 74901, 37690, 3180, 43021, 32229, 82834, 68077, 31574, 32255, 15134, 71578, 65978, 5043, 91113, 44711, 7136, 36170, 11863, 22502, 99133, 38586, 43562, 9091, 83673, 1856, 82371, 83003, 41240, 47061, 38893, 28915, 9819, 61760, 45269, 42674, 85703, 5905, 22691, 79691, 13508, 68306, 5576, 61086, 37965, 95236, 91090, 70091, 2999, 53072, 87397, 61430, 93699, 92206, 75814, 11719, 22057, 37028, 59898, 20559, 55140, 77700, 65844, 9028, 84786, 89175, 23760, 52124, 87886, 48954, 79856, 61258, 94719, 18951, 84658, 88259, 65938, 20892, 83205, 26122, 91825, 39620, 5527, 86588, 3198, 1339, 62603, 77851, 37189, 37122, 13205, 13872, 57597, 79586, 59958, 48734, 71140, 82691, 7197, 11714, 85251, 59384, 6052, 2057, 54872, 43135, 33872, 53117, 88602, 34668, 6445, 94370, 37820, 96797, 68762, 48136, 43336, 69139, 68995, 67870, 40328, 72564, 66421, 95150, 82015, 71727, 48457, 80735, 77154, 49730, 48971, 56235, 16564, 43246, 66385, 49942, 50872, 17145, 35882, 64475, 94566, 43804, 21973, 18232, 73603, 98430, 14926, 41800, 14107, 6002, 22343, 44781, 66674, 36980, 86538, 64502, 46319, 64670, 29296, 69312, 54577, 13702, 81232, 86664, 94423, 32581, 28937, 30136, 79607, 79521, 32172, 51705, 75578, 54673, 73550, 49478, 80828, 26040, 9786, 10736, 63063, 95805, 68484, 20143, 6013, 56695, 76503, 54951, 68534, 86270, 66691, 25459, 18232, 74917, 53190, 85325, 57956, 6867, 91987, 38088, 99464, 12890, 57926, 83072, 20881, 94762, 29693, 81683, 29133, 60980, 91819, 75142, 90326, 20868, 37989, 88460, 60007, 17882, 62482, 75896, 50011, 50077, 89414, 59023, 96, 20910, 15319, 9687, 82296, 93386, 188, 41775, 49036, 44313, 23947, 60002, 84678, 17647, 37798, 1199, 40909, 31555, 94248, 63395, 58685, 19378, 50460, 36087, 30326, 35675, 76574, 93231, 93430, 39593, 38401, 54143, 80086, 18049, 35603, 44853, 97498, 44525, 66565, 1997, 93994, 25846, 56148, 65836, 58340, 79732, 34244, 30032, 17118, 1750, 47842, 43440, 58504, 12703, 60691, 42875, 27483, 70383, 35829, 15404, 60365, 97561, 32153, 17978, 25539, 15290, 85582, 5962, 36814, 46592, 46268, 85510, 74991, 84599, 84374, 4296, 88651, 6162, 44050, 7906, 39264, 37019, 46142, 25736, 30967, 94483, 17210, 56748, 56379, 67358, 41057, 58301, 18093, 8619, 105, 90469, 70681, 23039, 71089, 16129, 32977, 67167, 67952, 99083, 23881, 47329, 93280, 85205, 19597, 82201, 70149, 66729, 64915, 36677, 78909, 85569, 37854, 31346, 75400, 51827, 72694, 77960, 54070, 15334, 90992, 50710, 98007, 99657, 4508, 86236, 5828, 66249, 6553, 71429, 2794, 12116, 82336, 24174, 15907, 16674, 62931, 14886, 46967, 1839, 27778, 78844, 76383, 86513, 62555, 42645, 97458, 19567, 67420, 88900, 94087, 41675, 23355, 4760, 36011, 63336, 34869, 17332, 7956, 74746, 98127, 10228, 65467, 21815, 63650, 39508, 26282, 24057, 79852, 84251, 54715, 96584, 91180, 4213, 93984, 50240, 47073, 46626, 71442, 11073, 29863, 21293, 43537, 36061, 98461, 48891, 21979, 6781, 33499, 56989, 51661, 71441, 61536, 59889, 67849, 29756, 18384, 12880, 19877, 26932, 72458, 49057, 48721, 73096, 57159, 71231, 7736, 61579, 98382, 44502, 41508, 40038, 13507, 29837, 79892, 2197, 33034, 40229, 37310, 72325, 44846, 77842, 45355, 34132, 85967, 24142, 22411, 7656, 49960, 43549, 71664, 65681, 51984, 8284, 68422, 37348, 76658, 36972, 32340, 9724, 51500, 73707, 77577, 10378, 20283, 88665, 81991, 16773, 35497, 76191, 11791, 36848, 36923, 84028, 86686, 48093, 69417, 43953, 24431, 13528, 8724, 28803, 38685, 44740, 94918, 21151, 12422, 13915, 19629, 55572, 53620, 93831, 912, 24907, 44514, 21719, 75500, 91795, 92029, 36005, 19867, 93230, 48669, 33801, 24366, 3220, 40443, 31897, 29980, 97419, 59012, 87829, 5178, 31528, 58537, 66712, 5235, 6842, 28157, 67105, 77861, 51987, 17756, 66278, 95296, 10990, 45527, 45710, 97581, 91835, 97684, 21505, 11379, 21755, 66644, 48049, 30594, 46834, 55251, 92277, 44121, 5828, 41215, 66405, 55379, 72644, 96430, 38982, 4911, 59187, 84719, 51615, 76013, 99464, 37682, 28814, 71299, 7457, 60633, 64923, 74517, 63684, 42786, 3559, 30016, 25525, 621, 36923, 53991, 43031, 83799, 5616, 92483, 79599, 9527, 28669, 76078, 3420, 75640, 74794, 12348, 17243, 32221, 30349, 26646, 9116, 87226, 40748, 98617, 38611, 88337, 76927, 3679, 53117, 45960, 34353, 3873, 34399, 54000, 43924, 24398, 61928, 61956, 41032, 80055, 50652, 10482, 37003, 88245, 19905, 93079, 57031, 44565, 26327, 52526, 76275, 61108, 41058, 37984, 78662, 28788, 56619, 6340, 44771, 96440, 23536, 60664, 88969, 88529, 87763, 91439, 39754, 43983, 74379, 18214, 33676, 25078, 42535, 81895, 35811, 89392, 31772, 38657, 72581, 81397, 64060, 59041, 45383, 9630, 99885, 25117, 56459, 48690, 40424, 18676, 86511, 5334, 96777, 22933, 76025, 94885, 52507, 77381, 6726, 22557, 56227, 87644, 21961, 35256, 14449, 77818, 60954, 68302, 28711, 21984, 82664, 58855, 40962, 34133, 29359, 14097, 69365, 36492, 63272, 2728, 65141, 33104, 93077, 29755, 14617, 49503, 27592, 47592, 83154, 14427, 15619, 25715, 63484, 40610, 64118, 42304, 94633, 97931, 72080, 56143, 35716, 65995, 41687, 88799, 63262, 83181, 10955, 92832, 43981, 70124, 36027, 7477, 45471, 28072, 4780, 66865, 48008, 31780, 96066, 67038, 35815, 79895, 75625, 23287, 71732, 89939, 4867, 37612, 25328, 42157, 99663, 39079, 18465, 94134, 355, 29381, 43530, 77398, 36025, 45468, 25456, 89941, 10656, 81127, 91961, 87473, 9549, 66212, 63669, 12622, 92397, 63020, 29200, 4610, 44955, 35603, 61126, 97658, 53753, 57430, 60131, 32680, 60324, 37747, 38925, 39377, 9101, 38769, 75556, 91265, 47613, 19398, 98481, 56794, 40587, 68774, 87474, 55994, 32236, 41267, 23580, 22392, 15046, 28540, 61542, 88380, 24070, 6019, 38235, 81704, 4557, 3265, 30240, 21812, 33188, 3923, 48412, 56529, 87491, 9623, 90849, 31309, 32546, 86760, 36086, 68559, 83298, 28399, 92632, 98137, 9812, 67918, 9926, 91500, 81178, 44386, 44719, 58090, 51686, 88911, 1720, 17262, 99961, 68790, 26036, 98579, 67653, 11513, 21516, 96890, 7041, 72501, 46370, 32564, 4927, 73567, 44450, 53858, 7169, 95976, 3666, 38917, 11607, 48696, 72622, 76985, 63921, 35260, 26060, 51921, 76893, 90337, 58587, 57202, 87011, 28145, 38505, 70761, 19556, 70497, 7617, 13676, 48481, 36749, 81020, 21581, 41417, 82101, 82241, 46771, 85358, 16436, 37859, 63435, 75617, 88647, 61100, 82482, 6455, 73937, 10285, 47326, 93989, 57749, 19343, 36867, 85487, 22287, 63965, 48121, 1451, 81240, 99025, 73998, 17122, 26710, 26861, 52447, 96525, 82468, 45632, 87037, 72457, 28797, 37301, 64604, 3622, 76137, 1673, 82067, 96089, 25127, 20625, 59166, 94997, 40436, 19538, 37572, 15300, 94971, 17454, 63745, 46190, 27230, 73676, 25199, 24870, 32812, 46805, 56146, 94921, 81945, 25710, 16229, 44575, 9124, 30744, 326, 8043, 88746, 60878, 62916, 41601, 57983, 54680, 59613, 75363, 73176, 75424, 62247, 39108, 75740, 93239, 6912, 19350, 29723, 24452, 67808, 44543, 30183, 20993, 75910, 59396, 39017, 34261, 61307, 97531, 367, 96040, 4191, 66131, 39986, 7086, 29727, 30760, 48431, 65310, 25192, 2561, 77057, 62017, 35132, 3587, 57437, 22682, 1490, 35305, 57160, 12562, 73751, 51687, 19473, 67926, 26401, 42472, 92932, 59366, 39157, 93491, 59955, 78559, 42589, 26723, 19037, 1805, 88150, 2009, 14114, 69614, 12092, 13005, 4919, 39595, 39188, 16158, 85555, 16519, 47975, 48040, 55414, 21547, 72296, 96828, 88249, 21517, 53391, 17880, 87619, 57079, 35747, 67931, 7775, 18676, 48085, 89336, 2413, 26713, 13664, 45519, 90882, 96792, 73198, 3348, 44711, 45314, 67426, 18293, 23992, 58275, 80474, 43725, 39154, 26244, 43328, 61658, 63046, 48091, 35696, 93739, 71354, 58858, 60603, 86015, 5812, 32764, 2506, 61257, 29619, 92326, 30014, 27813, 15340, 54831, 58176, 2478, 98997, 2932, 71346, 77551, 18201, 83429, 32, 28647, 26188, 47395, 6856, 9550, 10892, 80890, 15068, 52659, 26636, 43156, 1283, 36626, 17435, 2021, 55984, 36769, 63234, 80820, 54823, 44304, 18674, 36797, 98143, 78156, 92323, 50492, 99933, 68295, 17720, 51202, 9060, 65697, 52023, 83844, 99984, 34276, 77220, 20810, 53377, 54448, 25122, 61485, 31448, 83021, 1471, 58149, 63699, 87382, 25811, 51028, 86328, 59243, 86222, 37828, 27912, 22979, 13222, 57720, 32396, 63083, 84336, 28526, 51746, 99766, 5680, 15480, 2009, 15079, 41333, 58087, 37073, 14623, 60157, 93421, 6039, 30359, 60724, 25431, 90662, 10766, 91049, 63481, 98217, 58436, 10332, 96880, 33048, 45296, 56424, 5959, 4208, 15454, 96701, 83702, 93660, 5863, 13761, 72220, 82504, 52965, 53725, 34781, 2222, 66797, 65749, 51574, 65697, 38694, 46631, 14420, 89087, 60269, 2355, 15507, 55372, 630, 46411, 69606, 6563, 41331, 93196, 67082, 89679, 90297, 19176, 79470, 26027, 34069, 88114, 34149, 39709, 33212, 35045, 82503, 94975, 44651, 35631, 42331, 69794, 187, 51838, 10567, 66595, 40106, 90375, 1740, 91579, 67890, 14173, 80629, 97164, 66836, 10644, 61845, 41803, 30317, 64301, 38927, 69033, 27131, 68745, 26480, 80442, 77323, 13058, 98832, 22347, 44659, 2136, 1054, 77784, 16413, 2024, 4602, 42231, 4054, 84371, 9670, 1274, 74707, 93733, 82810, 63760, 65479, 33649, 89841, 49520, 58980, 60680, 94314, 19901, 62646, 51813, 54361, 43654, 52425, 43916, 23644, 98042, 94060, 35589, 40412, 13008, 14764, 14261, 65247, 27496, 60928, 9726, 98853, 10396, 95309, 20499, 62404, 12838, 20617, 31376, 33759, 75495, 22534, 9171, 59592, 48539, 29459, 10592, 55789, 41688, 9400, 73637, 31781, 96805, 18763, 26772, 2366, 59983, 16151, 71017, 53770, 67880, 36541, 30468, 71334, 30234, 25152, 89799, 96026, 99869, 80333, 82344, 88762, 93002, 93423, 87775, 40777, 41138, 95506, 92635, 33314, 50442, 97344, 26937, 32475, 41581, 97104, 80719, 54913, 8864, 35923, 42420, 3883, 17917, 32669, 47213, 45825, 53947, 30982, 97917, 96400, 5076, 8367, 333, 82872, 46280, 98924, 33569, 95703, 43061, 38611, 14718, 28137, 54007, 8338, 42833, 19257, 64967, 85937, 68067, 67485, 45034, 9734, 39470, 2190, 95214, 90975, 87239, 95181, 78101, 6551, 70063, 93435, 46071, 9817, 17874, 61519, 91221, 20188, 41153, 14974, 39305, 52401, 99345, 12456, 64998, 28045, 99670, 89985, 29110, 87077, 93950, 42482, 22926, 6263, 50594, 25169, 1669, 82391, 14311, 6930, 20423, 22646, 6737, 76018, 59157, 3582, 82783, 55575, 11330, 31981, 28151, 59031, 64707, 38394, 47917, 3879, 31099, 39081, 85681, 26082, 76555, 18154, 51750, 16326, 71471, 3788, 12547, 48283, 12405, 47227, 8786, 91375, 14233, 33913, 56055, 81494, 71109, 87323, 16713, 35506, 75723, 42501, 15146, 87131, 9248, 96721, 95574, 79289, 95500, 44763, 31578, 92870, 80142, 39751, 67319, 20135, 21746, 77533, 60704, 41800, 25489, 43468, 58066, 38406, 22281, 81477, 27731, 54252, 61000, 57274, 4265, 1039, 61628, 44913, 19955, 35069, 47836, 14768, 98692, 19974, 94508, 18290, 1611, 19695, 59288, 34689, 46259, 97233, 45852, 35125, 11721, 9944, 82245, 21492, 3104, 94236, 33493, 71689, 61189, 89726, 72786, 43453, 2439, 66909, 70952, 30967, 36713, 9066, 59954, 7043, 50656, 1709, 76413, 63186, 70839, 78151, 47886, 77635, 39252, 37184, 75821, 44527, 54115, 36299, 38405, 15607, 85285, 21464, 54004, 18685, 89786, 86776, 21967, 98291, 36277, 15741, 2512, 5553, 37230, 78583, 4172, 60587, 11830, 64280, 101, 99057, 91461, 41498, 23917, 97949, 77763, 51244, 10412, 7238, 2571, 32162, 19454, 8083, 18879, 99021, 93054, 62497, 91293, 7747, 15900, 37195, 13409, 93309, 89771, 27074, 7194, 57941, 8970, 57385, 62176, 62427, 56456, 774, 27932, 46626, 70730, 41957, 51852, 59215, 14956, 40581, 62567, 61028, 30682, 36870, 14078, 41674, 77256, 14624, 10450, 22077, 59519, 89717, 24596, 71382, 76154, 20327, 80449, 84344, 18351, 1959, 75449, 52559, 64191, 86852, 50348, 66434, 7470, 51481, 82504, 40775, 32956, 59378, 88259, 74637, 84826, 72481, 2595, 71626, 98338, 74547, 40655, 40681, 60596, 95802, 97200, 91518, 80555, 98702, 51028, 55709, 55247, 90398, 2604, 49253, 98261, 82304, 39954, 72000, 62627, 10036, 21307, 31373, 6756, 7880, 92296, 92869, 13021, 95830, 17935, 6738, 65763, 53411, 69887, 25713, 7008, 48974, 52235, 6939, 74284, 16040, 48952, 43999, 89268, 23528, 28679, 90040, 80334, 56502, 20024, 8854, 55118, 71293, 88728, 95194, 48201, 24659, 92632, 79883, 93490, 52420, 34820, 66291, 86980, 72574, 43889, 30695, 1440, 46368, 98204, 98291, 84662, 56941, 72052, 52868, 36035, 10899, 11372, 67430, 46163, 28143, 71031, 46909, 88494, 88140, 48053, 33697, 50610, 77013, 24690, 67274, 46207, 88930, 42976, 69362, 8577, 41786, 37971, 81772, 76202, 85817, 6759, 68492, 40683, 28810, 10692, 6982, 19108, 65971, 59819, 54958, 38811, 49674, 59941, 664, 7837, 52695, 6727, 2455, 47149, 12204, 41166, 96653, 87717, 73176, 97806, 62234, 38624, 4053, 96194, 31531, 61583, 84473, 93427, 23649, 40424, 66372, 99925, 83132, 48527, 41180, 72272, 15757, 67224, 40261, 30616, 31470, 55203, 15764, 52757, 92888, 16258, 16293, 26517, 24967, 66868, 54143, 60595, 21498, 47013, 27255, 59897, 3807, 59188, 20811, 8097, 36031, 16999, 39418, 19994, 90816, 71606, 40946, 66775, 69373, 68974, 25009, 21268, 71079, 11953, 38718, 19336, 41853, 17195, 96420, 62167, 8790, 39023, 67783, 79764, 69845, 3099, 32784, 251, 96940, 25506, 80764, 89412, 72747, 2366, 71227, 71780, 88369, 44358, 83778, 7083, 94897, 49269, 64059, 7071, 52494, 70280, 88335, 85633, 19193, 4333, 78212, 13104, 96503, 15813, 88208, 15394, 28110, 70517, 56068, 69629, 89824, 39741, 46979, 62043, 94623, 2267, 76842, 20642, 23264, 75185, 23375, 26734, 7084, 75439, 29243, 92329, 52799, 90522, 75802, 16892, 2168, 98649, 96388, 54217, 510, 10777, 721, 99657, 29783, 98668, 63370, 51672, 931, 7579, 51372, 21534, 65286, 21431, 42724, 24716, 98191, 80606, 72073, 81838, 14374, 7570, 71113, 55094, 40338, 96908, 84927, 84310, 17996, 96957, 42574, 96744, 84500, 64085, 87823, 59809, 56054, 360, 3248, 97401, 98798, 88479, 87278, 32718, 25354, 27051, 95173, 47900, 82636, 54284, 1321, 41921, 3077, 43260, 52522, 95375, 99471, 60806, 79071, 18064, 23578, 64161, 22697, 89733, 53268, 6017, 43733, 1754, 15788, 48144, 70725, 19469, 32749, 39256, 52783, 56161, 88331, 55141, 50433, 59817, 13361, 30620, 34740, 99317, 84362, 44015, 18770, 77342, 73993, 21086, 93506, 6562, 59249, 84266, 18516, 23850, 26538, 331, 89556, 82711, 26144, 65923, 84390, 1075, 74157, 63928, 3697, 56299, 95810, 99181, 92758, 99181, 26169, 75788, 88414, 74992, 48436, 56584, 3902, 82892, 38444, 96651, 33541, 67114, 43856, 15388, 62203, 78852, 83472, 25670, 57527, 6614, 96562, 426, 1796, 2602, 34069, 36682, 56069, 16434, 27978, 12207, 9970, 90131, 26808, 96284, 23231, 39176, 66344, 91133, 33280, 13227, 53640, 32360, 3699, 28011, 94251, 723, 84467, 61732, 29923, 97730, 27456, 67925, 81460, 13790, 4269, 92281, 70480, 53537, 79529, 4036, 58133, 57833, 64044, 94350, 4769, 36348, 36751, 65826, 55740, 6124, 74415, 85572, 75986, 67764, 92532, 58038, 33145, 90995, 9696, 24971, 16757, 39431, 86632, 10952, 80141, 95199, 73073, 15878, 27158, 79461, 75913, 13713, 11411, 63852, 29938, 31548, 80769, 89936, 74662, 16224, 52084, 9161, 44325, 63201, 90693, 50506, 69195, 34681, 81756, 76092, 10097, 26874, 45436, 61730, 24174, 54211, 44579, 89223, 19415, 47344, 63332, 64521, 18224, 10353, 25303, 91728, 50492, 31985, 20628, 75465, 66962, 83590, 752, 99227, 71936, 94420, 55691, 11219, 43426, 67203, 58301, 94224, 14989, 36626, 67490, 22029, 85034, 19097, 10521, 59678, 51409, 84106, 27385, 90114, 83554, 8805, 67297, 75920, 43253, 5152, 60224, 94756, 43617, 61268, 31532, 72277, 88807, 63145, 90602, 97596, 18340, 65810, 79085, 87252, 18891, 17821, 53228, 65271, 84956, 21978, 78779, 32208, 52505, 78407, 29401, 99170, 43927, 1722, 54456, 67102, 59941, 7673, 86577, 45939, 20558, 54754, 43916, 26155, 34098, 62466, 71077, 17784, 10361, 54567, 72453, 87505, 53223, 63892, 73652, 51980, 93331, 24279, 52250, 75326, 64568, 78547, 19607, 62032, 6068, 98074, 3745, 26834, 32463, 92022, 95407, 13871, 8126, 51300, 22025, 85681, 29950, 38931, 66389, 26084, 38036, 1803, 87474, 76772, 46691, 58025, 82819, 84349, 19159, 4530, 17478, 95183, 88775, 74217, 780, 84816, 40213, 44621, 6336, 20341, 44653, 12074, 523, 25206, 45736, 32993, 67617, 97500, 97888, 61900, 65893, 43891, 80014, 83336, 80717, 75158, 11830, 12525, 20258, 28685, 91007, 82870, 90685, 49603, 80953, 80261, 76729, 75912, 22690, 210, 4999, 42092, 35556, 81740, 26777, 67623, 31767, 57204, 62720]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<average> sum(main) / 52))))   (<combine> -)   (<data> (<average> sum(opposite) / 52))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<average> sum(main) / 52))))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<point> opposite[index])))))))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})))) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})))))) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :})))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}))) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))))) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})))))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<average> sum(opposite) / 52))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}))))) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<average> sum(main) / 52)))) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})))))))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<eval> <)   (<data> (<combo> (<data> (<average> sum(opposite) / 52))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9610355648535565, 0.5042961989410191]