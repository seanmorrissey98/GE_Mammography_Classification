Generation:
0

Phenotype:
def p():
  x = 0.0
  index = 46
  if sum(opposite[:-index]) + opposite[index] + sum(opposite[-index:]) + main[index] - opposite[index] - opposite[index] - main[index] + opposite[index] + sum(main[-index:]) - sum(opposite[-index:]) - opposite[index] + sum(main[:-index]) - main[index] < opposite[index] - opposite[index] + main[index] - opposite[index] - opposite[index] - opposite[index] + opposite[index] + sum(opposite[:-index]) - sum(opposite[-index:]) + main[index] - opposite[index] + opposite[index] + opposite[index] - main[index]:
    x = (x - 0.000001)
  index = 49
  if opposite[index] + sum(main[:-index]) - opposite[index] + opposite[index] - main[index] + sum(opposite[-index:]) > opposite[index] - sum(opposite[:-index]) + opposite[index] - opposite[index]:
    x = (x - 0.8)
  index = 0
  if main[index] + sum(opposite[-index:]) - opposite[index] - main[index] - sum(opposite[:-index]) - sum(opposite[:-index]) < sum(main[:-index]) + main[index] + main[index] - opposite[index] + sum(opposite[-index:]):
    x = (x + 0.7)
  index = 20
  if sum(opposite[-index:]) + sum(opposite[:-index]) - opposite[index] < sum(opposite[-index:]) + sum(opposite[:-index]):
    x = (x - 1.0)
  index = 0
  if main[index] - sum(opposite[-index:]) > sum(main[:-index]) - opposite[index]:
    x = (x + 0.0000001)
  return x
XXX_output_XXX = p()

Genotype:
[73300, 6513, 593, 77609, 27795, 69913, 28625, 80101, 51518, 59825, 26311, 73761, 31842, 37771, 64985, 53267, 52608, 54477, 10934, 89198, 3884, 99652, 34596, 63543, 44013, 17756, 93449, 69416, 41441, 39606, 51065, 78710, 38576, 55847, 63281, 95735, 40262, 33227, 24344, 50927, 58290, 6383, 64948, 56524, 80858, 13715, 59509, 46199, 52889, 83363, 19788, 73870, 99707, 33147, 6545, 4643, 63723, 79340, 97906, 29034, 43556, 96276, 35116, 57885, 92997, 6650, 93943, 80620, 91567, 93185, 46814, 26770, 95402, 5123, 20012, 74740, 52713, 6425, 24877, 92194, 30734, 569, 55573, 20919, 49543, 18373, 45651, 34499, 61214, 57152, 44907, 98816, 23447, 42374, 52541, 3874, 86259, 67294, 27871, 83135, 40444, 58600, 24726, 28656, 20453, 66945, 96084, 73862, 94546, 78104, 16217, 16483, 66498, 34561, 80671, 95947, 47468, 34463, 75333, 67755, 93362, 28775, 59202, 60676, 62396, 91639, 21775, 92780, 23816, 13408, 58563, 34039, 57947, 51308, 61922, 18278, 46886, 66019, 99386, 5388, 48950, 27760, 82869, 55582, 44148, 35129, 68866, 9384, 53639, 64872, 76488, 8962, 74347, 58287, 57929, 72435, 74075, 56852, 69690, 32011, 641, 2816, 43639, 18332, 92020, 95733, 4345, 38670, 3355, 26875, 42672, 59779, 63502, 69926, 69674, 72155, 62253, 61579, 63395, 43471, 37675, 23932, 30131, 38067, 53871, 28678, 10700, 54501, 13701, 63055, 54549, 61872, 2291, 42044, 77638, 40685, 37013, 6326, 67459, 73765, 17747, 84585, 41950, 87507, 25003, 40159, 62310, 43438, 91937, 22471, 24641, 46417, 61639, 99520, 73645, 67093, 30906, 48820, 7463, 74463, 14377, 77602, 17105, 27885, 6558, 99253, 59820, 71863, 56464, 85988, 50166, 19200, 11682, 25241, 50395, 74344, 45109, 76123, 60112, 28579, 64381, 89534, 39572, 31304, 59123, 78003, 68007, 98380, 88338, 5988, 73983, 80927, 78677, 2547, 5658, 98972, 82991, 47354, 28647, 41271, 31594, 5041, 46437, 29905, 56520, 64726, 61993, 7983, 53249, 63685, 20292, 2240, 47690, 51547, 5748, 32373, 88110, 96300, 66544, 23753, 4288, 58168, 44175, 51586, 42986, 19069, 15707, 79819, 7637, 76342, 97911, 91825, 11606, 52639, 84721, 50182, 15091, 55161, 71352, 39169, 54096, 20628, 95956, 81412, 36118, 96242, 3777, 24436, 14251, 4263, 92180, 44069, 79822, 11218, 67054, 93339, 80840, 58006, 53491, 672, 46394, 87867, 63611, 24081, 67055, 63872, 77450, 86673, 51734, 26447, 73978, 23016, 2547, 36698, 42020, 30071, 55028, 50948, 5561, 85007, 48946, 98175, 83810, 28599, 33896, 6274, 74169, 97271, 6022, 63161, 18468, 36856, 80162, 32446, 98552, 57090, 97084, 28363, 98820, 73790, 77464, 3658, 52557, 68543, 71856, 9260, 17969, 7785, 95187, 40587, 20403, 11326, 44342, 53136, 67595, 30621, 10834, 80930, 4199, 74932, 11169, 92227, 1171, 57506, 28456, 92741, 28248, 98083, 42780, 26349, 6902, 2666, 16878, 75034, 5062, 2899, 201, 25582, 77201, 87349, 54180, 52558, 84266, 47341, 75649, 17021, 58878, 35184, 20415, 75030, 99947, 72083, 13223, 39900, 57219, 57844, 91272, 75630, 93172, 50325, 46061, 9466, 47796, 15055, 36383, 76513, 96228, 40911, 35456, 88217, 1757, 70732, 37500, 59594, 10833, 64471, 11366, 68497, 86666, 64996, 58060, 19312, 37354, 29342, 36598, 86646, 2925, 20667, 20431, 60653, 45357, 85752, 46415, 4055, 68884, 35383, 21763, 92592, 4972, 61256, 32107, 20963, 30704, 17473, 698, 91875, 71352, 91355, 94385, 27660, 67809]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> -)   (<data> (<point> main[index]))))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<point> opposite[index]))))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> -)   (<data> (<point> main[index])))))))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[1.0, 0.5033806626098716]