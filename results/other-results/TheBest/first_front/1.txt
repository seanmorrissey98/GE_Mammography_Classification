Generation:
0

Phenotype:
def p():
  x = 0.0
  index = 46
  if opposite[index] > main[index]:
    x = (x + 0.4)
  index = 18
  if main[index] < 1:
    if opposite[index] > main[index] + 0.00001:
      x = (x - 0.9)
  else:
    if main[index] < main[index] + 0:
      x = (x - 0.8)
    else:
      x = (x - 0.3)
  index = 9
  if main[index] < 1:
    if main[index] > main[index] + 0.00001:
      x = (x - 0.01)
  else:
    if opposite[index] > main[index] + 3:
      x = (x - 0.01)
    else:
      x = (x - 0.0001)
  index = 37
  if main[index] < 1:
    if opposite[index] > main[index] + 0.001:
      x = (x + 0.1)
  else:
    if main[index] > opposite[index] + 7:
      x = (x - 0.00001)
    else:
      x = (x - 0.0000001)
  index = 15
  if opposite[index] > main[index]:
    x = (x - 0.4)
  index = 50
  if opposite[index] < main[index]:
    x = (x - 0.3)
  index = 9
  if main[index] < 1:
    if opposite[index] > main[index] + 1.0:
      x = (x - 0.7)
  else:
    if opposite[index] < main[index] + 5:
      x = (x - 0.000001)
    else:
      x = (x + 0.1)
  index = 1
  if main[index] < 1:
    if main[index] < main[index] + 0.01:
      x = (x + 0.5)
  else:
    if main[index] > main[index] + 0:
      x = (x + 0.00001)
    else:
      x = (x - 0.3)
  index = 23
  if opposite[index] > opposite[index]:
    x = (x - 0.9)
  index = 35
  if main[index] < opposite[index]:
    x = (x - 0.0000001)
  index = 33
  if main[index] < 1:
    if main[index] > main[index] + 0.0000001:
      x = (x + 0.000001)
  else:
    if opposite[index] > opposite[index] + 7:
      x = (x + 0.7)
    else:
      x = (x + 0.7)
  return x
XXX_output_XXX = p()

Genotype:
[86418, 77088, 8113, 76177, 16450, 86218, 30592, 25031, 63801, 24221, 75757, 20022, 75856, 86386, 8638, 26520, 7098, 24743, 5321, 94756, 12719, 99659, 90488, 56365, 8395, 87846, 5883, 23864, 12328, 80488, 54654, 83349, 4504, 72267, 69010, 31563, 16764, 368, 54946, 88840, 90900, 18977, 36717, 40066, 93652, 81859, 25125, 55241, 81427, 54065, 13008, 68711, 4055, 85153, 89156, 98343, 13359, 98890, 35509, 37843, 80521, 50805, 39977, 42154, 60358, 19044, 71814, 93641, 28597, 19181, 9269, 87460, 68700, 80342, 73637, 93515, 11102, 9713, 91988, 10079, 63352, 63842, 66237, 7588, 3000, 27512, 68068, 74609, 59327, 58951, 54130, 28019, 19138, 58204, 94663, 17680, 37160, 72654, 39120, 82494, 85856, 2316, 69643, 2391, 11723, 73176, 38397, 24574, 34564, 52717, 47558, 47086, 40228, 60673, 71722, 34827, 57702, 5678, 25316, 30088, 2542, 43698, 984, 82177, 11100, 22610, 34898, 40022, 73847, 70648, 78197, 35245, 34825, 11848, 8168, 45225, 18064, 76371, 66372, 42221, 19390, 76551, 17097, 84260, 75945, 47302, 42841, 28818, 29395, 77097, 70848, 29664, 45404, 53398, 8536, 18788, 62033, 47383, 84609, 34636, 68629, 61984, 22609, 97771, 71722, 60550, 4103, 87073, 52945, 13150, 56271, 86808, 16017, 86848, 21467, 69613, 75758, 51559, 73014, 47024, 51387, 52160, 31079, 91910, 66196, 13714, 98366, 30592, 39954, 79385, 86486, 22570, 80894, 30797, 19886, 87742, 10184, 77954, 33452, 7416, 76335, 33347, 37062, 10142, 73163, 19751, 95938, 54289, 50021, 32126, 23605, 29852, 45735, 94202, 76821, 61918, 28612, 78716, 65386, 38885, 66096, 73004, 69946, 45293, 68744, 8293, 85811, 454, 52284, 64470, 55583, 71711, 9726, 56410, 30906, 59553, 42632, 61395, 25100, 420, 64163, 54425, 7856, 36067, 30533, 9269, 19442, 27127, 77405]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :})))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.972725335606222, 0.9860246015421238]