Generation:
0

Phenotype:
def p():
  x = 0.0
  index = 46
  if main[index] - main[index] - main[index] + opposite[index] + main[index] - sum(opposite[-index:]) + opposite[index] + main[index] - opposite[index] < sum(opposite[:-index]) + main[index] + opposite[index] + opposite[index] - opposite[index] + opposite[index] - opposite[index] + main[index] + opposite[index]:
    x = (x + 1.0)
  index = 12
  if opposite[index] + sum(opposite[-index:]) > opposite[index]:
    x = (x - 0.000001)
  index = 7
  if sum(main[:-index]) + opposite[index] - main[index] > main[index] - opposite[index] + sum(opposite[:-index]) - sum(main[-index:]):
    x = (x + 0.000001)
  index = 38
  if sum(main[-index:]) > sum(main[-index:]):
    x = (x - 0.01)
  index = 7
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x + 0.01)
  index = 26
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.8)
  index = 22
  if main[index] < 1:
    if opposite[index] > main[index] + 0.1:
      x = (x - 0.4)
  else:
    if opposite[index] < opposite[index] + 6:
      x = (x - 0.5)
    else:
      x = (x - 0.000001)
  index = 47
  if opposite[index] < main[index] + main[index]:
    x = (x - 0.00001)
  index = 20
  if sum(main[-index:]) < sum(opposite[:-index]):
    x = (x + 0.001)
  index = 36
  if sum(opposite[-index:]) < sum(main[:-index]):
    x = (x + 1.0)
  index = 7
  if main[index] < main[index]:
    x = (x - 0.8)
  index = 24
  if main[index] < 1:
    if main[index] > opposite[index] + 0.00001:
      x = (x + 0.001)
  else:
    if opposite[index] > opposite[index] + 7:
      x = (x - 0.8)
    else:
      x = (x + 0.01)
  index = 50
  if main[index] > opposite[index]:
    x = (x - 0.00001)
  index = 24
  if opposite[index] < opposite[index]:
    x = (x - 0.1)
  index = 22
  if sum(main[:-index]) < sum(opposite[-index:]):
    x = (x - 0.6)
  index = 48
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.000001)
  index = 23
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.9)
  index = 12
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.7:
      x = (x - 0.9)
  else:
    if opposite[index] < opposite[index] + 7:
      x = (x - 0.8)
    else:
      x = (x - 0.00001)
  index = 0
  if main[index] < 1:
    if main[index] > main[index] + 0.001:
      x = (x - 0.000001)
  else:
    if main[index] > opposite[index] + 2:
      x = (x + 0.0001)
    else:
      x = (x + 0.4)
  index = 2
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.0001:
      x = (x + 0.2)
  else:
    if opposite[index] < opposite[index] + 9:
      x = (x + 0.7)
    else:
      x = (x + 0.00001)
  index = 22
  if opposite[index] > opposite[index]:
    x = (x + 0.1)
  index = 0
  if main[index] > main[index]:
    x = (x + 0.0000001)
  index = 6
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.8:
      x = (x - 0.001)
  else:
    if main[index] > opposite[index] + 1:
      x = (x + 0.01)
    else:
      x = (x - 0.8)
  index = 5
  if opposite[index] > opposite[index]:
    x = (x + 0.00001)
  index = 44
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x - 1.0)
  index = 22
  if main[index] < 1:
    if main[index] > main[index] + 0.9:
      x = (x + 0.3)
  else:
    if main[index] > opposite[index] + 8:
      x = (x + 0.4)
    else:
      x = (x - 0.001)
  index = 10
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.5:
      x = (x - 0.9)
  else:
    if opposite[index] > opposite[index] + 7:
      x = (x + 0.3)
    else:
      x = (x - 0.1)
  index = 1
  if sum(main[:-index]) < main[index]:
    x = (x + 0.0000001)
  index = 13
  if opposite[index] < main[index]:
    x = (x + 0.5)
  index = 21
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.9)
  index = 6
  if sum(main[:-index]) < sum(main[:-index]):
    x = (x + 0.001)
  index = 7
  if main[index] < 1:
    if main[index] > main[index] + 0.01:
      x = (x + 0.0001)
  else:
    if opposite[index] < opposite[index] + 7:
      x = (x - 0.5)
    else:
      x = (x + 0.6)
  index = 20
  if sum(opposite[-index:]) < opposite[index]:
    x = (x + 0.0001)
  index = 11
  if main[index] < 1:
    if main[index] > main[index] + 0.8:
      x = (x + 0.5)
  else:
    if main[index] > main[index] + 3:
      x = (x + 0.01)
    else:
      x = (x + 0.2)
  index = 1
  if opposite[index] > opposite[index]:
    x = (x - 0.2)
  index = 48
  if opposite[index] < opposite[index]:
    x = (x + 0.1)
  index = 17
  if main[index] < 1:
    if main[index] > opposite[index] + 0.01:
      x = (x - 0.6)
  else:
    if main[index] > main[index] + 3:
      x = (x - 0.01)
    else:
      x = (x - 0.01)
  index = 10
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.2)
  index = 30
  if opposite[index] > opposite[index]:
    x = (x - 0.000001)
  index = 12
  if opposite[index] > main[index]:
    x = (x - 0.0001)
  index = 38
  if main[index] < main[index]:
    x = (x + 0.3)
  index = 18
  if sum(main[-index:]) < sum(main[-index:]):
    x = (x - 0.0000001)
  index = 18
  if main[index] < main[index]:
    x = (x - 0.01)
  index = 3
  if opposite[index] < main[index]:
    x = (x + 0.8)
  index = 23
  if main[index] > sum(opposite[:-index]):
    x = (x + 1.0)
  index = 4
  if opposite[index] < main[index]:
    x = (x - 0.5)
  index = 12
  if sum(main[:-index]) > main[index]:
    x = (x + 0.6)
  index = 0
  if sum(main[-index:]) > opposite[index] - main[index]:
    x = (x - 0.3)
  index = 42
  if sum(main[:-index]) > main[index] - sum(main[-index:]):
    x = (x - 0.7)
  index = 15
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x + 0.9)
  index = 34
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 5000:
    x = (x - 0.3)
  index = 8
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.0001)
  index = 17
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 5000:
    x = (x + 0.1)
  index = 42
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.3)
  index = 39
  if main[index] < opposite[index]:
    x = (x - 0.3)
  index = 16
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.00001)
  index = 39
  if opposite[index] > opposite[index]:
    x = (x - 0.8)
  index = 50
  if opposite[index] < main[index]:
    x = (x + 0.6)
  index = 6
  if main[index] < 1:
    if main[index] < opposite[index] + 0.8:
      x = (x + 0.0001)
  else:
    if main[index] < main[index] + 0:
      x = (x + 0.9)
    else:
      x = (x - 0.01)
  index = 20
  if opposite[index] > opposite[index]:
    x = (x + 1.0)
  index = 14
  if main[index] > opposite[index]:
    x = (x + 0.00001)
  index = 2
  if main[index] + main[index] < main[index] + main[index]:
    x = (x - 0.9)
  index = 12
  if sum(opposite[-index:]) < sum(main[-index:]):
    x = (x - 0.00001)
  index = 35
  if main[index] < 1:
    if opposite[index] < main[index] + 1.0:
      x = (x + 0.9)
  else:
    if main[index] > main[index] + 9:
      x = (x + 0.5)
    else:
      x = (x - 0.8)
  index = 48
  if main[index] > opposite[index]:
    x = (x + 0.7)
  index = 35
  if main[index] > opposite[index]:
    x = (x + 0.001)
  index = 25
  if sum(opposite[-index:]) < sum(main[-index:]):
    x = (x - 0.00001)
  index = 31
  if main[index] + opposite[index] < main[index]:
    x = (x - 0.6)
  index = 48
  if main[index] + opposite[index] - sum(main[-index:]) > sum(opposite[-index:]):
    x = (x + 0.4)
  index = 22
  if sum(main[-index:]) < opposite[index]:
    x = (x + 0.00001)
  index = 9
  if opposite[index] - main[index] - opposite[index] + opposite[index] + main[index] - opposite[index] + opposite[index] < main[index] + opposite[index]:
    x = (x + 0.5)
  index = 18
  if main[index] - opposite[index] > main[index] - opposite[index] - main[index]:
    x = (x + 0.0001)
  index = 8
  if main[index] < 1:
    if main[index] > opposite[index] + 0.7:
      x = (x - 0.6)
  else:
    if main[index] > main[index] + 1:
      x = (x + 0.0000001)
    else:
      x = (x + 0.7)
  index = 9
  if main[index] > sum(opposite[-index:]) - sum(opposite[:-index]):
    x = (x - 0.2)
  index = 20
  if main[index] + main[index] < opposite[index] - opposite[index]:
    x = (x + 0.00001)
  index = 47
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x + 0.0001)
  index = 31
  if opposite[index] < opposite[index]:
    x = (x + 1.0)
  index = 23
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.01)
  index = 24
  if sum(opposite[-index:]) > opposite[index] - opposite[index]:
    x = (x - 1.0)
  index = 7
  if main[index] + opposite[index] + opposite[index] < sum(opposite[-index:]):
    x = (x + 0.001)
  index = 47
  if sum(opposite[-index:]) > sum(opposite[:-index]):
    x = (x - 0.3)
  index = 46
  if main[index] < main[index] - main[index]:
    x = (x - 0.5)
  index = 13
  if main[index] < 1:
    if opposite[index] > main[index] + 0.7:
      x = (x - 0.0000001)
  else:
    if main[index] < main[index] + 8:
      x = (x + 0.000001)
    else:
      x = (x + 1.0)
  index = 38
  if main[index] < main[index]:
    x = (x + 0.0001)
  index = 24
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.9:
      x = (x - 0.000001)
  else:
    if main[index] > opposite[index] + 8:
      x = (x + 0.5)
    else:
      x = (x - 0.3)
  index = 22
  if main[index] < 1:
    if main[index] < opposite[index] + 0.6:
      x = (x + 0.9)
  else:
    if opposite[index] > opposite[index] + 6:
      x = (x + 0.9)
    else:
      x = (x + 0.0001)
  index = 45
  if main[index] < 1:
    if opposite[index] > opposite[index] + 1.0:
      x = (x - 0.0000001)
  else:
    if main[index] > main[index] + 0:
      x = (x + 0.001)
    else:
      x = (x - 0.5)
  index = 26
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x + 0.0000001)
  index = 48
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 100:
    x = (x - 0.7)
  index = 27
  if main[index] - opposite[index] > opposite[index]:
    x = (x - 0.7)
  index = 32
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.9)
  index = 49
  if main[index] < opposite[index]:
    x = (x - 0.0000001)
  index = 33
  if opposite[index] > main[index]:
    x = (x - 0.001)
  index = 9
  if main[index] < opposite[index]:
    x = (x + 0.3)
  index = 16
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.6:
      x = (x - 0.4)
  else:
    if opposite[index] > opposite[index] + 1:
      x = (x + 0.01)
    else:
      x = (x + 0.0001)
  index = 5
  if main[index] < 1:
    if main[index] > main[index] + 1.0:
      x = (x + 0.8)
  else:
    if main[index] < opposite[index] + 6:
      x = (x - 1.0)
    else:
      x = (x + 0.0000001)
  index = 21
  if main[index] > sum(main[:-index]):
    x = (x - 0.001)
  index = 21
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 1000:
    x = (x - 0.6)
  index = 48
  if sum(opposite[:-index]) > sum(main[:-index]):
    x = (x + 0.0000001)
  index = 32
  if sum(main[:-index]) > opposite[index]:
    x = (x + 0.4)
  index = 17
  if main[index] < 1:
    if main[index] > main[index] + 0.3:
      x = (x + 0.01)
  else:
    if main[index] < main[index] + 9:
      x = (x - 0.6)
    else:
      x = (x + 0.6)
  index = 7
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.2)
  index = 23
  if main[index] < 1:
    if main[index] > main[index] + 0.000001:
      x = (x + 1.0)
  else:
    if main[index] > opposite[index] + 6:
      x = (x - 0.2)
    else:
      x = (x + 0.7)
  index = 15
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.8)
  index = 2
  if main[index] > opposite[index]:
    x = (x - 0.2)
  index = 45
  if main[index] < opposite[index]:
    x = (x + 0.4)
  index = 32
  if main[index] < 1:
    if opposite[index] > main[index] + 0.000001:
      x = (x - 0.000001)
  else:
    if main[index] > main[index] + 6:
      x = (x + 0.5)
    else:
      x = (x - 0.8)
  index = 25
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 1.0)
  index = 21
  if main[index] > main[index]:
    x = (x + 0.000001)
  index = 22
  if opposite[index] > opposite[index]:
    x = (x - 0.00001)
  index = 14
  if opposite[index] < opposite[index]:
    x = (x - 0.7)
  index = 42
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 1000:
    x = (x + 0.3)
  index = 29
  if opposite[index] < main[index]:
    x = (x + 0.3)
  index = 33
  if opposite[index] > main[index]:
    x = (x - 0.4)
  index = 37
  if main[index] > main[index]:
    x = (x - 0.3)
  index = 10
  if opposite[index] > sum(opposite[:-index]):
    x = (x - 0.4)
  index = 7
  if main[index] > opposite[index]:
    x = (x - 0.4)
  index = 5
  if opposite[index] < opposite[index]:
    x = (x + 0.7)
  index = 27
  if main[index] < main[index]:
    x = (x - 0.001)
  return x
XXX_output_XXX = p()

Genotype:
[8636, 79901, 73091, 40561, 37183, 841, 73705, 29706, 45716, 50095, 56077, 98493, 71067, 80577, 92755, 1958, 2431, 47821, 69010, 19667, 9295, 57778, 80712, 10565, 42322, 49639, 27017, 57606, 97038, 33061, 36550, 1874, 43816, 77693, 31520, 46712, 36314, 74385, 31932, 5306, 176, 26938, 85081, 90415, 12314, 45022, 16028, 89018, 67584, 18366, 89608, 91182, 65356, 70762, 49462, 61901, 73992, 3800, 96291, 58349, 23125, 23476, 29699, 32392, 90410, 67737, 43783, 99331, 14788, 7084, 94642, 99996, 30233, 89488, 78271, 9990, 94619, 85432, 34060, 74504, 97391, 21091, 33382, 64179, 45860, 9899, 22619, 91959, 2316, 90651, 71318, 48883, 53105, 2233, 7687, 92878, 31965, 741, 56635, 40549, 62355, 88792, 54814, 17598, 79356, 30358, 45334, 59484, 93258, 83705, 26309, 46885, 78160, 82965, 62799, 88799, 72357, 58628, 43546, 78670, 64899, 65432, 37276, 26835, 22487, 76349, 37885, 32516, 9790, 93003, 80239, 55674, 86993, 60229, 88547, 94096, 22522, 58238, 99794, 32363, 56132, 75178, 1038, 84983, 93680, 99544, 19044, 23660, 7796, 3220, 23923, 11342, 28429, 24816, 88916, 16304, 81069, 62874, 74262, 47818, 22987, 4581, 78140, 72504, 5008, 75884, 69028, 9911, 41018, 3312, 10637, 2860, 44801, 11947, 38149, 32871, 94623, 22862, 92412, 39282, 12115, 44836, 55728, 99986, 77779, 46046, 21008, 50867, 22812, 45168, 29250, 93439, 1048, 74779, 57262, 94890, 63445, 51381, 64354, 8243, 92367, 25807, 80037, 95045, 42916, 42292, 28062, 38624, 25528, 3035, 91604, 60895, 50355, 2392, 40761, 53980, 62266, 56981, 3912, 67768, 92037, 18437, 22626, 45747, 40384, 27165, 19796, 24748, 98245, 61104, 71700, 89665, 31008, 16292, 94700, 67703, 93888, 87935, 11833, 42852, 16354, 19525, 16943, 33617, 63396, 4608, 71506, 89568, 27486, 1240, 61374, 82330, 12870, 4864, 87860, 61558, 56754, 86711, 70960, 70821, 79339, 23851, 28995, 48344, 52216, 37545, 58035, 93739, 21296, 34844, 56020, 85844, 49917, 79440, 9157, 97875, 43908, 83154, 55125, 16487, 44323, 70475, 76327, 81830, 21851, 91344, 83689, 43379, 40532, 28886, 30120, 11538, 95381, 96476, 69570, 8238, 69219, 71075, 13509, 80210, 11653, 29387, 92696, 96625, 32289, 51402, 38843, 61488, 13231, 96145, 95769, 4021, 43766, 27114, 9292, 43200, 17812, 33582, 30590, 17696, 11791, 75986, 25577, 70282, 90833, 94773, 48082, 45370, 27565, 29269, 70405, 78141, 27758, 98064, 51126, 90211, 23706, 71746, 9993, 96229, 50387, 41283, 45498, 43469, 26761, 48518, 6106, 13704, 14058, 41726, 30775, 46763, 47993, 72306, 20429, 68190, 19908, 25900, 9281, 20143, 41296, 64295, 5988, 18541, 74453, 87093, 18188, 89844, 20691, 98293, 37844, 72027, 30902, 52771, 84465, 57596, 68806, 24541, 55315, 22608, 1909, 58767, 85916, 18617, 25248, 31176, 41097, 96862, 75480, 13077, 47875, 52294, 63452, 343, 46364, 87223, 66899, 6375, 15123, 92277, 90130, 18777, 9713, 77279, 62814, 79770, 98472, 21364, 17604, 896, 37710, 44992, 41141, 52688, 82808, 90745, 4482, 52882, 23438, 42190, 94496, 77007, 82546, 70793, 32484, 39688, 87794, 4229, 19907, 12472, 94270, 66556, 92858, 35261, 39590, 88523, 71630, 68856, 95653, 61142, 59684, 4494, 31823, 79456, 28579, 43149, 12155, 82077, 16487, 34480, 79258, 247, 51453, 73779, 98229, 1011, 61805, 10945, 90712, 56924, 96322, 70851, 19675, 51365, 3598, 98989, 34484, 69639, 45926, 40614, 95314, 84638, 61439, 93582, 26776, 92212, 36451, 56105, 46403, 82970, 37520, 5879, 31284, 68662, 82110, 73288, 28543, 15994, 54610, 96861, 7054, 90268, 97653, 83014, 73082, 99813, 77883, 95550, 14028, 31010, 11479, 52377, 29893, 96874, 95246, 19196, 72314, 2835, 12963, 34448, 62143, 94315, 66957, 71238, 51282, 80036, 39805, 73831, 15207, 67657, 11521, 62558, 57751, 64851, 80018, 92874, 17709, 53656, 99984, 683, 79123, 68244, 17819, 66934, 57037, 24086, 22474, 3133, 85019, 23567, 68596, 54792, 89294, 80971, 79797, 86933, 45335, 95030, 94680, 53084, 56731, 19210, 75464, 3512, 18408, 40460, 51819, 29436, 97682, 85200, 39552, 61039, 38291, 70088, 90143, 71493, 9009, 11538, 35630, 19701, 63824, 66052, 26872, 80549, 45816, 57963, 88202, 8803, 35341, 66606, 2352, 8649, 39773, 72757, 1956, 89368, 81219, 48039, 71381, 17141, 16116, 53560, 4608, 40024, 91202, 2034, 40541, 13907, 62057, 85918, 68922, 6020, 23089, 49467, 83717, 62599, 41599, 96668, 43392, 92176, 85855, 90363, 86168, 59772, 84999, 65660, 54792, 4489, 85156, 25382, 50300, 21573, 83920, 59545, 2827, 23287, 45340, 32518, 50224, 74982, 2589, 6469, 62317, 51183, 27585, 65505, 35206, 82364, 65856, 36214, 69787, 19433, 91333, 20134, 97724, 87239, 38734, 19054, 79400, 76926, 73907, 79900, 29234, 37119, 73883, 44492, 50656, 13770, 88288, 94741, 68448, 9261, 24556, 79790, 72407, 78920, 25454, 98412, 22308, 69498, 24345, 16827, 37652, 18564, 95923, 54372, 91702, 56314, 75729, 31988, 66870, 13556, 98450, 38469, 64873, 75828, 11311, 34313, 32406, 5997, 66011, 37572, 75700, 54677, 4398, 40209, 8861, 58887, 80767, 93451, 44883, 9515, 98673, 58138, 38721, 11978, 4962, 63400, 49652, 92204, 20628, 3797, 61822, 24481, 39369, 38839, 58978, 5598, 42147, 63133, 81722, 58250, 53295, 9732, 96803, 32972, 38868, 87106, 14681, 38469, 30703, 74974, 20366, 58048, 75640, 18564, 29956, 56126, 20275, 2150, 28614, 64273, 65077, 87951, 36770, 94534, 9473, 52324, 32733, 66247, 19741, 56489, 81523, 22045, 74864, 25064, 76369, 29126, 99911, 57503, 66045, 29583, 34384, 19496, 1532, 82400, 84790, 75173, 35401, 66983, 90026, 66724, 31951, 88258, 30657, 99163, 20272, 51751, 75244, 43117, 31193, 68630, 55987, 14755, 49579, 97065, 97053, 24271, 70804, 54216, 18487, 13533, 98688, 74089, 16743, 62125, 43284, 10357, 91789, 91894, 51918, 66076, 28091, 81108, 14037, 88808, 43525, 49876, 62504, 48517, 172, 87963, 65790, 4934, 11766, 34903, 16478, 73368, 16720, 2608, 18130, 2165, 12750, 30696, 92968, 77472, 97852, 75970, 83332, 16993, 92956, 19221, 13678, 52213, 48221, 19990, 66782, 61570, 2500, 33567, 82198, 28512, 47917, 68681, 99629, 4068, 64491, 32106, 18780, 4457, 25507, 42570, 47531, 25753, 57043, 92113, 98813, 39991, 47313, 48964, 78846, 54803, 99572, 45333, 28035, 50277, 82908, 76519, 5695, 40509, 26113, 93812, 68147, 55849, 61488, 59458, 50294, 26916, 30230, 95775, 3580, 99816, 54489, 23634, 52888, 44111, 42400, 40424, 29403, 19722, 78439, 84944, 76895, 28086, 36092, 89138, 36640, 75872, 5270, 35371, 59472, 1928, 88432, 35861, 60976, 84471, 42961, 90913, 10005, 56106, 20666, 30555, 67551, 71773, 25491, 18330, 38075, 30955, 34987, 63132, 61456, 57556, 37443, 77680, 2979, 86601, 94211, 17535, 79969, 80286, 8076, 83278, 37047, 1904, 68602, 94063, 44852, 80982, 46083, 82879, 81378, 64079, 9016, 23465, 7640, 38982, 28455, 48309, 21374, 66327, 94523, 97062, 35224, 60938, 11266, 98224, 76728, 80327, 43430, 28999, 68697, 96162, 52951, 6834, 87626, 75777, 84707, 58844, 95019, 15077, 25648, 46881, 29568, 1163, 68450, 94248, 73973, 61546, 83147, 59136, 9438, 50596, 98195, 43765, 7277, 79501, 45551, 50946, 76391, 57468, 52007, 81682, 45541, 55723, 49707, 7723, 60417, 80890, 48472, 51211, 3236, 50471, 44479, 2410, 88447, 15654, 30886, 22392, 80415, 9412, 37958, 66322, 32251, 50264, 42928, 15095, 89117, 39718, 39043, 24168, 53063, 64060, 11347, 40345, 26419, 58381, 16342, 74376, 29892, 97464, 85282, 91238, 81242, 90741, 68736, 25514, 28555, 34668, 97791, 71064, 72468, 92221, 65698, 99829, 67354, 31734, 60385, 46848, 76422, 46112, 50359, 30732, 10603, 10399, 54386, 94641, 89031, 71158, 3161, 70484, 49649, 44875, 65849, 52626, 18448, 62782, 22936, 19805, 66789, 27793, 45538, 83244, 4471, 93705, 20172, 41453, 91841, 2137, 64890, 83117, 80515, 95477, 93588, 61860, 66501, 63330, 88300, 16534, 57949, 66208, 82314, 40192, 5741, 5176, 18187, 12945, 36798, 39959, 54389, 45141, 54111, 69161, 19352, 53960, 98573, 46158, 46431, 16072, 76033, 37114, 26306, 22873, 2989, 74181, 45169, 85742, 9712, 79552, 8379, 43740, 15110, 62974, 14804, 10622, 18932, 72797, 94665, 87018, 86446, 67622, 53206, 63671, 58084, 25530, 42494, 25092, 92366, 90002, 16232, 99608, 44881, 92030, 33556, 30346, 65542, 37388, 38635, 99946, 16811, 47724, 30926, 94842, 28859, 27095, 49909, 91666, 38986, 93874, 35707, 5653, 79472, 63261, 4759, 28546, 67257, 97720, 90431, 8106, 61439, 377, 29375, 35686, 44703, 76621, 78520, 90680, 34226, 13784, 14060, 8887, 49391, 72668, 79474, 48177, 40607, 23566, 2235, 85464, 69327, 10357, 44098, 53466, 71080, 64169, 42095, 15997, 91816, 72557, 79052, 60361, 34568, 7093, 84381, 3370, 9473, 58454, 68891, 1927, 42705, 88628, 4219, 71102, 14881, 65837, 47048, 26068, 84281, 17368, 65348, 19412, 96355, 76336, 21933, 75341, 24356, 41067, 77845, 16434, 28374, 27714, 30288, 96663, 14098, 76231, 84802, 90808, 32764, 90618, 90057, 58886, 59149, 11925, 97320, 24576, 68240, 75923, 6137, 45552, 75678, 90402, 66341, 76849, 72364, 66847, 10578, 5441, 96081, 76543, 71252, 56656, 73198, 40686, 832, 74963, 28568, 93284, 30712, 16844, 12278, 67282, 41243, 54055, 97294, 89467, 48736, 50745, 60034, 94004, 23121, 92157, 4275, 87441, 82136, 49169, 22903, 41325, 27421, 3943, 9887, 77515, 25076, 78446, 52129, 29258, 50067, 95949, 44006, 23260, 25693, 84469, 73985, 13296, 1948, 6917, 67621, 12802, 41345, 90070, 37300, 62467, 23962, 42822, 46458, 24561, 47681, 19881, 79894, 21698, 87232, 23102, 82497, 87493, 84654, 25669, 61116, 54585, 55738, 26016, 4312, 94205, 21301, 98473, 28351, 75526, 74166, 24314, 71553, 95952, 61083, 83365, 3084, 80622, 84630, 42332, 2476, 16872, 39561, 69457, 79090, 84259, 78757, 48309, 79367, 25510, 41290, 49126, 25040, 23794, 76232, 33325, 63967, 15508, 92566, 45221, 47089, 24534, 65100, 5380, 62854, 38822, 8622, 90525, 13076, 19346, 96784, 40314, 66149, 17235, 76698, 2074, 83892, 18417, 91482, 12258, 8759, 66520, 90106, 72286, 80266, 78747, 21031, 82907, 2422, 94012, 23227, 92104, 65729, 20229, 95209, 74788, 17509, 84026, 98697, 85108, 28937, 87785, 95081, 31289, 43025, 556, 88888, 11421, 18179, 41921, 45174, 99227, 80576, 79532, 25006, 24600, 41635, 14748, 47721, 97950, 42863, 32152, 64988, 17965, 85292, 91671, 67724, 91945, 72893, 3930, 53927, 24053, 35848, 87679, 36643, 84900, 58598, 20884, 76390, 31923, 64922, 81469, 19652, 79502, 87832, 43983, 25446, 64035, 16690, 17084, 63060, 22459, 36346, 38526, 58626, 38466, 52739, 14247, 75055, 38267, 19617, 55503, 41203, 72621, 8912, 39321, 84948, 27973, 30367, 42678, 36750, 72808, 64216, 71590, 18375, 29399, 26889, 86920, 14165, 10995, 17017, 59581, 50308, 39733, 74209, 23911, 32863, 52534, 6878, 66959, 46327, 76448, 47212, 83487, 79815, 88576, 97388, 98874, 30796, 16258, 59111, 16959, 2770, 38959, 34732, 77377, 31422, 53636, 13348, 96809, 75442, 31961, 72186, 77819, 61600, 98033, 44815, 4483, 36994, 37123, 46454, 76736, 51628, 30469, 61372, 80367, 20944, 3382, 97952, 33233, 63547, 703, 7734, 36514, 7792, 11602, 53440, 62632, 30940, 31648, 47278, 85023, 39866, 56083, 95912, 39939, 55459, 91618, 91014, 74434, 1450, 80227, 80654, 76040, 4243, 2945, 30532, 87429, 8074, 87113, 95851, 84189, 45105, 84226, 61275, 69835, 21496, 25834, 59505, 83326, 76112, 48979, 25191, 50664, 84482, 9584, 28696, 17554, 51463, 80110, 9871, 27216, 68032, 35507, 8829, 89362, 1280, 45508, 55056, 79606, 93444, 37497, 23226, 15222, 16217, 31922, 36596, 52912, 18639, 88837, 57157, 16073, 98674, 71084, 87205, 88188, 63687, 96873, 65221, 10819, 70812, 42704, 78796, 96495, 94732, 4967, 54321, 10441, 45813, 11566, 36509, 39865, 18766, 14508, 87092, 82491, 91786, 34168, 3211, 51074, 78370, 89998, 99711, 90166, 83613, 53230, 98605, 32370, 16690, 99036, 56407, 87537, 85402, 39418, 48540, 79407, 54558, 95211, 21427, 6261, 13828, 15148, 2350, 39087, 29831, 42993, 54405, 69768, 21790, 60344, 82009, 62861, 68630, 22798, 99625, 83026, 89110, 10331, 68425, 87789, 85048, 99527, 98053, 4581, 65292, 61642, 89483, 7321, 98789, 81934, 81581, 17110, 34365, 95822, 53474, 23929, 18358, 17634, 48132, 19212, 82010, 1699, 30448, 36641, 88651, 75457, 39990, 68288, 33124, 79059, 70981, 8075, 1527, 20724, 62600, 467, 50869, 52581, 35273, 88144, 41580, 58756, 96514, 71240, 24553, 34381, 61248, 41635, 44292, 59864, 49461, 26781, 94229, 69554, 77139, 89455, 76535, 7583, 46005, 62726, 80605, 26032, 55657, 15683, 21731, 23885, 16357, 37346, 59914, 44910, 15653, 79664, 98032, 65508, 95783, 90876, 15717, 62558, 61552, 95091, 20065, 22133, 64555, 36141, 89775, 44465, 85838, 24173, 46620, 96674, 53999, 88919, 34018, 72937, 75885, 64256, 95983, 96223, 34166, 36376, 86476, 72081, 55920, 99618, 69770, 45228, 86484, 71929, 86179, 9653, 95, 78225, 4702, 17307, 53601, 45240, 62202, 96123, 24465, 18935, 77130, 65285, 29011, 51733, 54507, 45871, 55710, 58168, 84067, 80399, 31038, 68771, 77840, 69422, 87048, 29216, 39493, 21893, 60364, 4579, 55221, 98654, 70354, 81950, 70118, 62922, 43701, 51961, 50393, 48972, 43251, 98378, 17918, 83276, 71596, 4827, 72606, 43226, 73310, 11687, 34720, 62583, 46712, 8343, 25036, 22149, 23608, 29615, 20331, 28769, 13902, 36219, 97171, 88596, 70233, 83504, 39785, 78524, 9469, 3835, 85289, 33433, 55042, 60924, 65138, 36089, 95454, 79067, 37417, 76956, 44196, 7419, 72835, 38900, 78611, 15384, 86095, 4984, 81976, 39228, 80223, 44798, 89320, 53842, 48102, 45826, 34457, 2547, 72847, 4118, 91020, 31278, 8946, 23999, 57165, 74615, 5617, 9643, 56394, 60964, 77874, 24403, 15847, 49470, 21313, 85291, 89689, 76064, 17481, 42408, 47093, 55333, 13517, 14073, 46330, 31914, 82854, 95420, 77939, 322, 63688, 94829, 81008, 14215, 89624, 53707, 31365, 24388, 77078, 51533, 78573, 16127, 47357, 64336, 56221, 34919, 38006, 38694, 95331, 89356, 99419, 27203, 34748, 37317, 66426, 21671, 91258, 88707, 22576, 78732, 30521, 41345, 83977, 42427, 62574, 49441, 45141, 65102, 8399, 50372, 23470, 70879, 76175, 7146, 11663, 29376, 89264, 67935, 8172, 88799, 16376, 61183, 68342, 99478, 80488, 32697, 54097, 46969, 93054, 97471, 64382, 58969, 12823, 97799, 83606, 2689, 31558, 3184, 64292, 22182, 1665, 18190, 97520, 21042, 8140, 41870, 42780, 28972, 47631, 85807, 35843, 7353, 60804, 30727, 36574, 81744, 67058, 38995, 71019, 48230, 89294, 6539, 28290, 1755, 20998, 86815, 96177, 43640, 30293, 49356, 67887, 10553, 39856, 934, 72384, 37041, 64441, 3131, 29632, 68514, 32297, 74578, 75729, 88141, 81586, 71945, 42666, 30421, 52100, 43647, 90612, 29889, 92621, 96219, 5266, 42118, 57957, 62151, 92739, 52540, 63784, 62704, 5615, 23229, 75723, 59230, 57010, 34555, 37044, 61728, 2903, 39519, 30905, 4181, 97706, 47400, 96327, 18826, 19332, 81287, 80318, 13418, 3676, 87818, 35380, 65627, 7795, 88316, 7855, 53918, 42357, 4931, 61259, 56023, 32930, 89095, 6917, 85422, 99962, 50914, 55685, 79247, 88307, 19482, 67839, 40849, 73198, 93341, 55004, 39143, 8232, 34166, 81592, 32688, 31084, 49853, 93063, 28545, 82194, 88482, 3624, 69867, 4112, 52596, 30829, 51375, 65049, 9513, 40953, 87906, 55479, 93197, 90348, 79224, 180, 51817, 31870, 6884, 53611, 84196, 83463, 60327, 67231, 36564, 61653, 13438, 89946, 21173, 57594, 34908, 86380, 51310, 51503, 58009, 71318, 72360, 69085, 19693, 40801, 28215, 66044, 88007, 21280, 98487, 52326, 41649, 40830, 75228, 37472, 6469, 66124, 26374, 59969, 4656, 91720, 97174, 38374, 88637, 6958, 90666, 99699, 99254, 15704, 57628, 62192, 14073, 52452, 58103, 72193, 82864, 52737, 81339, 87883, 64465, 24190, 71706, 60283, 54303, 61488, 98539, 82544, 51876, 87877, 53135, 11962, 36221, 59262, 20642, 72544, 88266, 82262, 13635, 25889, 45876, 52162, 58623, 12497, 92342, 63801, 7344, 70247, 49560, 3034, 7389, 49659, 35517, 19944, 6174, 1666, 21438, 66670, 15804, 28077, 29488, 78924, 99453, 90288, 77784, 19079, 31822, 19178, 65624, 76203, 57041, 11386, 60720, 9858, 47375, 96961, 90937, 37297, 93490, 74496, 19863, 30431, 11617, 87152, 85470, 84920, 40165, 15035, 24299, 90770, 58645, 487, 51764, 97532, 5541, 12402, 20260, 76823, 82064, 5123, 34547, 77331, 30765, 90582, 75137, 29394, 93509, 76882, 13203, 6251, 45856, 90580, 25931, 69536, 88042, 89347, 81180, 10343, 54778, 86104, 55918, 81990, 95971, 77957, 63231, 28072, 22539, 35122, 23190, 65573, 76082, 69975, 10199, 63552, 45795, 96933, 12546, 34424, 19102, 66806, 54189, 87267, 60987, 15653, 75424, 72722, 38737, 8911, 95243, 64175, 2602, 54422, 2788, 69006, 39866, 25092, 81587, 71070, 95883, 37729, 97648, 90312, 36914, 59802, 35301, 82731, 59155, 283, 1301, 70887, 55606, 56160, 95684, 26918, 61450, 52213, 87444, 16209, 78288, 27140, 76172, 82390, 70815, 74452, 70346, 77883, 76802, 17919, 12105, 16987, 23907, 93578, 16130, 99553, 85231, 49493, 89723, 10986, 63319, 1075, 41542, 76448, 72232, 14606, 51979, 69917, 34066, 50392, 80511, 87338, 48043, 58581, 19842, 68451, 37861, 84640, 24078, 28354, 22800, 16509, 83398, 37611, 89900, 72802, 42295, 8024, 49057, 77433, 41733, 73565, 46546, 95589, 71575, 21630, 66365, 3228, 77291, 40445, 46312, 87341, 20308, 87250, 64961, 42609, 47627, 89519, 51400, 51611, 56863, 70762, 84877, 58287, 18604, 89173, 38536, 47161, 24005, 45577, 50393, 39857, 38201, 8507, 5860, 49058, 8644, 14354, 97066, 73993, 30271, 69248, 17706, 42178, 49649, 70612, 79435, 61672, 97612, 78160, 51200, 25817, 24532, 77854, 50688, 73250, 11071, 66669, 74815, 75329, 79668, 87308, 25318, 5333, 1632, 89869, 21126, 97508, 93669, 66581, 37133, 89182, 21587, 50214, 9846, 13581, 55709, 40146, 13674, 69112, 99488, 70022, 40204, 99679, 25495, 83666, 54090, 26918, 56197, 38548, 41530, 58874, 46937, 76570, 61012, 89520, 496, 75633, 19332, 93593, 45333, 80755, 17770, 66892, 96790, 23196, 36486, 21696, 72630, 59720, 41609, 95072, 527, 21593, 51588, 60046, 92023, 57304, 56997, 73803, 25038, 68753, 71347, 19041, 36704, 1293, 28332, 46536, 15176, 49642, 82263, 48456, 57647, 84739, 29068, 39673, 77766, 39776, 54542, 2547, 32392, 13263, 71115, 35538, 49376, 14885, 52579, 68252, 67616, 97821, 61735, 48018, 6737, 32095, 78218, 35553, 4214, 77143, 27481, 51522, 38693, 35360, 9285, 80263, 38665, 94067, 90859, 33227, 24252, 65328, 29332, 30141, 6547, 43637, 56422]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index])))))))))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})))))) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))))) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))))))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})))))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})))))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}))))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})))))))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9722991689750693, 0.9861495844875346]