Generation:
0

Phenotype:
def p():
  x = 0.0
  index = 14
  if main[index] - sum(main[-index:]) - sum(main[:-index]) > opposite[index] + opposite[index] + main[index] + sum(main[:-index]) + sum(opposite[-index:]) - opposite[index]:
    x = (x + 0.1)
  index = 16
  if sum(opposite[-index:]) + opposite[index] - main[index] - main[index] + opposite[index] - opposite[index] + main[index] < sum(opposite[-index:]) + sum(opposite[:-index]) - opposite[index] + sum(main[-index:]) + sum(opposite[-index:]):
    x = (x - 0.01)
  index = 22
  if opposite[index] + opposite[index] + opposite[index] + main[index] - opposite[index] + sum(opposite[-index:]) - sum(main[:-index]) + opposite[index] + opposite[index] < opposite[index] + sum(main[-index:]) + sum(main[:-index]) - opposite[index] + main[index] - opposite[index] - opposite[index]:
    x = (x - 0.0000001)
  index = 48
  if main[index] - sum(opposite[-index:]) + sum(main[:-index]) > sum(opposite[-index:]) + main[index] + main[index] + main[index] - main[index]:
    x = (x - 0.4)
  index = 43
  if sum(main[:-index]) - sum(opposite[-index:]) < opposite[index] + opposite[index] + main[index] + opposite[index] + opposite[index] - main[index]:
    x = (x + 0.8)
  index = 22
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 500:
    x = (x - 0.7)
  index = 11
  if sum(main[:-index]) + main[index] + opposite[index] + opposite[index] - sum(opposite[-index:]) < sum(opposite[:-index]) - opposite[index] - opposite[index] + opposite[index] + opposite[index] + opposite[index]:
    x = (x + 0.3)
  return x
XXX_output_XXX = p()

Genotype:
[5977, 3918, 58371, 38402, 75600, 3305, 55324, 43617, 12715, 41333, 72989, 21941, 22565, 69110, 30164, 32061, 92899, 35583, 39613, 98609, 5153, 31118, 29606, 38861, 34866, 58612, 74277, 3569, 6479, 12945, 69977, 96364, 77725, 70109, 68755, 56660, 7366, 85442, 49532, 40811, 22998, 60269, 94883, 72935, 54599, 96953, 50368, 50774, 45659, 19659, 21581, 67265, 40703, 99549, 71627, 45862, 22109, 80916, 82746, 64205, 27156, 28757, 27584, 68676, 51305, 45631, 23852, 51835, 5807, 27287, 51147, 32913, 58514, 99332, 58872, 42502, 81782, 8550, 69846, 52985, 24338, 60002, 75559, 63710, 13431, 34288, 23935, 86448, 46394, 13274, 73463, 2686, 38058, 27391, 96048, 11826, 49811, 58382, 8446, 18820, 93061, 41870, 62051, 57983, 56474, 19867, 96790, 56197, 73265, 76709, 44328, 1675, 74342, 81768, 77846, 93599, 36916, 51417, 94313, 4411, 51941, 14509, 40576, 69749, 1631, 84042, 60668, 1746, 73364, 66922, 8914, 71737, 6571, 44666, 99344, 54596, 93358, 16296, 66856, 1542, 64270, 924, 1039, 66733, 61085, 53780, 17982, 89846, 28871, 51717, 6912, 90227, 24576, 45666, 78039, 74701, 50593, 84375, 36102, 50898, 79747, 27732, 51583, 75936, 83603, 50365, 96349, 48723, 246, 33548, 98615, 66381, 38938, 61045, 79332, 86137, 87122, 73334, 91565, 37275, 3679, 69912, 88078, 30225, 52290, 17626, 59591, 23986, 83026, 12540, 29822, 48512, 88773, 32669, 12590, 26904, 20010, 82634, 33142, 59534, 38033, 60612, 18942, 1042, 6939, 26392, 65992, 38176, 48423, 85571, 36034, 20542, 4255, 19799, 12464, 45215, 58273, 5748, 81559, 58361, 88017, 17348, 43999, 72969, 96953, 22311, 47736, 49330, 26141, 35471, 34731, 50420, 37191, 73576, 87966, 9561, 64486, 53675, 96759, 73465, 6620, 93021, 73452, 26340, 82697, 79818, 39, 3842, 4553, 60593, 3375, 8332, 57136, 66389, 19973, 45583, 39036, 70533, 10585, 52876, 9453, 47917, 57276, 93065, 2091, 44022, 31791, 17378, 1051, 62565, 98579, 56104, 26162, 92373, 41094, 72938, 23577, 39677, 2988, 75, 24415, 55581, 21049, 459, 63456, 95309, 22787, 79795, 349, 41206, 4876, 35111, 75408, 41731, 16265, 54380, 61883, 78085, 61168, 84210, 74910, 87364, 15981, 79137, 48022, 54514, 66392, 56884, 66883, 93344, 3818, 15913, 5443, 57478, 93860, 62016, 1182, 25432, 1222, 42756, 33910, 50207, 57808, 66857, 76849, 38410, 42770, 30482, 73314, 84109, 44705, 79639, 3937, 52819, 49292, 13824, 17700, 37045, 71716, 22871, 87853, 2683, 99144, 65473, 89100, 4319, 14576, 23301, 43073, 65606, 98569, 35285, 18743, 73429, 82243, 13591, 70813, 12522, 63784, 64601, 35678, 25864, 2286, 85943, 7360, 68771, 85755, 24876, 56131, 81921, 52110, 19729, 55615, 56145, 3589, 38816, 15603, 65495, 39658, 70231, 20178, 85252, 47353, 55061, 52536, 86557, 38836, 17930, 95047, 39824, 33677, 96363, 18595, 35560, 92128, 79834, 49174, 90981, 91532, 13343, 615, 15833, 30120, 79973, 92347, 88252, 22415, 17325, 81928, 61702, 28311, 79784, 5501, 7213, 53273, 69796, 17270, 93450, 34903, 80860, 59983, 74443, 89457, 39848, 37482, 10311, 24487, 83661, 10088, 76073, 35929, 65548, 58713, 46864, 54533, 23857, 39259, 11480, 5477, 14341, 55659, 72712, 66679, 10042, 60038, 38842, 1631, 7127, 32908, 58228, 58387, 35711, 72322, 7225, 72838, 44528, 1430, 61124, 24425, 73233, 70453, 64961, 13059, 31420, 82045, 90213, 56722, 44589, 68925, 44534, 38407, 40794, 53793, 55136, 44037, 92872, 74183, 63247, 96695, 10404, 65498, 65193, 31151, 26810, 79510, 37738, 80165, 69636, 56044, 3742, 18896, 58407, 64037, 19796, 70325, 62540, 93198, 94667, 53450, 25537, 43824, 87117, 54898, 5734, 60222, 71201, 20956, 99257, 97386, 59238, 27329, 57210, 54407, 58812, 56336, 36930, 76988, 8254, 52609, 43037, 39554, 81869, 90763, 8969, 39284, 49887, 67491, 88654, 50484, 29854, 5529, 48248, 6381, 5714, 75652, 82378, 62369, 14218, 9364, 14222]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))))))))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9968037502663541, 0.5486047148897694]