Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 31
  if opposite[index] - main[index] > sum(opposite[-index:]) + main[index]:
    x = (x - 0.2)
  index = 46
  if sum(main[:-index]) + sum(main[:-index]) > opposite[index] + main[index] + main[index] + opposite[index]:
    x = (x + 1.0)
  index = 43
  if main[index] - sum(opposite[-index:]) - opposite[index] > opposite[index]:
    x = (x + 0.7)
  index = 3
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.0000001)
  index = 44
  if main[index] < 1:
    if main[index] > opposite[index] + 0.7:
      x = (x + 0.9)
  else:
    if main[index] < main[index] + 9:
      x = (x + 0.0000001)
    else:
      x = (x - 0.2)
  index = 47
  if main[index] < 1:
    if opposite[index] > main[index] + 1.0:
      x = (x + 0.0001)
  else:
    if opposite[index] > opposite[index] + 5:
      x = (x + 0.001)
    else:
      x = (x + 1.0)
  index = 35
  if opposite[index] - opposite[index] < opposite[index] - opposite[index]:
    x = (x - 0.2)
  index = 30
  if main[index] < 1:
    if main[index] > opposite[index] + 0.3:
      x = (x + 0.0000001)
  else:
    if opposite[index] > opposite[index] + 5:
      x = (x - 0.6)
    else:
      x = (x + 0.01)
  index = 16
  if opposite[index] > main[index]:
    x = (x + 1.0)
  index = 29
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.4)
  index = 36
  if main[index] > main[index]:
    x = (x - 0.000001)
  index = 41
  if opposite[index] - opposite[index] > sum(opposite[-index:]):
    x = (x - 0.9)
  index = 42
  if opposite[index] > sum(main[:-index]):
    x = (x - 1.0)
  index = 15
  if opposite[index] < opposite[index]:
    x = (x - 0.01)
  index = 13
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 5000:
    x = (x + 0.0000001)
  index = 0
  if main[index] > opposite[index]:
    x = (x + 0.0001)
  index = 30
  if main[index] > opposite[index]:
    x = (x + 0.6)
  index = 31
  if opposite[index] < opposite[index]:
    x = (x + 0.001)
  index = 6
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.8:
      x = (x - 0.7)
  else:
    if opposite[index] > opposite[index] + 9:
      x = (x + 0.00001)
    else:
      x = (x - 0.9)
  index = 6
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 500:
    x = (x - 0.8)
  index = 3
  if opposite[index] > opposite[index]:
    x = (x + 0.8)
  index = 1
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.8)
  index = 27
  if main[index] < 1:
    if main[index] > main[index] + 0.0000001:
      x = (x - 0.0001)
  else:
    if main[index] > opposite[index] + 1:
      x = (x + 0.9)
    else:
      x = (x + 0.5)
  index = 33
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x + 0.001)
  index = 3
  if opposite[index] > main[index]:
    x = (x - 0.000001)
  index = 10
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x - 0.5)
  index = 33
  if opposite[index] > main[index]:
    x = (x - 0.0000001)
  index = 6
  if main[index] > opposite[index]:
    x = (x - 0.01)
  index = 20
  if main[index] < 1:
    if opposite[index] < opposite[index] + 1.0:
      x = (x + 0.0001)
  else:
    if main[index] > opposite[index] + 5:
      x = (x + 0.3)
    else:
      x = (x + 0.0000001)
  index = 45
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x - 0.8)
  index = 45
  if main[index] < 1:
    if main[index] < opposite[index] + 0.001:
      x = (x + 0.001)
  else:
    if main[index] < opposite[index] + 2:
      x = (x + 0.3)
    else:
      x = (x + 0.6)
  index = 0
  if main[index] > opposite[index]:
    x = (x + 0.1)
  index = 42
  if main[index] > opposite[index]:
    x = (x + 0.4)
  index = 47
  if main[index] < 1:
    if main[index] > main[index] + 0.001:
      x = (x + 0.5)
  else:
    if opposite[index] < main[index] + 4:
      x = (x - 0.9)
    else:
      x = (x + 0.8)
  index = 8
  if main[index] > opposite[index]:
    x = (x + 0.4)
  index = 0
  if main[index] > opposite[index]:
    x = (x - 0.7)
  index = 46
  if main[index] < main[index]:
    x = (x + 0.01)
  index = 26
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 1000:
    x = (x + 0.3)
  index = 2
  if main[index] + main[index] < main[index]:
    x = (x - 0.000001)
  index = 22
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 5000:
    x = (x - 0.2)
  index = 27
  if main[index] < 1:
    if opposite[index] < main[index] + 0.0001:
      x = (x + 0.1)
  else:
    if opposite[index] < main[index] + 8:
      x = (x - 0.5)
    else:
      x = (x - 0.5)
  index = 20
  if opposite[index] > main[index]:
    x = (x - 1.0)
  index = 15
  if main[index] < 1:
    if main[index] > main[index] + 0.00001:
      x = (x + 0.01)
  else:
    if main[index] < main[index] + 3:
      x = (x - 0.2)
    else:
      x = (x + 0.001)
  index = 43
  if opposite[index] > opposite[index]:
    x = (x + 0.6)
  index = 23
  if opposite[index] < opposite[index]:
    x = (x + 1.0)
  index = 40
  if main[index] < main[index]:
    x = (x - 0.0000001)
  index = 4
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.1)
  index = 1
  if main[index] < main[index]:
    x = (x + 0.0001)
  index = 27
  if opposite[index] < sum(opposite[-index:]):
    x = (x + 1.0)
  index = 16
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x + 1.0)
  index = 5
  if main[index] > main[index]:
    x = (x - 0.8)
  index = 17
  if main[index] < 1:
    if opposite[index] < main[index] + 0.4:
      x = (x + 0.5)
  else:
    if main[index] > opposite[index] + 6:
      x = (x - 0.5)
    else:
      x = (x + 0.0000001)
  index = 43
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 1000:
    x = (x + 0.0000001)
  index = 3
  if main[index] < 1:
    if main[index] < main[index] + 0.0001:
      x = (x - 0.5)
  else:
    if main[index] < main[index] + 7:
      x = (x - 0.00001)
    else:
      x = (x + 0.7)
  index = 44
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.5)
  index = 31
  if main[index] < 1:
    if main[index] > opposite[index] + 0.2:
      x = (x - 0.001)
  else:
    if opposite[index] > main[index] + 4:
      x = (x + 0.7)
    else:
      x = (x + 0.4)
  index = 42
  if main[index] > main[index]:
    x = (x - 0.00001)
  index = 31
  if sum(main[-index:]) > sum(opposite[-index:]):
    x = (x + 0.7)
  index = 0
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.6)
  index = 8
  if opposite[index] > opposite[index]:
    x = (x + 0.8)
  index = 15
  if sum(main[-index:]) < sum(main[-index:]):
    x = (x + 0.8)
  index = 36
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.00001:
      x = (x + 0.3)
  else:
    if opposite[index] > main[index] + 5:
      x = (x - 0.1)
    else:
      x = (x + 0.3)
  index = 2
  if opposite[index] < main[index]:
    x = (x - 0.6)
  index = 8
  if main[index] > main[index]:
    x = (x - 0.9)
  index = 0
  if main[index] > main[index]:
    x = (x + 0.3)
  index = 11
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 500:
    x = (x + 0.4)
  index = 34
  if opposite[index] < main[index]:
    x = (x + 0.1)
  index = 14
  if main[index] > main[index]:
    x = (x + 0.9)
  index = 27
  if main[index] > opposite[index]:
    x = (x + 0.8)
  index = 28
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.3:
      x = (x + 0.1)
  else:
    if main[index] < opposite[index] + 3:
      x = (x + 0.1)
    else:
      x = (x - 0.8)
  index = 22
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x + 0.000001)
  index = 16
  if main[index] < 1:
    if opposite[index] > main[index] + 0.6:
      x = (x + 0.4)
  else:
    if main[index] > main[index] + 0:
      x = (x - 0.9)
    else:
      x = (x - 0.0000001)
  index = 13
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.0001:
      x = (x + 0.7)
  else:
    if opposite[index] < opposite[index] + 9:
      x = (x + 1.0)
    else:
      x = (x - 0.9)
  index = 4
  if opposite[index] > opposite[index]:
    x = (x + 0.0000001)
  index = 21
  if opposite[index] < opposite[index]:
    x = (x + 0.00001)
  index = 41
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 1.0)
  index = 15
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.001:
      x = (x + 0.0000001)
  else:
    if main[index] < main[index] + 5:
      x = (x + 0.0001)
    else:
      x = (x - 1.0)
  index = 33
  if opposite[index] > main[index]:
    x = (x + 0.2)
  index = 24
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x + 0.2)
  index = 26
  if opposite[index] > main[index]:
    x = (x - 0.1)
  index = 48
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.1:
      x = (x - 0.01)
  else:
    if opposite[index] < opposite[index] + 6:
      x = (x - 0.01)
    else:
      x = (x - 0.01)
  index = 43
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.4)
  index = 40
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.2:
      x = (x - 0.3)
  else:
    if main[index] < main[index] + 6:
      x = (x + 0.0001)
    else:
      x = (x - 0.2)
  index = 40
  if main[index] < 1:
    if main[index] > opposite[index] + 0.9:
      x = (x + 0.8)
  else:
    if main[index] > opposite[index] + 8:
      x = (x + 0.0001)
    else:
      x = (x + 0.0000001)
  index = 28
  if opposite[index] - opposite[index] < sum(opposite[:-index]):
    x = (x + 0.9)
  index = 22
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.001:
      x = (x - 0.7)
  else:
    if opposite[index] > main[index] + 9:
      x = (x - 0.01)
    else:
      x = (x + 0.00001)
  index = 43
  if main[index] > opposite[index]:
    x = (x - 0.6)
  index = 24
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 1000:
    x = (x + 0.01)
  index = 3
  if main[index] > main[index]:
    x = (x + 0.000001)
  index = 43
  if opposite[index] < main[index]:
    x = (x - 0.0001)
  index = 21
  if main[index] > sum(opposite[-index:]):
    x = (x + 0.3)
  index = 44
  if opposite[index] < main[index]:
    x = (x + 0.8)
  index = 31
  if opposite[index] < opposite[index]:
    x = (x - 0.4)
  index = 41
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.00001)
  index = 28
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.000001:
      x = (x - 0.5)
  else:
    if main[index] > main[index] + 6:
      x = (x - 0.6)
    else:
      x = (x + 0.5)
  index = 20
  if main[index] > opposite[index]:
    x = (x + 0.6)
  index = 34
  if main[index] < main[index]:
    x = (x + 0.4)
  index = 42
  if main[index] > opposite[index]:
    x = (x - 0.4)
  index = 45
  if opposite[index] > sum(main[:-index]):
    x = (x - 0.8)
  index = 46
  if opposite[index] < opposite[index]:
    x = (x + 0.0001)
  index = 47
  if main[index] > opposite[index]:
    x = (x - 0.0001)
  index = 3
  if opposite[index] > opposite[index]:
    x = (x - 0.00001)
  index = 31
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.5)
  index = 50
  if opposite[index] > opposite[index]:
    x = (x + 0.000001)
  index = 38
  if opposite[index] < opposite[index]:
    x = (x - 0.00001)
  index = 15
  if main[index] < opposite[index]:
    x = (x - 0.001)
  index = 49
  if main[index] < 1:
    if main[index] < main[index] + 1.0:
      x = (x + 0.001)
  else:
    if main[index] > main[index] + 5:
      x = (x - 1.0)
    else:
      x = (x - 0.00001)
  index = 27
  if main[index] < 1:
    if opposite[index] > main[index] + 0.001:
      x = (x - 0.6)
  else:
    if opposite[index] < main[index] + 1:
      x = (x - 0.3)
    else:
      x = (x - 0.00001)
  index = 10
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.00001:
      x = (x + 0.7)
  else:
    if main[index] > main[index] + 3:
      x = (x + 0.000001)
    else:
      x = (x - 0.3)
  index = 26
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.5)
  index = 33
  if sum(opposite[:-index]) < sum(main[-index:]):
    x = (x + 0.0000001)
  index = 4
  if main[index] > opposite[index]:
    x = (x + 0.0001)
  index = 1
  if main[index] < main[index]:
    x = (x + 0.3)
  index = 3
  if main[index] < sum(opposite[:-index]):
    x = (x + 0.3)
  index = 16
  if main[index] < main[index]:
    x = (x + 0.00001)
  index = 17
  if main[index] < opposite[index]:
    x = (x - 0.7)
  index = 46
  if sum(main[-index:]) < opposite[index]:
    x = (x + 0.0001)
  index = 23
  if main[index] < 1:
    if main[index] > main[index] + 1.0:
      x = (x + 0.1)
  else:
    if main[index] < opposite[index] + 5:
      x = (x - 0.000001)
    else:
      x = (x - 0.5)
  index = 42
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 500:
    x = (x - 0.5)
  index = 4
  if opposite[index] > opposite[index]:
    x = (x + 0.5)
  index = 18
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.000001)
  index = 45
  if main[index] < 1:
    if opposite[index] > main[index] + 0.01:
      x = (x - 0.3)
  else:
    if opposite[index] > main[index] + 2:
      x = (x - 1.0)
    else:
      x = (x + 0.5)
  index = 39
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.9)
  index = 34
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.5)
  index = 44
  if main[index] < main[index]:
    x = (x + 0.3)
  index = 7
  if main[index] < opposite[index]:
    x = (x - 0.6)
  index = 30
  if opposite[index] > main[index]:
    x = (x - 0.7)
  index = 1
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.2)
  index = 9
  if main[index] < opposite[index]:
    x = (x + 0.6)
  index = 7
  if sum(main[:-index]) < sum(opposite[-index:]):
    x = (x - 0.8)
  index = 28
  if opposite[index] > main[index]:
    x = (x + 1.0)
  index = 18
  if main[index] < opposite[index]:
    x = (x + 0.00001)
  index = 49
  if sum(opposite[-index:]) > opposite[index]:
    x = (x - 0.000001)
  index = 23
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 1000:
    x = (x + 0.00001)
  index = 12
  if opposite[index] > main[index]:
    x = (x - 0.5)
  index = 31
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.0001)
  index = 16
  if opposite[index] < main[index]:
    x = (x - 0.0000001)
  index = 21
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.6)
  index = 27
  if opposite[index] > opposite[index]:
    x = (x + 0.01)
  index = 15
  if opposite[index] > main[index]:
    x = (x - 0.0000001)
  index = 45
  if opposite[index] > opposite[index]:
    x = (x - 0.7)
  index = 13
  if main[index] < 1:
    if opposite[index] > main[index] + 0.8:
      x = (x - 0.1)
  else:
    if opposite[index] > main[index] + 4:
      x = (x - 0.9)
    else:
      x = (x + 0.6)
  index = 9
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.000001:
      x = (x + 0.9)
  else:
    if main[index] > main[index] + 7:
      x = (x - 0.4)
    else:
      x = (x - 0.001)
  return x
XXX_output_XXX = p()

Genotype:
[26654, 69772, 88938, 44799, 99928, 4701, 94722, 83902, 48744, 98147, 5362, 69586, 52520, 17344, 50203, 67922, 32305, 60760, 82741, 71950, 89241, 55471, 92605, 30510, 58656, 90163, 25429, 31445, 43835, 71177, 60243, 31582, 74752, 79880, 85520, 27506, 5806, 49540, 31250, 47866, 33452, 5286, 81464, 89500, 99268, 12517, 57450, 42715, 8186, 21650, 89961, 80762, 88533, 29206, 50073, 78817, 882, 26918, 25982, 36225, 9046, 99836, 23454, 22791, 14516, 75105, 173, 67215, 22783, 95741, 85434, 96114, 86105, 23447, 16638, 11662, 22894, 90158, 97423, 6312, 22988, 35541, 63175, 3160, 16933, 82188, 15572, 20391, 89491, 53172, 65995, 64728, 71662, 79536, 18597, 25373, 31451, 60807, 69979, 45273, 53373, 57606, 8192, 86040, 98790, 89538, 53231, 35028, 84421, 15481, 83634, 28140, 73766, 76090, 34249, 73256, 94695, 13875, 80570, 8189, 60213, 38782, 87257, 34944, 70438, 10475, 65537, 20389, 53593, 57046, 19949, 7901, 39617, 37549, 62967, 61440, 27012, 7044, 75439, 53234, 51401, 53104, 95106, 84815, 30857, 68665, 73777, 36971, 76452, 96163, 28983, 7269, 15346, 5470, 74368, 49620, 6507, 96284, 25106, 28612, 48399, 88106, 34115, 97325, 53597, 95949, 95580, 67419, 65421, 32926, 35904, 50977, 43976, 89493, 57031, 20691, 72106, 79417, 80075, 20731, 18575, 87707, 50018, 51587, 9244, 31580, 16230, 96534, 38617, 14486, 6476, 46950, 42173, 81855, 74065, 99164, 25591, 76031, 97241, 24696, 21017, 77419, 15985, 23001, 37599, 69581, 39624, 1838, 82502, 71025, 86696, 27201, 79821, 52105, 72773, 86506, 13010, 58647, 77848, 98164, 82292, 68636, 45772, 49580, 26903, 9470, 37792, 96970, 29294, 88687, 42006, 38111, 55925, 48415, 30270, 64066, 98065, 49131, 85854, 66754, 8548, 27949, 93454, 15394, 7838, 70568, 45817, 91907, 77713, 4375, 58365, 33341, 19944, 63186, 55108, 60641, 35403, 9247, 87982, 33858, 52945, 77483, 89710, 78260, 63610, 44896, 16770, 91308, 50012, 5734, 57719, 39294, 23074, 23925, 35875, 83023, 20607, 58572, 42856, 1747, 42188, 37792, 60739, 78281, 52620, 78940, 81840, 78696, 58622, 36099, 35770, 69277, 39020, 46806, 65227, 25454, 65320, 36346, 74850, 28971, 51832, 5300, 22264, 38340, 79759, 44202, 31837, 68447, 95610, 9743, 26797, 86492, 58730, 95048, 55109, 9711, 5051, 1336, 73848, 52017, 37873, 38438, 45260, 15623, 48965, 68791, 13403, 19945, 89041, 89945, 75951, 14496, 36936, 60594, 83018, 36505, 25626, 19726, 23962, 84766, 85965, 20452, 46201, 33673, 95312, 19849, 56284, 6962, 96076, 14398, 59230, 43862, 95416, 47421, 62445, 65931, 23297, 56715, 1191, 79142, 188, 64857, 8872, 37858, 55146, 78922, 33638, 72572, 77975, 50934, 93499, 28606, 17425, 55634, 50977, 46807, 65461, 4534, 31556, 28234, 54804, 63403, 4079, 3549, 43669, 15916, 26198, 21909, 6540, 10721, 32116, 66853, 48890, 53699, 57770, 41628, 1937, 1222, 10036, 30676, 65180, 25092, 36997, 80771, 27685, 99107, 56431, 33473, 47943, 93426, 52204, 6012, 30104, 27871, 68202, 65745, 39439, 27645, 28182, 6109, 86988, 79483, 94700, 35982, 12721, 78079, 98041, 69683, 23299, 67750, 87299, 66904, 92324, 68964, 58974, 91614, 55521, 28380, 25448, 21433, 37889, 86172, 32936, 38628, 19870, 80387, 58276, 50959, 36804, 37532, 95680, 65092, 29964, 28447, 71375, 46041, 13082, 42094, 48688, 14608, 20012, 25072, 69889, 54779, 81189, 89057, 37918, 7344, 42396, 72043, 27763, 98648, 21867, 94163, 71309, 68227, 60185, 95443, 4686, 51652, 50940, 58864, 67347, 26626, 90924, 86444, 85917, 3937, 82070, 32880, 23607, 17564, 79330, 10988, 85253, 98525, 59018, 75562, 11772, 43347, 84576, 6380, 1169, 82540, 27524, 22320, 86365, 53578, 66469, 54065, 74195, 91731, 90731, 21820, 14454, 10927, 50265, 82584, 82465, 71062, 81984, 90079, 37149, 77093, 44121, 20986, 58985, 66382, 79224, 93438, 70745, 45364, 4821, 69292, 74086, 48085, 4861, 73357, 33541, 80135, 22780, 41112, 83032, 17480, 17659, 38919, 35702, 259, 30079, 80594, 19610, 76248, 54992, 44175, 22584, 24866, 62337, 66857, 89527, 88434, 22824, 28230, 56240, 45830, 5192, 66610, 17235, 92984, 13699, 37893, 60093, 72664, 49287, 5313, 37485, 59553, 17806, 8249, 83761, 47543, 50074, 65607, 19900, 52167, 80736, 86459, 82667, 23629, 90604, 9833, 60106, 33961, 83037, 28749, 33055, 11782, 42010, 19638, 32288, 17382, 37657, 14974, 85044, 77032, 61232, 9389, 32382, 93151, 83645, 88301, 14003, 9665, 35430, 82807, 88296, 99928, 87718, 1273, 76291, 24799, 32104, 83824, 66814, 79346, 18581, 2794, 74812, 72695, 29168, 10553, 64618, 66822, 38163, 13785, 71068, 58587, 11913, 64310, 12432, 91673, 63818, 89360, 28715, 69869, 15990, 75873, 23392, 50339, 31774, 97840, 29950, 43078, 23145, 12757, 42001, 76464, 57250, 38884, 32656, 47923, 14467, 17584, 83985, 86428, 38608, 91959, 87190, 62481, 3812, 16845, 37750, 57958, 13260, 10, 33411, 33819, 78859, 82093, 9616, 81284, 78583, 51161, 53071, 83920, 12482, 64666, 9580, 62685, 53248, 31505, 45703, 93928, 53019, 51220, 8806, 75658, 8763, 32025, 79190, 80851, 59959, 95561, 2068, 84674, 37224, 37032, 55923, 93771, 99571, 57909, 14407, 81355, 67012, 59940, 47849, 40064, 23036, 7227, 54248, 69098, 68597, 63160, 67622, 74652, 86762, 23348, 66234, 31666, 6064, 10811, 13889, 17044, 9505, 75856, 82853, 97341, 31503, 12869, 79348, 37234, 74130, 55150, 69573, 96483, 38181, 30324, 43311, 48008, 58243, 49995, 96207, 75253, 37754, 37531, 38101, 59168, 64408, 457, 54742, 26748, 94753, 69268, 69766, 35862, 92470, 98271, 23344, 88464, 46340, 79269, 85217, 58249, 30279, 10996, 67681, 40405, 46902, 15658, 73307, 91812, 35290, 9499, 72622, 9191, 78675, 10736, 90548, 92145, 95880, 53704, 50049, 75193, 92328, 24276, 61930, 50281, 77950, 83246, 52888, 57134, 41900, 34328, 69688, 52951, 22118, 21202, 86167, 70501, 48541, 9088, 89647, 59196, 24432, 95056, 59182, 5472, 55407, 53645, 29757, 50797, 96017, 54706, 37521, 19176, 90224, 4158, 29659, 67103, 14712, 50380, 94646, 23255, 43867, 45121, 20921, 33904, 71602, 83408, 68705, 55737, 85617, 73738, 32465, 36370, 13920, 11560, 4972, 85639, 21652, 78768, 54417, 51148, 62737, 30308, 95405, 92375, 29408, 64020, 7129, 73284, 75183, 87931, 10483, 99650, 85783, 90986, 7721, 23889, 52155, 51035, 93463, 86644, 38962, 46639, 20912, 52165, 31020, 63325, 1597, 85276, 39478, 14464, 38221, 66353, 68874, 98239, 88417, 43761, 89108, 58412, 26278, 58355, 32968, 99489, 22248, 83140, 24054, 93771, 92129, 38437, 14803, 81729, 61602, 11047, 39464, 61127, 52395, 62389, 33877, 63803, 12300, 71935, 69368, 4351, 72033, 26566, 52288, 55795, 82469, 31832, 65881, 90109, 22535, 61671, 56499, 13900, 44161, 94559, 22362, 68668, 63970, 10595, 25134, 83595, 2838, 50720, 14559, 51456, 38367, 57841, 16304, 47935, 89236, 51712, 66530, 28056, 56365, 99829, 27021, 81845, 29488, 53948, 56149, 19782, 68023, 49386, 24928, 91752, 12657, 34863, 92140, 34094, 46366, 70161, 63300, 45445, 61754, 11623, 26102, 44843, 32090, 78286, 67659, 54294, 59999, 15191, 25650, 50608, 43093, 33924, 96963, 60272, 65587, 21787, 59099, 50380, 33020, 29149, 67614, 64616, 87109, 11254, 55377, 78871, 13643, 91198, 12690, 42456, 67772, 32014, 84911, 27604, 1616, 32832, 73312, 766, 28204, 94470, 19598, 81270, 70539, 27310, 1447, 37126, 98841, 94424, 60017, 84031, 93805, 88780, 71052, 41163, 39100, 50952, 60472, 21913, 74473, 29582, 73452, 25405, 19559, 89781, 38468, 35339, 62963, 57097, 48426, 6251, 59222, 67223, 63997, 89719, 96040, 88455, 88144, 45189, 53644, 25879, 5627, 27385, 45337, 69993, 2053, 14698, 50716, 10149, 52171, 30242, 90096, 41780, 26605, 93701, 25651, 60781, 1835, 26990, 35407, 71153, 30758, 29526, 62964, 94038, 38175, 92391, 92244, 78449, 28342, 12403, 89768, 94408, 12469, 11824, 35113, 78373, 39133, 25476, 9488, 49528, 95255, 47356, 44121, 78154, 41731, 31721, 68397, 8371, 5071, 68245, 95929, 96457, 57908, 16000, 18871, 83209, 31808, 72514, 16361, 61455, 13972, 83770, 52012, 19773, 87226, 72670, 385, 10528, 26320, 36861, 9173, 36439, 93854, 46670, 3814, 30360, 23719, 61652, 57180, 69610, 69598, 66678, 89971, 20482, 7030, 73257, 96321, 16755, 99860, 51592, 15452, 48033, 90938, 84979, 46306, 82222, 79873, 76687, 67311, 47140, 28230, 36251, 33206, 18135, 48172, 70307, 47344, 53105, 9845, 44964, 25602, 97833, 22483, 95615, 95159, 84625, 25414, 37333, 23188, 62663, 87901, 22232, 27920, 24641, 38862, 68298, 94362, 17578, 73205, 71656, 11308, 47677, 2895, 30595, 88438, 54897, 82596, 7927, 68824, 79192, 59837, 60146, 68928, 42411, 58557, 29677, 76365, 42028, 59473, 89790, 13276, 17871, 91548, 90055, 68598, 63174, 88378, 44520, 59113, 19269, 99345, 72052, 89008, 55837, 42055, 77485, 26459, 91453, 76952, 85958, 33539, 82777, 56835, 20683, 67028, 81184, 99970, 59957, 45346, 59140, 31115, 43687, 69348, 53848, 42071, 50084, 49210, 2891, 10722, 42786, 70690, 65440, 75633, 35446, 88224, 10408, 17298, 24909, 92798, 18889, 6988, 68413, 88807, 3749, 54562, 39442, 17890, 17756, 94330, 30974, 15327, 1500, 23380, 98967, 64885, 2576, 71518, 21422, 8335, 31267, 90880, 18370, 23287, 60458, 46730, 13907, 72826, 10144, 25480, 63608, 30760, 8416, 55195, 76671, 19174, 2883, 98144, 43455, 59096, 63408, 57048, 67033, 16966, 40804, 99662, 71033, 44995, 55123, 3738, 80109, 4945, 89320, 17494, 58638, 80390, 87627, 70592, 56423, 32938, 6662, 45186, 45756, 7196, 19923, 60528, 90179, 35125, 22506, 77817, 29152, 28463, 98156, 68671, 9022, 16331, 86800, 41093, 7050, 52506, 53405, 59261, 4600, 97282, 54754, 86197, 33877, 24325, 97510, 38558, 78440, 33562, 76660, 97768, 62926, 58860, 97730, 52615, 29550, 4155, 5094, 65161, 17248, 56245, 89097, 51651, 49819, 77328, 34521, 3740, 63818, 27396, 13208, 91535, 29762, 63716, 51225, 58001, 64761, 73409, 15033, 56778, 70969, 79471, 12153, 59518, 11396, 54710, 83988, 82974, 31106, 4746, 27151, 54846, 81335, 83922, 90909, 56039, 29148, 24199, 91463, 99664, 4846, 96832, 11626, 52498, 64162, 64660, 56083, 98326, 93946, 72241, 78764, 84121, 79525, 75192, 78433, 96709, 3679, 20117, 82491, 40916, 42315, 83122, 35565, 34387, 92741, 75172, 57638, 19672, 66058, 65366, 23192, 10989, 31719, 60985, 62205, 9145, 96771, 43609, 43069, 82348, 46427, 79896, 43107, 44053, 44215, 31453, 92945, 27702, 93582, 32648, 95692, 85320, 78741, 84055, 65609, 35441, 46498, 52334, 21880, 7035, 39946, 33120, 29460, 28398, 69770, 31080, 46919, 61517, 57735, 52937, 36571, 46879, 93800, 29092, 53757, 22368, 90472, 86384, 75159, 84296, 86041, 49519, 91401, 39472, 23968, 39975, 20114, 5470, 41098, 27591, 92755, 70372, 17907, 40074, 5052, 89224, 89740, 18508, 60142, 61789, 55704, 61204, 33855, 64718, 92011, 46867, 87694, 27226, 38234, 50661, 71951, 68111, 54907, 49515, 98920, 11864, 67417, 63244, 85431, 72376, 34483, 29675, 49332, 87404, 82081, 91463, 67429, 90038, 99386, 11248, 53387, 80156, 41884, 32871, 94605, 68660, 41167, 72615, 39727, 8503, 17946, 6402, 7452, 20493, 5326, 89785, 40153, 21740, 38083, 37861, 98783, 5953, 53373, 56663, 56773, 8265, 86374, 58088, 57612, 55642, 36667, 97325, 51409, 34399, 11404, 99138, 33950, 76496, 37439, 68538, 45805, 33080, 52918, 56294, 34702, 48189, 25537, 90639, 13202, 67256, 8391, 91433, 58908, 41546, 34188, 93352, 76545, 62, 20299, 21900, 22083, 43065, 1130, 96638, 45117, 10567, 82444, 6579, 44876, 1503, 91164, 75648, 97329, 53782, 10501, 65815, 55535, 54688, 35744, 23839, 83626, 52081, 29431, 78262, 19879, 67170, 43381, 22177, 35489, 23150, 79171, 15733, 29671, 78578, 56821, 63834, 65974, 58045, 93262, 7269, 42094, 11573, 49307, 75482, 68555, 46468, 63428, 36334, 76029, 93082, 14466, 46278, 40842, 21323, 65299, 92520, 70698, 65011, 19813, 60115, 46664, 23124, 28323, 28828, 23437, 43891, 83788, 95328, 15813, 73097, 38743, 37468, 35587, 74839, 66985, 4746, 75403, 32291, 19270, 67274, 36956, 40324, 34168, 41090, 2896, 75044, 61147, 57362, 1405, 72487, 42490, 47930, 68103, 89644, 40945, 27770, 73436, 81312, 77905, 76314, 46595, 30260, 45280, 88140, 90594, 4397, 51640, 84685, 34462, 13033, 86274, 9326, 65453, 33967, 17074, 81575, 26812, 31723, 15706, 79635, 17131, 16896, 25164, 29476, 91400, 81463, 58819, 21548, 80886, 70015, 43789, 52044, 48724, 9351, 35990, 88755, 18174, 17251, 67392, 85376, 80833, 12298, 68344, 86648, 37033, 85166, 24212, 47092, 8517, 23818, 46468, 76487, 13486, 31442, 71353, 27429, 50038, 28793, 99433, 78624, 37550, 71829, 28272, 65672, 78521, 19631, 53726, 75320, 70308, 85881, 36532, 22288, 23263, 75003, 2597, 67948, 29134, 423, 61360, 7423, 10600, 86960, 41531, 59930, 3769, 87618, 62197, 9200, 41347, 80920, 51694, 48598, 30971, 98905, 3611, 23347, 11857, 40132, 32161, 34555, 62066, 56804, 94922, 30927, 33580, 37683, 73986, 66777, 30705, 14996, 66815, 64563, 55531, 8161, 74692, 16865, 61100, 73893, 33485, 81161, 46780, 62701, 34450, 51925, 600, 63203, 53936, 88237, 31406, 90352, 69061, 65246, 22181, 83858, 26566, 64056, 87298, 79698, 73778, 1934, 66696, 47098, 4726, 24661, 41441, 57035, 49281, 32961, 12180, 35220, 77832, 25323, 68568, 26618, 8756, 27255, 77115, 63750, 7003, 49114, 64682, 60769, 11654, 86634, 42556, 7791, 66107, 54522, 5474, 92514, 60124, 35994, 6910, 53553, 7548, 54347, 21536, 37233, 15231, 70867, 35654, 41470, 85467, 18297, 69554, 62990, 74612, 71270, 44358, 53227, 31933, 11831, 83672, 95110, 89071, 58815, 51205, 61289, 34405, 88849, 51320, 73206, 48011, 80355, 71982, 66074, 6331, 86118, 89899, 7900, 65015, 73611, 67993, 28645, 49, 92304, 56355, 51681, 89143, 68712, 65442, 98763, 51692, 14707, 63684, 24506, 37519, 4717, 39222, 78119, 21010, 82289, 5832, 38302, 9711, 54838, 47226, 72392, 25132, 9590, 96495, 60924, 4677, 65294, 19331, 381, 12188, 72343, 87794, 71669, 22686, 52384, 66635, 15010, 99238, 27242, 51072, 55099, 98270, 51265, 96060, 17548, 51794, 91649, 3812, 5587, 35824, 92627, 93568, 16821, 42844, 97851, 18177, 8326, 38659, 7513, 49593, 74908, 77199, 63270, 62876, 82221, 44029, 15129, 95696, 93003, 26079, 61374, 69372, 62438, 53779, 65753, 35449, 7863, 99954, 36379, 96119, 64825, 22219, 59182, 38439, 41535, 25649, 15788, 74806, 57336, 74312, 607, 7054, 51304, 70419, 3636, 41856, 38492, 74556, 24351, 52207, 4765, 41004, 66526, 68572, 48203, 75421, 52823, 93629, 80343, 75374, 37278, 91127, 88922, 82158, 30835, 35094, 54281, 7290, 97, 94728, 70166, 44963, 97481, 77807, 61917, 85047, 59147, 16031, 45606, 31925, 72303, 2395, 13307, 39136, 83011, 16373, 87112, 68788, 68422, 87318, 8778, 1086, 53442, 14054, 54959, 42739, 97563, 6359, 95637, 55716, 97239, 13761, 5740, 60054, 77465, 49295, 68598, 4145, 26612, 68455, 68097, 74712, 56005, 42702, 30177, 85980, 94650, 49189, 16608, 81790, 61632, 29112, 86170, 34147, 33351, 99888, 64315, 53393, 37510, 22354, 56626, 34787, 14476, 26341, 94496, 93360, 58421, 15383, 93498, 11810, 35138, 57647, 99380, 30598, 38743, 16111, 53472, 95680, 11116, 57800, 86323, 49595, 13757, 10332, 47044, 49898, 6977, 59255, 83720, 5726, 85445, 31881, 20774, 49415, 38427, 66618, 56230, 93559, 31523, 67431, 28518, 10927, 27395, 70890, 11922, 65484, 16956, 50252, 42835, 36965, 1274, 83622, 13232, 14260, 26606, 3599, 3883, 27660, 13200, 76305, 43240, 60131, 18448, 24316, 51550, 93274, 52706, 62636, 41676, 27744, 3653, 92478, 10000, 41722, 6367, 55949, 71156, 65932, 69906, 89088, 98672, 48654, 69269, 73085, 59551, 14418, 51091, 47523, 58964, 20813, 21780, 12088, 67826, 71586, 71944, 78684, 40379, 37709, 5968, 78465, 57364, 1913, 13987, 27398, 61046, 346, 83285, 97730, 8792, 95550, 31037, 46193, 59020, 43728, 16583, 89343, 48902, 65481, 12211, 14758, 31752, 92507, 19789, 87858, 57528, 16028, 79776, 86015, 9282, 18442, 49053, 18623, 11488, 42593, 70246, 97446, 81591, 98502, 50451, 63554, 3708, 72358, 66351, 42452, 89782, 62169, 95344, 8240, 13097, 37645, 81231, 55523, 11361, 43365, 20463, 69455, 13375, 29892, 97549, 22637, 39831, 41527, 32520, 36973, 38226, 86896, 33410, 14188, 35274, 53414, 2668, 15285, 73271, 71528, 12509, 55395, 15187, 21263, 11546, 77350, 6187, 36339, 94105, 5097, 94159, 62798, 69486, 67011, 55440, 35944, 44800, 27924, 74146, 18634, 98865, 26719, 54274, 87509, 68280, 47175, 7870, 90679, 27071, 25362, 44772, 13445, 7162, 95599, 71092, 83839, 45450, 99007, 1549, 76361, 14110, 45550, 32204, 85963, 919, 22446, 85697, 92954, 41592, 6175, 95793, 98317, 42206, 61063, 96273, 71032, 37798, 76284, 65028, 84713, 99507, 28484, 92802, 41287, 28612, 75144, 68763, 38945, 34308, 29857, 43598, 40013, 23171, 75829, 5254, 37772, 87440, 27401, 25893, 5996, 25896, 98137, 28377, 73977, 14228, 90317, 77578, 54552, 44297, 30326, 20841, 66836, 20769, 75381, 68545, 37315, 21854, 78815, 53917, 33391, 75063, 37975, 59592, 61028, 55121, 82982, 25323, 78880, 80942, 53377, 12964, 31857, 86883, 65692, 15647, 61278, 37769, 15531, 62853, 65609, 53442, 96899, 84803, 82850, 62393, 7155, 16461, 36702, 13969, 21882, 99074, 31123, 49682, 82172, 48432, 38069, 94753, 91465, 81473, 45605, 77598, 88647, 38743, 93332, 62107, 22096, 45207, 84742, 94501, 18314, 53426, 13459, 96474, 8458, 50302, 97537, 11551, 77380, 56349, 56920, 78829, 30760, 29389, 5622, 55629, 39321, 86936, 40522, 44469, 65783, 26269, 72556, 18898, 10949, 71182, 27668, 56848, 6956, 64074, 55148, 15649, 82774, 14637, 21263, 59486, 78297, 61685, 65006, 29461, 51037, 88683, 55500, 38646, 13846, 16171, 32697, 38101, 64137, 90562, 42289, 41799, 26848, 84165, 95885, 55285, 68970, 69706, 52066, 87980, 21818, 74271, 61277, 15678, 37258, 79211, 34017, 73714, 4503, 37419, 7237, 49014, 55350, 69700, 62497, 51691, 92993, 6477, 75098, 43241, 8028, 19309, 22110, 92706, 56691, 533, 24875, 57018, 97090, 90797, 5719, 3770, 73368, 51183, 19432, 40118, 75852, 46347, 56984, 2398, 79755, 29676, 27414, 36497, 85139, 6842, 96141, 15902, 52894, 89846, 87206, 69805, 20980, 22366, 65274, 3525, 52235, 55427, 63972, 13368, 45977, 5055, 18120, 69965, 87431, 21279, 18621, 33070, 22157, 90319, 48070, 22645, 6013, 74028, 33848, 37132, 14908, 96830, 72195, 57242, 30908, 94132, 34824, 85530, 8929, 59037, 17170, 95733, 49993, 31689, 11201, 9523, 81203, 4070, 58279, 22557, 34674, 47915, 37869, 63233, 47404, 58233, 61954, 40350, 73310, 16270, 37852, 4614, 54053, 22801, 7404, 70069, 1910, 71036, 22392, 16689, 29591, 12671, 88698, 38312, 81950, 91799, 31139, 64868, 20785, 47812, 54244, 29476, 28588, 37468, 99884, 69975, 50146, 89906, 36438, 62851, 15290, 58389, 54654, 83962, 95529, 26765, 22941, 21022, 87677, 88411, 96285, 91686, 52337, 98350, 44582, 45544, 85522, 76178, 62784, 57376, 85164, 4467, 72124, 34595, 13416, 26402, 81676, 47042, 19711, 21747, 32875, 18240, 43554, 85879, 55512, 89095, 57670, 91903, 38279, 2707, 51959, 5306, 40560, 51239, 91097, 84109, 97912, 56459, 28759, 98247, 86870, 23057, 5786, 94561, 2196, 29014, 62192, 87390, 51044, 45251, 33558, 35830, 32641, 90254, 29148, 95931, 29020, 37271, 18893, 90922, 15495, 15826, 50689, 90682, 91048, 17197, 28478, 58575, 72434, 45054, 98314, 47902, 95749, 92688, 79197, 8888, 6685, 21211, 79890, 41830, 90527, 63373, 82069, 96046, 1976, 27311, 7786, 22124, 83707, 92891, 47310, 94275, 75108, 16820, 15633, 51480, 80211, 65927, 52830, 69992, 20215, 29987, 13471, 85987]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})))) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}))))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})))) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})))))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))))))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :})))) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :})))) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}))))))) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})))))) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :})))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.016853932584269662, 0.4993979163052204]