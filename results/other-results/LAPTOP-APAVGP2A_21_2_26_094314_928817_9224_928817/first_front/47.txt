Generation:
9

Phenotype:
def p():
  x = 0.0
  index = 48
  n = 30
  b = 39
  c = opposite[b] - opposite[b]
  if opposite[3] > opposite[b] + opposite[b]:
    x = (x * 0.3)
  index = 20
  n = 37
  b = 30
  c = sum(main[-index:])
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.7)
  index = 19
  n = 39
  b = 2
  c = main[b]
  if c < opposite[b]:
    x = (x + 0.7)
  index = 16
  n = 19
  b = 3
  c = opposite[b]
  if c < main[b]:
    x = (x * 0.4)
  index = 8
  n = 15
  b = 7
  c = opposite[b]
  if main[42] > main[44] + 0:
    x = 0.2
  index = 16
  n = 36
  b = 1
  c = sum(opposite[:-index])
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.2)
  index = 28
  n = 1
  b = 44
  c = opposite[b]
  if main[44] > opposite[b] + 5:
    x = (x - 0.8)
  index = 22
  n = 29
  b = 35
  c = main[b]
  if c < sum(main[:-index]):
    x = 0.6
  index = 44
  n = 41
  b = 24
  c = main[b]
  if c < opposite[b]:
    x = (x - 0.2)
  index = 23
  n = 31
  b = 39
  c = main[b]
  if opposite[48] < main[b] + 2:
    x = (x / 0.9)
  index = 32
  n = 11
  b = 47
  c = opposite[b]
  if c < main[b]:
    x = (x - 0.5)
  return x
XXX_output_XXX = p()

Genotype:
[22886, 35958, 804, 43607, 77453, 57045, 36307, 38441, 13211, 50445, 45842, 73364, 10765, 31600, 16952, 78723, 63048, 72847, 66775, 46886, 32099, 70722, 27364, 73864, 18257, 670, 73261, 24388, 27685, 59428, 61996, 44852, 14376, 81103, 23514, 27577, 66623, 65690, 39147, 17165, 16480, 30749, 81036, 1925, 45125, 67018, 66599, 84938, 35725, 30267, 76240, 12186, 93359, 85760, 77637, 81021, 9310, 2500, 29700, 49874, 56019, 55012, 26148, 92028, 65638, 9708, 52559, 91955, 32378, 23341, 77127, 44174, 12842, 97387, 28129, 20587, 26798, 22271, 52977, 58315, 63373, 77680, 51848, 16056, 15918, 96332, 25446, 57006, 37676, 49847, 54302, 80481, 83536, 54094, 33757, 89396, 36810, 67360, 41877, 90641, 34698, 17657, 33055, 35209, 28726, 17963, 55113, 59616, 15472, 98045, 6988, 72595, 25913, 78077, 71714, 24437, 13987, 33112, 35939, 60336, 34645, 77576, 31987, 43956, 19472, 20461, 26755, 60287, 48445, 61152, 67645, 56946, 22113, 89272, 31348, 58870, 37838, 61981, 15445, 3016, 22029, 34932, 98497, 77943, 31653, 68867, 10424, 63514, 77402, 64157, 49983, 12906, 27648, 98400, 68661, 77797, 82, 48799, 97917, 88072, 90281, 64881, 45726, 10013, 3269, 15963, 14485, 75528, 52547, 49560, 14623, 82358, 28386, 57471, 45161, 30290, 33585, 53471, 31174, 72771, 19627, 53921, 9894, 20887, 45574, 50226, 46390, 25816, 19364, 34857, 49406, 85398, 20750, 66535, 40363, 24350, 30762, 57428, 75862, 81012, 16658, 79906, 49163, 46402, 77916, 57313, 86320, 89300, 88991, 52980, 97115, 15566, 57520, 61582, 60536, 48332, 31101, 20717, 823, 3183, 95041, 46848, 43216, 6613, 44589, 50136, 69077, 13624, 52250, 44123, 97683, 53677, 39221, 20809, 2426, 52501, 4363, 8813, 73817, 49594, 14256, 47491, 77005, 93021, 57351, 98348, 18097, 87953, 72025, 39032, 92737, 52860, 55604, 32124, 63051, 22869, 9383, 7619, 51432, 91759, 52335, 80786, 49477, 92891, 24766, 33682, 68487, 55041, 97212, 90048, 16691, 47967, 99918, 20520, 42991, 40613, 40669, 88794, 7743, 66663, 54511, 42241, 79479, 65322, 59111, 85637, 88649, 94226, 82397, 85612, 72268, 45031, 68105, 6499, 94514]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 48)) {::} (<a> n =  (<n> 30)) {::} (<b> b =  (<n> 39)) {::} (<c> c =  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> -)   (<data> (<point> opposite[b]))))) {::} (<if> if  (<data> (<point> opposite[ (<n> 3) ]))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> +)   (<data> (<point> opposite[b])))) :{:x =  (<expr> (x *  (<const> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<a> n =  (<n> 37)) {::} (<b> b =  (<n> 30)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<a> n =  (<n> 39)) {::} (<b> b =  (<n> 2)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x +  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<a> n =  (<n> 19)) {::} (<b> b =  (<n> 3)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x *  (<const> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<a> n =  (<n> 15)) {::} (<b> b =  (<n> 7)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[ (<n> 42) ])  >  (<point> main[ (<n> 44) ])  +  (<d> 0) :{:x =  (<expr> (<const> 0.2)) :}))) {::} (<code> (<index> index =  (<n> 16)) {::} (<a> n =  (<n> 36)) {::} (<b> b =  (<n> 1)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<const> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<a> n =  (<n> 1)) {::} (<b> b =  (<n> 44)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[ (<n> 44) ])  >  (<point> opposite[b])  +  (<d> 5) :{:x =  (<expr> (x -  (<const> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 22)) {::} (<a> n =  (<n> 29)) {::} (<b> b =  (<n> 35)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (<const> 0.6)) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<a> n =  (<n> 41)) {::} (<b> b =  (<n> 24)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x -  (<const> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<a> n =  (<n> 31)) {::} (<b> b =  (<n> 39)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 48) ])  <  (<point> main[b])  +  (<d> 2) :{:x =  (<expr> (x /  (<const> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<a> n =  (<n> 11)) {::} (<b> b =  (<n> 47)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x -  (<const> 0.5) )) :})))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9740038354996804, 0.955899821739022]