Generation:
0

Phenotype:
def p():
  x = 0.0
  index = 20
  if main[index] < 1:
    if main[index] > opposite[index] + 0.4:
      x = (x - 0.00001)
  else:
    if main[index] > opposite[index] + 3:
      x = (x + 0.001)
    else:
      x = (x + 0.01)
  index = 22
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.8)
  index = 18
  if sum(main) / 52 < sum(main) / 52:
    x = (x + 0.5)
  index = 1
  if sum(opposite) / 52 > main[index]:
    x = (x - 0.7)
  index = 29
  if sum(opposite) / 52 > opposite[index]:
    x = (x + 0.4)
  index = 15
  if main[index] < 1:
    if main[index] > main[index] + 0.1:
      x = (x - 0.6)
  else:
    if opposite[index] > opposite[index] + 7:
      x = (x + 0.1)
    else:
      x = (x - 0.2)
  index = 1
  if opposite[index] < main[index]:
    x = (x - 0.7)
  index = 24
  if sum(opposite) / 52 < sum(opposite) / 52:
    x = (x - 0.0000001)
  index = 19
  if main[index] < main[index]:
    x = (x - 0.8)
  index = 16
  if main[index] < 1:
    if main[index] < main[index] + 0.0001:
      x = (x + 0.1)
  else:
    if opposite[index] < opposite[index] + 5:
      x = (x - 0.000001)
    else:
      x = (x + 0.4)
  index = 29
  if opposite[index] < opposite[index]:
    x = (x + 0.01)
  index = 32
  if main[index] < 1:
    if opposite[index] > main[index] + 1.0:
      x = (x + 0.000001)
  else:
    if main[index] < opposite[index] + 9:
      x = (x + 0.0001)
    else:
      x = (x - 0.7)
  index = 14
  if sum(main) / 52 < sum(opposite) / 52:
    x = (x - 0.4)
  index = 26
  if main[index] < 1:
    if main[index] > opposite[index] + 0.7:
      x = (x - 0.8)
  else:
    if main[index] > main[index] + 1:
      x = (x - 0.3)
    else:
      x = (x + 0.01)
  index = 25
  if main[index] > main[index]:
    x = (x - 0.01)
  index = 38
  if opposite[index] > main[index]:
    x = (x - 0.00001)
  index = 34
  if main[index] < main[index]:
    x = (x + 0.0001)
  return x
XXX_output_XXX = p()

Genotype:
[94409, 45070, 5493, 45590, 17542, 10311, 27989, 93179, 24763, 34072, 69202, 28306, 3182, 62196, 4375, 74623, 85139, 61722, 28621, 34028, 39814, 20040, 55974, 93930, 11819, 14296, 45288, 24220, 61306, 11064, 23692, 2384, 99827, 3103, 67171, 35315, 86149, 62392, 77751, 21233, 8027, 26109, 87004, 89507, 65849, 63137, 21750, 56553, 66613, 9750, 9246, 91270, 79798, 34541, 34494, 69533, 92530, 11979, 50438, 22400, 97642, 29971, 61439, 28884, 41381, 26270, 40375, 23225, 94173, 12889, 72764, 54221, 95937, 10833, 25841, 60808, 44806, 96159, 51459, 17957, 38920, 77331, 52013, 1687, 25301, 69508, 47707, 89120, 58923, 3683, 59430, 32214, 861, 32448, 53030, 2493, 38711, 82444, 70321, 2763, 62698, 8532, 12092, 94204, 66511, 74856, 94612, 82189, 4524, 65113, 73680, 22172, 21597, 62321, 11080, 86226, 97359, 95910, 20771, 95171, 77273, 4562, 36146, 10701, 89796, 73947, 19426, 81301, 81188, 17244, 47395, 70984, 57821, 22429, 49013, 14162, 41286, 62679, 62591, 28330, 75841, 81805, 29938, 1657, 38312, 27575, 48490, 38598, 80698, 65569, 77322, 33057, 9839, 65440, 30086, 52818, 59865, 52687, 23249, 76177, 58377, 78502, 19939, 87607, 47992, 13441, 53454, 48725, 33084, 22539, 56921, 70493, 36396, 51183, 37831, 28981, 49442, 23243, 33079, 71391, 50331, 75101, 61439, 49813, 20422, 7247, 65149, 23115, 22713, 82492, 57640, 63282, 59063, 52760, 97753, 84569, 60538, 4947, 36709, 29313, 57177, 45966, 61033, 73976, 37919, 53039, 72509, 76721, 51396, 21321, 97060, 26300, 59507, 66831, 99540, 54111, 35274, 89896, 22101, 70972, 95494, 17133, 22448, 31932, 52814, 2577, 13976, 76486, 7580, 17019, 28280, 54014, 51700, 13918, 21874, 35447, 86318, 53135, 36148, 89523, 95080, 17077, 93392, 217, 22714, 89611, 61151, 38695, 91761, 76642, 90879, 64745, 71132, 85226, 99970, 6249, 94613, 46807, 17139, 66917, 21474, 14819, 55143, 77259, 72194, 99837, 73003, 43326, 71259, 75926, 89744, 38323, 70283, 68194, 19493, 38415, 68697, 80656, 7840, 28720, 41199, 81364, 41350, 37290, 3774, 78640, 76755, 7840, 3370, 60509, 85193, 85993, 44420, 29390, 76195, 21742, 16037, 79723, 61753, 54283, 41695, 55263, 64973, 83336, 6535, 74961, 54293, 29439, 67442, 13076, 41355, 35038, 96811, 95779, 86023, 48227, 86929, 10781, 63069, 26070, 32854, 82626, 1070, 98511, 82508, 79834, 83997, 34371, 29283, 29010, 97734, 42451, 70230]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 20)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(main) / 52)) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.8202764976958525, 0.5133904963360278]