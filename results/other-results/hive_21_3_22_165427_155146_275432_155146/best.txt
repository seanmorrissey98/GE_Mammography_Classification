Generation:
0

Phenotype:
def p():
  x = 0.0
  n = 40
  b = 37
  c = main[b]
  if main[b] > main[b] + 1:
    x = (x / 0.7)
  n = 30
  b = 9
  c = main[b] / sum(opposite[-n:])/n / sum(opposite[-n:])/n
  if sum(main[-n:])/n + opposite[45] - main[b] > main[12]:
    x = (x / 0.2)
  n = 34
  b = 43
  c = opposite[b]
  if c < sum(main[-n:])/n:
    x = (x * 0.4)
  n = 16
  b = 0
  c = sum(opposite[-n:])/n
  if main[1] < opposite[29] * sum(main[-n:])/n - main[b] - main[b] * sum(opposite[-n:])/n - sum(opposite[-n:])/n:
    x = (x + 0.9)
  n = 14
  b = 40
  c = opposite[46]
  if c > opposite[b] * sum(opposite[-n:])/n - main[b] * sum(main[-n:])/n:
    x = (x * 0.9)
  n = 32
  b = 21
  c = sum(main[-n:])/n
  if main[b] < main[32] + 5:
    x = (x * 0.9)
  n = 25
  b = 30
  c = main[b]
  if main[21] > opposite[b]:
    x = (x * 0.6)
  n = 38
  b = 45
  c = main[b]
  if main[b] * main[28] > sum(opposite[-n:])/n * opposite[b]:
    x = 0.8
  n = 47
  b = 49
  c = sum(main[-n:])/n + opposite[b]
  if main[b] < main[45] + 5:
    x = (x - 0.4)
  n = 25
  b = 2
  c = main[b]
  if sum(opposite[-n:])/n > main[b]:
    x = (x * 1.0)
  n = 28
  b = 18
  c = main[b]
  if main[43] < opposite[b] + 6:
    x = (x / 0.6)
  n = 15
  b = 21
  c = sum(main[-n:])/n
  if main[49] > main[b] + 5:
    x = (x * 0.2)
  n = 39
  b = 2
  c = sum(opposite[-n:])/n
  if c < opposite[50]:
    x = (x * 1.0)
  n = 42
  b = 45
  c = main[b]
  if opposite[b] > opposite[b] + 6:
    x = (x * 0.4)
  n = 47
  b = 23
  c = opposite[b]
  if opposite[b] < main[b] + 1:
    x = 1.0
  n = 38
  b = 42
  c = sum(main[-n:])/n
  if opposite[40] > opposite[b] + 3:
    x = (x * 0.9)
  n = 38
  b = 30
  c = sum(opposite[-n:])/n
  if sum(opposite[-n:])/n > sum(main[-n:])/n:
    x = (x - 0.3)
  n = 50
  b = 24
  c = sum(main[-n:])/n / sum(main[-n:])/n * main[32] + sum(main[-n:])/n
  if opposite[b] < main[b] + 9:
    x = (x / 0.8)
  n = 14
  b = 24
  c = main[b]
  if main[b] > opposite[5]:
    x = (x / 0.8)
  n = 18
  b = 25
  c = opposite[b]
  if opposite[28] > opposite[b] + 6:
    x = (x + 0.7)
  n = 13
  b = 19
  c = opposite[b]
  if c < sum(main[-n:])/n:
    x = 0.8
  n = 50
  b = 2
  c = sum(main[-n:])/n
  if main[b] > opposite[b] * sum(main[-n:])/n:
    x = 0.2
  n = 12
  b = 37
  c = sum(main[-n:])/n
  if main[b] < main[b] + 6:
    x = (x + 0.1)
  n = 33
  b = 18
  c = sum(opposite[-n:])/n
  if main[b] < main[b] + 9:
    x = 0.5
  n = 40
  b = 48
  c = sum(opposite[-n:])/n
  if main[22] < opposite[b] + 8:
    x = (x * 0.8)
  n = 13
  b = 13
  c = sum(opposite[-n:])/n
  if main[b] < main[b] + 1:
    x = (x * 0.4)
  n = 7
  b = 16
  c = sum(main[-n:])/n
  if c < opposite[b]:
    x = (x + 1.0)
  n = 42
  b = 17
  c = sum(main[-n:])/n
  if opposite[36] < main[5]:
    x = (x + 1.0)
  n = 47
  b = 20
  c = sum(opposite[-n:])/n
  if main[29] > main[b] + 5:
    x = 0.9
  n = 42
  b = 25
  c = opposite[b]
  if opposite[22] < opposite[b] + 2:
    x = (x - 0.4)
  n = 4
  b = 46
  c = main[23]
  if main[b] > main[2] + 0:
    x = (x * 0.9)
  n = 17
  b = 48
  c = opposite[b]
  if main[46] > opposite[b] + 8:
    x = (x + 0.9)
  n = 28
  b = 20
  c = main[b]
  if sum(opposite[-n:])/n < opposite[b]:
    x = (x / 0.9)
  n = 10
  b = 47
  c = main[b] + opposite[b]
  if opposite[30] < opposite[b] + 3:
    x = (x / 0.7)
  n = 38
  b = 31
  c = sum(opposite[-n:])/n
  if main[b] < main[b] + 1:
    x = (x - 0.3)
  n = 48
  b = 49
  c = sum(main[-n:])/n
  if opposite[45] < opposite[b] + 3:
    x = (x + 0.6)
  n = 28
  b = 40
  c = sum(main[-n:])/n
  if c < opposite[b]:
    x = (x * 0.3)
  n = 50
  b = 23
  c = opposite[47] * main[b]
  if main[37] > opposite[40] + 3:
    x = 0.4
  n = 3
  b = 48
  c = sum(main[-n:])/n
  if opposite[32] < opposite[37] + 2:
    x = (x + 0.3)
  n = 12
  b = 2
  c = sum(main[-n:])/n
  if sum(opposite[-n:])/n > sum(main[-n:])/n:
    x = (x / 0.2)
  n = 19
  b = 42
  c = sum(main[-n:])/n
  if c < main[b]:
    x = (x - 0.4)
  n = 37
  b = 7
  c = opposite[b]
  if sum(main[-n:])/n > sum(opposite[-n:])/n:
    x = (x + 0.4)
  n = 35
  b = 3
  c = main[b]
  if c < sum(main[-n:])/n:
    x = 0.9
  n = 24
  b = 40
  c = main[b]
  if c > sum(main[-n:])/n:
    x = (x + 0.8)
  n = 26
  b = 36
  c = sum(main[-n:])/n
  if opposite[b] > main[b]:
    x = 0.8
  n = 18
  b = 21
  c = sum(main[-n:])/n
  if c < opposite[b]:
    x = (x / 0.6)
  n = 30
  b = 11
  c = main[b]
  if c < main[b]:
    x = (x - 0.1)
  n = 20
  b = 2
  c = sum(main[-n:])/n
  if main[b] < main[b] + 7:
    x = (x * 0.2)
  n = 20
  b = 35
  c = main[26]
  if opposite[38] > main[b] + 4:
    x = (x + 0.8)
  n = 2
  b = 22
  c = sum(main[-n:])/n
  if c < main[11]:
    x = 0.3
  n = 22
  b = 48
  c = main[b]
  if c < sum(main[-n:])/n:
    x = (x + 0.4)
  n = 28
  b = 34
  c = sum(opposite[-n:])/n
  if opposite[b] > sum(opposite[-n:])/n:
    x = (x - 0.3)
  n = 23
  b = 16
  c = sum(opposite[-n:])/n
  if main[48] < main[27] + 5:
    x = 0.6
  n = 21
  b = 0
  c = sum(opposite[-n:])/n
  if sum(opposite[-n:])/n > opposite[b]:
    x = 1.0
  n = 3
  b = 27
  c = sum(opposite[-n:])/n
  if sum(main[-n:])/n > opposite[b]:
    x = (x / 0.1)
  n = 15
  b = 42
  c = main[b]
  if opposite[36] > opposite[4] + 2:
    x = (x / 0.1)
  n = 43
  b = 10
  c = main[b]
  if sum(opposite[-n:])/n < opposite[b]:
    x = (x / 0.5)
  n = 31
  b = 35
  c = sum(main[-n:])/n
  if opposite[b] > sum(main[-n:])/n:
    x = (x * 1.0)
  n = 45
  b = 45
  c = sum(opposite[-n:])/n
  if c > opposite[b]:
    x = 0.8
  n = 2
  b = 38
  c = sum(main[-n:])/n
  if main[22] < main[b] + 5:
    x = (x - 0.8)
  n = 5
  b = 16
  c = opposite[7]
  if main[9] < opposite[b] + 3:
    x = (x * 0.6)
  n = 23
  b = 0
  c = sum(main[-n:])/n * sum(opposite[-n:])/n
  if main[b] > main[b] + 9:
    x = (x + 0.8)
  n = 4
  b = 28
  c = sum(main[-n:])/n
  if opposite[45] > main[b] + 9:
    x = (x - 0.9)
  n = 27
  b = 42
  c = sum(opposite[-n:])/n
  if opposite[18] < main[21] + 0:
    x = (x / 0.2)
  n = 3
  b = 29
  c = main[b]
  if opposite[b] < main[25] + 6:
    x = 0.6
  n = 20
  b = 40
  c = sum(opposite[-n:])/n
  if main[b] < opposite[b]:
    x = (x * 0.1)
  n = 42
  b = 37
  c = main[b]
  if c < opposite[45]:
    x = (x - 0.2)
  n = 40
  b = 40
  c = main[b]
  if main[b] > opposite[0] + 6:
    x = (x / 0.8)
  n = 35
  b = 41
  c = sum(opposite[-n:])/n
  if c < main[b]:
    x = (x - 1.0)
  n = 3
  b = 35
  c = main[b]
  if c > main[b]:
    x = (x - 0.9)
  n = 7
  b = 14
  c = sum(main[-n:])/n
  if opposite[18] < opposite[10] + 9:
    x = (x + 0.8)
  n = 23
  b = 25
  c = main[b]
  if c > main[b]:
    x = 0.3
  n = 25
  b = 24
  c = sum(opposite[-n:])/n
  if main[b] < opposite[9] + 2:
    x = (x + 0.5)
  n = 49
  b = 21
  c = main[b]
  if sum(opposite[-n:])/n * opposite[b] + sum(main[-n:])/n * sum(main[-n:])/n < opposite[38]:
    x = (x - 0.8)
  return x
XXX_output_XXX = p()

Genotype:
[60914, 68662, 22705, 57132, 84343, 48306, 43387, 88793, 72874, 14252, 27662, 41236, 74064, 23611, 78149, 95526, 90705, 53539, 29559, 35404, 12249, 32857, 63548, 1956, 20383, 97816, 83415, 63641, 44257, 84420, 1223, 27827, 49056, 5289, 68048, 74405, 76404, 22067, 40792, 17061, 34736, 36320, 33754, 72667, 71700, 18165, 82378, 87756, 17712, 14812, 5198, 94821, 12329, 55551, 26702, 27238, 35326, 29984, 36661, 50582, 53941, 13929, 88597, 53921, 10863, 23954, 27018, 11313, 17249, 10342, 60757, 23364, 75990, 83242, 29790, 33813, 65872, 96118, 16318, 86446, 55361, 2177, 14740, 22103, 3173, 43925, 47267, 35722, 7103, 97082, 7162, 33663, 58416, 83201, 29656, 92012, 74777, 67766, 44129, 21892, 98644, 36750, 3791, 85706, 21630, 7147, 87805, 97938, 26485, 7681, 55228, 66113, 16781, 2921, 82907, 15391, 70289, 9517, 53163, 760, 18869, 74890, 69647, 58330, 2935, 61989, 80430, 69833, 80382, 20405, 49568, 588, 53389, 44837, 71200, 21880, 16038, 60132, 2590, 79433, 43178, 40961, 61301, 24461, 65295, 42708, 67410, 34464, 99748, 96699, 64052, 87402, 39098, 35145, 40103, 49158, 86589, 27066, 38581, 26436, 51948, 15620, 28639, 75656, 77736, 82786, 23010, 99369, 55796, 78730, 51533, 23593, 38525, 60226, 55820, 22937, 21194, 9990, 68941, 42226, 29160, 58248, 58793, 69883, 5467, 70808, 12338, 44632, 74206, 6199, 45410, 75308, 58237, 83034, 31613, 74466, 26101, 75649, 95005, 58517, 86735, 36207, 93020, 34232, 56098, 62604, 58133, 86080, 68217, 3976, 24060, 58531, 84105, 4783, 388, 47386, 50994, 4095, 55857, 15643, 15984, 9848, 59083, 68998, 85325, 1952, 45130, 97872, 94752, 63408, 47869, 99264, 40852, 83500, 87763, 33709, 62596, 45487, 47968, 41343, 31485, 4999, 31390, 70796, 54779, 23618, 18199, 67273, 45966, 51074, 7145, 57020, 42267, 9399, 11015, 36231, 81766, 50973, 42158, 39950, 47590, 87412, 23764, 59115, 29643, 58411, 46729, 46476, 96123, 63740, 13721, 41341, 27597, 78139, 5065, 42169, 88576, 95371, 62729, 82493, 43569, 24291, 64154, 77919, 70251, 12132, 30698, 78721, 10140, 38154, 52481, 9225, 75826, 80368, 36953, 88408, 9708, 6320, 27922, 66731, 204, 3652, 35325, 8295, 65229, 8972, 12051, 18775, 23449, 26548, 31436, 19316, 42289, 29877, 20575, 88500, 82668, 96590, 1219, 56650, 22045, 90933, 16958, 10288, 11432, 1553, 70826, 9776, 47460, 77321, 67368, 67673, 2000, 17100, 50537, 99808, 29007, 9074, 63942, 71782, 72325, 21380, 14738, 24844, 52911, 92092, 59033, 74159, 32985, 92946, 53075, 32978, 91642, 14880, 5196, 96206, 96308, 22070, 49402, 88282, 80816, 62232, 94446, 48428, 47943, 44685, 67140, 12259, 45539, 56427, 16490, 42160, 25157, 9151, 72954, 98485, 70198, 19956, 95452, 22339, 30552, 85376, 23098, 25631, 45344, 3299, 77927, 64216, 64146, 7413, 6237, 42610, 44147, 3502, 60113, 55694, 52771, 46489, 69993, 59346, 72131, 5316, 76934, 47609, 93751, 87784, 46837, 47982, 72337, 39201, 24837, 75967, 26214, 43740, 21040, 73757, 78239, 2157, 77315, 44301, 54572, 90352, 92217, 98160, 84792, 25237, 95064, 43636, 22958, 33170, 89113, 60313, 62374, 32352, 62998, 53530, 70561, 24254, 70512, 59223, 8359, 60523, 60680, 86274, 37118, 98863, 40128, 44004, 57666, 90226, 46670, 49759, 39222, 22218, 89093, 16644, 86714, 67377, 38241, 83071, 94768, 82064, 17119, 36895, 51824, 35746, 55231, 38902, 79162, 60789, 29271, 88968, 16849, 35895, 8806, 9610, 25205, 72728, 87178, 63947, 76860, 91209, 35509, 78446, 1492, 56443, 42672, 6095, 22667, 5136, 29316, 33171, 24868, 53263, 94284, 8254, 70642, 51909, 74833, 84084, 43158, 77814, 92377, 16063, 69376, 23345, 49756, 65759, 7954, 92, 93882, 94752, 63869, 36507, 74010, 67314, 6564, 61516, 75211, 1464, 19835, 28150, 23494, 87113, 15226, 51789, 80548, 41436, 37379, 18355, 7925, 59250, 26736, 21765, 34282, 26326, 72908, 17240, 97845, 1525, 35608, 64012, 24686, 40077, 98272, 97690, 37227, 72142, 32529, 57347, 99339, 62344, 18793, 94212, 46592, 85913, 42818, 61612, 50749, 99839, 73078, 40003, 16621, 74210, 35723, 64530, 82320, 2802, 10253, 30200, 95248, 29848, 94648, 21144, 28577, 79773, 32280, 25254, 79291, 71437, 23466, 57298, 65989, 44269, 24258, 11451, 36858, 12388, 63084, 30730, 32898, 85547, 75621, 38959, 4616, 94532, 52035, 60045, 7595, 50089, 5025, 13954, 45828, 91129, 11848, 12607, 26585, 71957, 58660, 89822, 29304, 72928, 36848, 3228, 76957, 72089, 91051, 20439, 55926, 84745, 8353, 79579, 56436, 60142, 39559, 1313, 25638, 96013, 97059, 40818, 2767, 31855, 54544, 25088, 88021, 7627, 37862, 45120, 62026, 55842, 25805, 33505, 82824, 76758, 12078, 79819, 74487, 44619, 33897, 11073, 98456, 59205, 22464, 81529, 82801, 60142, 12994, 65068, 26271, 80682, 67909, 37937, 46048, 31089, 24018, 56522, 74614, 49474, 50540, 28662, 11039, 22325, 81980, 37147, 55009, 78507, 12542, 54654, 84037, 94224, 14150, 90566, 31759, 87355, 31099, 5263, 23595, 93233, 3715, 65172, 37947, 21301, 95418, 36946, 30942, 96058, 7695, 80087, 44453, 68759, 85054, 37502, 60606, 51392, 2347, 35314, 41118, 48774, 24839, 33401, 61833, 26266, 61660, 90291, 51731, 27014, 75597, 54114, 25899, 45681, 56056, 17561, 81109, 34486, 42015, 85561, 91728, 71370, 34445, 92547, 43348, 92232, 25517, 18933, 88432, 96452, 5341, 29213, 30862, 63216, 17845, 92165, 38920, 45981, 4164, 51208, 18171, 78121, 90621, 46483, 37496, 10708, 86582, 79953, 50646, 2609, 43693, 484, 22957, 71523, 77502, 98934, 95060, 13638, 56677, 46739, 50463, 85206, 6670, 2556, 36061, 65816, 34749, 96198, 81945, 42346, 91801, 20067, 95960, 67101, 24863, 87336, 91887, 50580, 98466, 56770, 55396, 88006, 30049, 14222, 15130, 38136, 80120, 86377, 87698, 643, 36687, 19601, 36384, 67648, 76257, 55600, 20857, 87511, 20962, 89009, 89074, 26875, 72424, 74476, 9618, 88905, 14342, 46525, 16528, 70388, 85345, 41989, 82162, 22768, 12857, 35990, 21924, 54184, 57395, 14468, 61355, 11534, 94554, 43934, 94423, 47176, 63404, 58607, 66568, 50281, 219, 69330, 326, 80770, 98873, 75886, 95233, 42202, 79382, 96758, 27667, 71540, 83004, 33674, 99976, 61597, 31923, 77852, 98585, 20093, 97177, 73547, 78234, 25322, 14073, 50859, 88822, 9174, 15464, 65330, 96932, 84044, 2759, 78664, 16146, 84198, 29903, 87988, 54076, 57321, 29175, 82788, 14388, 12031, 31093, 28756, 59870, 72703, 77164, 64804, 70613, 4380, 31987, 82808, 71266, 62969, 72408, 46323, 611, 24547, 98732, 47988, 64387, 38528, 15707, 98038, 38441, 79287, 46497, 33999, 63574, 99804, 76842, 31494, 44915, 73550, 14085, 32503, 7663, 24450, 69225, 94401, 66020, 17919, 10263, 11088, 10743, 41515, 10170, 48364, 81961, 7830, 85119, 52152, 77041, 37488, 64749, 24813, 39792, 40584, 17269, 76816, 34908, 63840, 67884, 82342, 42105, 96944, 35270, 57848, 66089, 46272, 66912, 79041, 23083, 79780, 2528, 11282, 75827, 91275, 8051, 1891, 49752, 65739, 13720, 57888, 5949, 49513, 85893, 79672, 42670, 33568, 65540, 77116, 7017, 77651, 39483, 14764, 63197, 8629, 92914, 17950, 50545, 75358, 85434, 68069, 86483, 54609, 96434, 53672, 72034, 4433, 12246, 27693, 6436, 3463, 34369, 42776, 74056, 93987, 42837, 58695, 36590, 76611, 87597, 44557, 44602, 14821, 58221, 40870, 92837, 82384, 83618, 24431, 47733, 89696, 76152, 22842, 54818, 52039, 35370, 66220, 68784, 58165, 69727, 98007, 9025, 74432, 11888, 96880, 8584, 27349, 60097, 55263, 53149, 70055, 16786, 51213, 24717, 72563, 72233, 27085, 42395, 57421, 60968, 79864, 72471, 48548, 80210, 33989, 7785, 47190, 32138, 95904, 60123, 93950, 68616, 69368, 68299, 27271, 64977, 8587, 18374, 42130, 30065, 7525, 18906, 65385, 78572, 42130, 28595, 86490, 50932, 48499, 3727, 96488, 33944, 87951, 8187, 21965, 75624, 20480, 67683, 53949, 60527, 91891, 98601, 6022, 64791, 73140, 37479, 32711, 27400, 99977, 1278, 69928, 80966, 2292, 60040, 64804, 5827, 71937, 998, 24709, 52726, 32795, 67535, 31644, 17313, 46073, 62532, 18706, 31359, 3237, 18675, 29564, 5758, 13536, 64585, 5728, 17253, 82328, 85730, 13683, 46203, 11109, 37399, 26251, 81862, 3634, 20020, 87769, 49639, 5941, 91767, 59409, 44977, 57191, 75104, 99439, 4375, 66809, 36658, 75025, 2638, 63204, 85726, 51184, 30855, 31620, 41746, 83314, 87167, 63912, 32114, 55166, 86380, 19727, 31963, 38952, 8491, 5561, 49839, 95926, 14164, 62272, 14709, 11152, 97589, 11784, 57029, 80105, 61252, 70342, 98704, 90217, 51966, 52969, 4292, 93067, 39768, 62538, 52165, 75742, 99368, 45863, 46607, 12546, 50224, 43899, 35411, 26232, 25419, 38566, 35779, 44641, 2757, 54900, 66612, 3389, 3787, 41794, 37326, 7195, 59432, 56381, 71002, 35827, 4096, 65850, 9772, 84492, 73824, 96262, 5378, 75402, 21004, 61182, 61039, 67191, 48520, 70867, 61566, 15122, 32056, 92374, 58752, 204, 60331, 46985, 91923, 1789, 88288, 76220, 37356, 30455, 82901, 84956, 7002, 23739, 39575, 99098, 20140, 26501, 14144, 79709, 11283, 7737, 92520, 1434, 68025, 77956, 22857, 25144, 16315, 36044, 43382, 28847, 67955, 10891, 58670, 38074, 74101, 34452, 61827, 97188, 14612, 94192, 67804, 90861, 94140, 79679, 46685, 49558, 47056, 68929, 41533, 5919, 46328, 65827, 22037, 90544, 31797, 960, 49706, 3060, 76449, 50141, 11377, 95228, 72936, 9836, 26851, 45400, 25948, 57779, 99966, 93896, 24767, 57402, 41797, 68213, 79275, 82198, 69770, 18791, 91603, 70583, 39798, 3107, 50720, 64260, 58424, 82127, 68632, 48073, 70796, 65070, 31066, 42588, 6367, 43560, 58550, 56886, 75828, 5484, 95039, 8700, 49190, 54568, 13263, 83868, 28115, 22252, 77467, 52776, 65516, 69780, 60045, 52973, 3555, 90033, 80620, 7786, 48095, 81071, 47094, 16467, 83709, 89147, 70690, 80286, 81515, 28832, 24474, 48352, 6003, 81516, 71882, 17420, 24346, 36718, 87152, 14432, 23125, 35449, 94943, 56531, 18736, 55935, 55867, 37676, 65592, 87892, 32015, 74800, 94069, 99485, 77728, 41267, 29111, 20494, 64833, 66059, 79572, 33410, 88087, 1648, 9530, 99976, 4062, 65083, 68895, 97659, 97822, 58439, 54722, 78663, 62193, 40662, 95556, 15859, 57192, 80770, 33266, 26115, 65179, 93611, 3250, 67646, 29588, 11194, 11504, 49945, 67888, 24533, 18736, 49725, 55573, 5039, 98221, 10705, 98537, 52175, 74224, 77028, 45813, 61009, 45614, 92724, 78245, 4165, 26082, 75125, 40472, 66516, 22068, 14860, 96375, 93287, 68196, 63676, 55515, 55177, 7247, 2833, 73205, 66725, 57554, 89009, 55667, 82568, 43220, 35181, 65392, 38818, 38018, 92467, 17400, 13887, 82000, 17712, 56102, 96454, 68366, 79281, 43414, 43104, 60699, 88711, 69865, 28742, 10872, 56932, 25703, 61152, 91695, 84475, 7147, 66336, 31787, 45091, 75447, 34032, 3729, 6676, 60857, 48664, 61461, 12230, 3233, 84652, 15952, 6438, 2502, 35797, 34850, 81505, 78098, 8488, 39151, 17751, 20383, 14367, 27672, 23892, 93214, 67251, 74288, 59444, 42899, 78299, 68858, 12709, 28007, 11554, 6530, 1211, 59817, 37466, 92738, 11761, 30491, 95330, 29586, 41298, 78685, 45941, 62709, 74954, 19436, 84513, 77395, 59480, 50164, 69426, 68422, 62632, 4576, 77831, 87934, 64491, 17086, 17462, 2433, 80562, 90975, 38054, 30128, 86569, 58788, 68806, 97231, 75292, 87001, 45916, 56905, 25615, 95428, 25312, 70864, 87745, 48364, 75479, 64497, 45786, 78746, 27830, 91660, 22860, 53250, 15964, 33669, 52331, 42118, 16501, 34746, 84755, 80253, 94492, 79729, 89068, 63641, 37399, 1182, 54921, 34896, 54138, 4389, 99073, 77930, 63944, 53790, 74471, 71454, 71474, 9254, 35270, 90804, 99151, 40621, 79226, 70019, 12213, 96217, 88901, 31359, 31930, 27133, 87473, 10775, 70073, 70809, 80541, 96800, 69831, 97613, 25492, 9284, 48590, 86689, 5457, 26136, 1097, 38297, 92010, 39889, 76003, 198, 12907, 62783, 85878, 38965, 95881, 33774, 97272, 58858, 10010, 23242, 17904, 2467, 86860, 85420, 81498, 55243, 57078, 22913, 21653, 29030, 30819, 37232, 69702, 74013, 14588, 99623, 55594, 39806, 36502, 5471, 36139, 14826, 33255, 38359, 65208, 83788, 33334, 9193, 21534, 16544, 65342, 75821, 47087, 34168, 59774, 78810, 8882, 83891, 54441, 71157, 56936, 16254, 91643, 34653, 75234, 43525, 13550, 62034, 50723, 46115, 96635, 27817, 96573, 31212, 90668, 53033, 55463, 12754, 32126, 81771, 81001, 26507, 83911, 25015, 4661, 32571, 6066, 39954, 11141, 44278, 84957, 53339, 14088, 2748, 75340, 51046, 72010, 74475, 99955, 38208, 70079, 25581, 84571, 24723, 15412, 11077, 66846, 26741, 22318, 51217, 92839, 80955, 66557, 31338, 19260, 38987, 94778, 96944, 63369, 15381, 30407, 30233, 66798, 51396, 6578, 13120, 96920, 56306, 25239, 16888, 27027, 65090, 51634, 83023, 30577, 54842, 38283, 49880, 53642, 92930, 54252, 82128, 77642, 16553, 66287, 75835, 78621, 60630, 6215, 68034, 11159, 62121, 17502, 43760, 54075, 70899, 66918, 94856, 32666, 80101, 47112, 34656, 4051, 8348, 80221, 80112, 27596, 20958, 8663, 38006, 74194, 23618, 66999, 29155, 71358, 91594, 11118, 60983, 53091, 79463, 79242, 47545, 69345, 51777, 73311, 54045, 79713, 81000, 89511, 41552, 51275, 1809, 95434, 55166, 97358, 35119, 49106, 52078, 21028, 37867, 88811, 25731, 17598, 34695, 80551, 93355, 83570, 85643, 87664, 4370, 54475, 11840, 57737, 46426, 86820, 18751, 12834, 15280, 20367, 42065, 57769, 66402, 97958, 26136, 48492, 19839, 52055, 41529, 56397, 14948, 97986, 8613, 79424, 25724, 60525, 50775, 97543, 30655, 37727, 34186, 75301, 12123, 15233, 95604, 56410, 91084, 449, 5702, 71482, 4378, 77777, 16978, 2707, 80144, 98460, 88739, 96696, 97734, 62195, 89226, 3768, 24380, 72542, 69881, 12277, 82509, 93273]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<a> n =  (<n> 40)) {::} (<b> b =  (<n> 37)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[b])  >  (<point> main[b])  +  (<d> 1) :{:x =  (<expr> (x /  (<const> 0.7) )) :}) {::} (<code> (<a> n =  (<n> 30)) {::} (<b> b =  (<n> 9)) {::} (<c> c =  (<data> (<combo> (<data> (<point> main[b]))   (<combine> /)   (<data> (<combo> (<data> (<n_avg> sum(opposite[-n:])/n))   (<combine> /)   (<data> (<n_avg> sum(opposite[-n:])/n))))))) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> sum(main[-n:])/n))   (<combine> +)   (<data> (<point> opposite[ (<n> 45) ]))))   (<combine> -)   (<data> (<point> main[b]))))   (<eval> >)   (<data> (<point> main[ (<n> 12) ])) :{:x =  (<expr> (x /  (<const> 0.2) )) :}) {::} (<code> (<a> n =  (<n> 34)) {::} (<b> b =  (<n> 43)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> <)   (<data> (<n_avg> sum(main[-n:])/n)) :{:x =  (<expr> (x *  (<const> 0.4) )) :}) {::} (<code> (<a> n =  (<n> 16)) {::} (<b> b =  (<n> 0)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<data> (<point> main[ (<n> 1) ]))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[ (<n> 29) ]))   (<combine> *)   (<data> (<n_avg> sum(main[-n:])/n))))   (<combine> -)   (<data> (<point> main[b]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[b]))   (<combine> *)   (<data> (<combo> (<data> (<n_avg> sum(opposite[-n:])/n))   (<combine> -)   (<data> (<n_avg> sum(opposite[-n:])/n)))))))) :{:x =  (<expr> (x +  (<const> 0.9) )) :}) {::} (<code> (<a> n =  (<n> 14)) {::} (<b> b =  (<n> 40)) {::} (<c> c =  (<data> (<point> opposite[ (<n> 46) ]))) {::} (<if> if c  (<eval> >)   (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> *)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> sum(opposite[-n:])/n))   (<combine> -)   (<data> (<point> main[b]))))   (<combine> *)   (<data> (<n_avg> sum(main[-n:])/n)))))) :{:x =  (<expr> (x *  (<const> 0.9) )) :}) {::} (<code> (<a> n =  (<n> 32)) {::} (<b> b =  (<n> 21)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<point> main[b])  <  (<point> main[ (<n> 32) ])  +  (<d> 5) :{:x =  (<expr> (x *  (<const> 0.9) )) :}) {::} (<code> (<a> n =  (<n> 25)) {::} (<b> b =  (<n> 30)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> main[ (<n> 21) ]))   (<eval> >)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x *  (<const> 0.6) )) :}) {::} (<code> (<a> n =  (<n> 38)) {::} (<b> b =  (<n> 45)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<combo> (<data> (<point> main[b]))   (<combine> *)   (<data> (<point> main[ (<n> 28) ]))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> sum(opposite[-n:])/n))   (<combine> *)   (<data> (<point> opposite[b])))) :{:x =  (<expr> (<const> 0.8)) :}) {::} (<code> (<a> n =  (<n> 47)) {::} (<b> b =  (<n> 49)) {::} (<c> c =  (<data> (<combo> (<data> (<n_avg> sum(main[-n:])/n))   (<combine> +)   (<data> (<point> opposite[b]))))) {::} (<if> if  (<point> main[b])  <  (<point> main[ (<n> 45) ])  +  (<d> 5) :{:x =  (<expr> (x -  (<const> 0.4) )) :}) {::} (<code> (<a> n =  (<n> 25)) {::} (<b> b =  (<n> 2)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<n_avg> sum(opposite[-n:])/n))   (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x *  (<const> 1.0) )) :})) {::} (<code> (<a> n =  (<n> 28)) {::} (<b> b =  (<n> 18)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[ (<n> 43) ])  <  (<point> opposite[b])  +  (<d> 6) :{:x =  (<expr> (x /  (<const> 0.6) )) :})) {::} (<code> (<a> n =  (<n> 15)) {::} (<b> b =  (<n> 21)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<point> main[ (<n> 49) ])  >  (<point> main[b])  +  (<d> 5) :{:x =  (<expr> (x *  (<const> 0.2) )) :}))) {::} (<code> (<a> n =  (<n> 39)) {::} (<b> b =  (<n> 2)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if c  (<eval> <)   (<data> (<point> opposite[ (<n> 50) ])) :{:x =  (<expr> (x *  (<const> 1.0) )) :}) {::} (<code> (<a> n =  (<n> 42)) {::} (<b> b =  (<n> 45)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[b])  >  (<point> opposite[b])  +  (<d> 6) :{:x =  (<expr> (x *  (<const> 0.4) )) :}) {::} (<code> (<a> n =  (<n> 47)) {::} (<b> b =  (<n> 23)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[b])  <  (<point> main[b])  +  (<d> 1) :{:x =  (<expr> (<const> 1.0)) :})) {::} (<code> (<a> n =  (<n> 38)) {::} (<b> b =  (<n> 42)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<point> opposite[ (<n> 40) ])  >  (<point> opposite[b])  +  (<d> 3) :{:x =  (<expr> (x *  (<const> 0.9) )) :})) {::} (<code> (<a> n =  (<n> 38)) {::} (<b> b =  (<n> 30)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<data> (<n_avg> sum(opposite[-n:])/n))   (<eval> >)   (<data> (<n_avg> sum(main[-n:])/n)) :{:x =  (<expr> (x -  (<const> 0.3) )) :}))))))))) {::} (<code> (<a> n =  (<n> 50)) {::} (<b> b =  (<n> 24)) {::} (<c> c =  (<data> (<combo> (<data> (<n_avg> sum(main[-n:])/n))   (<combine> /)   (<data> (<combo> (<data> (<n_avg> sum(main[-n:])/n))   (<combine> *)   (<data> (<combo> (<data> (<point> main[ (<n> 32) ]))   (<combine> +)   (<data> (<n_avg> sum(main[-n:])/n))))))))) {::} (<if> if  (<point> opposite[b])  <  (<point> main[b])  +  (<d> 9) :{:x =  (<expr> (x /  (<const> 0.8) )) :}) {::} (<code> (<a> n =  (<n> 14)) {::} (<b> b =  (<n> 24)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> >)   (<data> (<point> opposite[ (<n> 5) ])) :{:x =  (<expr> (x /  (<const> 0.8) )) :}) {::} (<code> (<a> n =  (<n> 18)) {::} (<b> b =  (<n> 25)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 28) ])  >  (<point> opposite[b])  +  (<d> 6) :{:x =  (<expr> (x +  (<const> 0.7) )) :})) {::} (<code> (<a> n =  (<n> 13)) {::} (<b> b =  (<n> 19)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> <)   (<data> (<n_avg> sum(main[-n:])/n)) :{:x =  (<expr> (<const> 0.8)) :}) {::} (<code> (<a> n =  (<n> 50)) {::} (<b> b =  (<n> 2)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> *)   (<data> (<n_avg> sum(main[-n:])/n)))) :{:x =  (<expr> (<const> 0.2)) :}) {::} (<code> (<a> n =  (<n> 12)) {::} (<b> b =  (<n> 37)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<point> main[b])  <  (<point> main[b])  +  (<d> 6) :{:x =  (<expr> (x +  (<const> 0.1) )) :}) {::} (<code> (<a> n =  (<n> 33)) {::} (<b> b =  (<n> 18)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<point> main[b])  <  (<point> main[b])  +  (<d> 9) :{:x =  (<expr> (<const> 0.5)) :}) {::} (<code> (<a> n =  (<n> 40)) {::} (<b> b =  (<n> 48)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<point> main[ (<n> 22) ])  <  (<point> opposite[b])  +  (<d> 8) :{:x =  (<expr> (x *  (<const> 0.8) )) :}) {::} (<code> (<a> n =  (<n> 13)) {::} (<b> b =  (<n> 13)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<point> main[b])  <  (<point> main[b])  +  (<d> 1) :{:x =  (<expr> (x *  (<const> 0.4) )) :})) {::} (<code> (<a> n =  (<n> 7)) {::} (<b> b =  (<n> 16)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if c  (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x +  (<const> 1.0) )) :}))) {::} (<code> (<a> n =  (<n> 42)) {::} (<b> b =  (<n> 17)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<data> (<point> opposite[ (<n> 36) ]))   (<eval> <)   (<data> (<point> main[ (<n> 5) ])) :{:x =  (<expr> (x +  (<const> 1.0) )) :}) {::} (<code> (<a> n =  (<n> 47)) {::} (<b> b =  (<n> 20)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<point> main[ (<n> 29) ])  >  (<point> main[b])  +  (<d> 5) :{:x =  (<expr> (<const> 0.9)) :})) {::} (<code> (<a> n =  (<n> 42)) {::} (<b> b =  (<n> 25)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 22) ])  <  (<point> opposite[b])  +  (<d> 2) :{:x =  (<expr> (x -  (<const> 0.4) )) :}))) {::} (<code> (<a> n =  (<n> 4)) {::} (<b> b =  (<n> 46)) {::} (<c> c =  (<data> (<point> main[ (<n> 23) ]))) {::} (<if> if  (<point> main[b])  >  (<point> main[ (<n> 2) ])  +  (<d> 0) :{:x =  (<expr> (x *  (<const> 0.9) )) :}) {::} (<code> (<a> n =  (<n> 17)) {::} (<b> b =  (<n> 48)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[ (<n> 46) ])  >  (<point> opposite[b])  +  (<d> 8) :{:x =  (<expr> (x +  (<const> 0.9) )) :})) {::} (<code> (<a> n =  (<n> 28)) {::} (<b> b =  (<n> 20)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<n_avg> sum(opposite[-n:])/n))   (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x /  (<const> 0.9) )) :})))) {::} (<code> (<a> n =  (<n> 10)) {::} (<b> b =  (<n> 47)) {::} (<c> c =  (<data> (<combo> (<data> (<point> main[b]))   (<combine> +)   (<data> (<point> opposite[b]))))) {::} (<if> if  (<point> opposite[ (<n> 30) ])  <  (<point> opposite[b])  +  (<d> 3) :{:x =  (<expr> (x /  (<const> 0.7) )) :}) {::} (<code> (<a> n =  (<n> 38)) {::} (<b> b =  (<n> 31)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<point> main[b])  <  (<point> main[b])  +  (<d> 1) :{:x =  (<expr> (x -  (<const> 0.3) )) :}) {::} (<code> (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 49)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<point> opposite[ (<n> 45) ])  <  (<point> opposite[b])  +  (<d> 3) :{:x =  (<expr> (x +  (<const> 0.6) )) :})) {::} (<code> (<a> n =  (<n> 28)) {::} (<b> b =  (<n> 40)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if c  (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x *  (<const> 0.3) )) :}))))) {::} (<code> (<a> n =  (<n> 50)) {::} (<b> b =  (<n> 23)) {::} (<c> c =  (<data> (<combo> (<data> (<point> opposite[ (<n> 47) ]))   (<combine> *)   (<data> (<point> main[b]))))) {::} (<if> if  (<point> main[ (<n> 37) ])  >  (<point> opposite[ (<n> 40) ])  +  (<d> 3) :{:x =  (<expr> (<const> 0.4)) :}) {::} (<code> (<a> n =  (<n> 3)) {::} (<b> b =  (<n> 48)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<point> opposite[ (<n> 32) ])  <  (<point> opposite[ (<n> 37) ])  +  (<d> 2) :{:x =  (<expr> (x +  (<const> 0.3) )) :}) {::} (<code> (<a> n =  (<n> 12)) {::} (<b> b =  (<n> 2)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<data> (<n_avg> sum(opposite[-n:])/n))   (<eval> >)   (<data> (<n_avg> sum(main[-n:])/n)) :{:x =  (<expr> (x /  (<const> 0.2) )) :}) {::} (<code> (<a> n =  (<n> 19)) {::} (<b> b =  (<n> 42)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x -  (<const> 0.4) )) :})) {::} (<code> (<a> n =  (<n> 37)) {::} (<b> b =  (<n> 7)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<data> (<n_avg> sum(main[-n:])/n))   (<eval> >)   (<data> (<n_avg> sum(opposite[-n:])/n)) :{:x =  (<expr> (x +  (<const> 0.4) )) :})) {::} (<code> (<a> n =  (<n> 35)) {::} (<b> b =  (<n> 3)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<n_avg> sum(main[-n:])/n)) :{:x =  (<expr> (<const> 0.9)) :}))) {::} (<code> (<a> n =  (<n> 24)) {::} (<b> b =  (<n> 40)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> >)   (<data> (<n_avg> sum(main[-n:])/n)) :{:x =  (<expr> (x +  (<const> 0.8) )) :}) {::} (<code> (<a> n =  (<n> 26)) {::} (<b> b =  (<n> 36)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<data> (<point> opposite[b]))   (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (<const> 0.8)) :}))) {::} (<code> (<a> n =  (<n> 18)) {::} (<b> b =  (<n> 21)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if c  (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x /  (<const> 0.6) )) :}) {::} (<code> (<a> n =  (<n> 30)) {::} (<b> b =  (<n> 11)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x -  (<const> 0.1) )) :})) {::} (<code> (<a> n =  (<n> 20)) {::} (<b> b =  (<n> 2)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<point> main[b])  <  (<point> main[b])  +  (<d> 7) :{:x =  (<expr> (x *  (<const> 0.2) )) :})))) {::} (<code> (<a> n =  (<n> 20)) {::} (<b> b =  (<n> 35)) {::} (<c> c =  (<data> (<point> main[ (<n> 26) ]))) {::} (<if> if  (<point> opposite[ (<n> 38) ])  >  (<point> main[b])  +  (<d> 4) :{:x =  (<expr> (x +  (<const> 0.8) )) :}) {::} (<code> (<a> n =  (<n> 2)) {::} (<b> b =  (<n> 22)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[ (<n> 11) ])) :{:x =  (<expr> (<const> 0.3)) :}) {::} (<code> (<a> n =  (<n> 22)) {::} (<b> b =  (<n> 48)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<n_avg> sum(main[-n:])/n)) :{:x =  (<expr> (x +  (<const> 0.4) )) :})) {::} (<code> (<a> n =  (<n> 28)) {::} (<b> b =  (<n> 34)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<data> (<point> opposite[b]))   (<eval> >)   (<data> (<n_avg> sum(opposite[-n:])/n)) :{:x =  (<expr> (x -  (<const> 0.3) )) :})) {::} (<code> (<a> n =  (<n> 23)) {::} (<b> b =  (<n> 16)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<point> main[ (<n> 48) ])  <  (<point> main[ (<n> 27) ])  +  (<d> 5) :{:x =  (<expr> (<const> 0.6)) :}))) {::} (<code> (<a> n =  (<n> 21)) {::} (<b> b =  (<n> 0)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<data> (<n_avg> sum(opposite[-n:])/n))   (<eval> >)   (<data> (<point> opposite[b])) :{:x =  (<expr> (<const> 1.0)) :}) {::} (<code> (<a> n =  (<n> 3)) {::} (<b> b =  (<n> 27)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<data> (<n_avg> sum(main[-n:])/n))   (<eval> >)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x /  (<const> 0.1) )) :})) {::} (<code> (<a> n =  (<n> 15)) {::} (<b> b =  (<n> 42)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 36) ])  >  (<point> opposite[ (<n> 4) ])  +  (<d> 2) :{:x =  (<expr> (x /  (<const> 0.1) )) :})) {::} (<code> (<a> n =  (<n> 43)) {::} (<b> b =  (<n> 10)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<n_avg> sum(opposite[-n:])/n))   (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x /  (<const> 0.5) )) :}))) {::} (<code> (<a> n =  (<n> 31)) {::} (<b> b =  (<n> 35)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<data> (<point> opposite[b]))   (<eval> >)   (<data> (<n_avg> sum(main[-n:])/n)) :{:x =  (<expr> (x *  (<const> 1.0) )) :}) {::} (<code> (<a> n =  (<n> 45)) {::} (<b> b =  (<n> 45)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if c  (<eval> >)   (<data> (<point> opposite[b])) :{:x =  (<expr> (<const> 0.8)) :})) {::} (<code> (<a> n =  (<n> 2)) {::} (<b> b =  (<n> 38)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<point> main[ (<n> 22) ])  <  (<point> main[b])  +  (<d> 5) :{:x =  (<expr> (x -  (<const> 0.8) )) :}))))) {::} (<code> (<a> n =  (<n> 5)) {::} (<b> b =  (<n> 16)) {::} (<c> c =  (<data> (<point> opposite[ (<n> 7) ]))) {::} (<if> if  (<point> main[ (<n> 9) ])  <  (<point> opposite[b])  +  (<d> 3) :{:x =  (<expr> (x *  (<const> 0.6) )) :}) {::} (<code> (<a> n =  (<n> 23)) {::} (<b> b =  (<n> 0)) {::} (<c> c =  (<data> (<combo> (<data> (<n_avg> sum(main[-n:])/n))   (<combine> *)   (<data> (<n_avg> sum(opposite[-n:])/n))))) {::} (<if> if  (<point> main[b])  >  (<point> main[b])  +  (<d> 9) :{:x =  (<expr> (x +  (<const> 0.8) )) :}) {::} (<code> (<a> n =  (<n> 4)) {::} (<b> b =  (<n> 28)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<point> opposite[ (<n> 45) ])  >  (<point> main[b])  +  (<d> 9) :{:x =  (<expr> (x -  (<const> 0.9) )) :}) {::} (<code> (<a> n =  (<n> 27)) {::} (<b> b =  (<n> 42)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<point> opposite[ (<n> 18) ])  <  (<point> main[ (<n> 21) ])  +  (<d> 0) :{:x =  (<expr> (x /  (<const> 0.2) )) :})) {::} (<code> (<a> n =  (<n> 3)) {::} (<b> b =  (<n> 29)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[b])  <  (<point> main[ (<n> 25) ])  +  (<d> 6) :{:x =  (<expr> (<const> 0.6)) :})) {::} (<code> (<a> n =  (<n> 20)) {::} (<b> b =  (<n> 40)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x *  (<const> 0.1) )) :}))) {::} (<code> (<a> n =  (<n> 42)) {::} (<b> b =  (<n> 37)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> opposite[ (<n> 45) ])) :{:x =  (<expr> (x -  (<const> 0.2) )) :}) {::} (<code> (<a> n =  (<n> 40)) {::} (<b> b =  (<n> 40)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[b])  >  (<point> opposite[ (<n> 0) ])  +  (<d> 6) :{:x =  (<expr> (x /  (<const> 0.8) )) :})) {::} (<code> (<a> n =  (<n> 35)) {::} (<b> b =  (<n> 41)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x -  (<const> 1.0) )) :})) {::} (<code> (<a> n =  (<n> 3)) {::} (<b> b =  (<n> 35)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x -  (<const> 0.9) )) :}))) {::} (<code> (<a> n =  (<n> 7)) {::} (<b> b =  (<n> 14)) {::} (<c> c =  (<data> (<n_avg> sum(main[-n:])/n))) {::} (<if> if  (<point> opposite[ (<n> 18) ])  <  (<point> opposite[ (<n> 10) ])  +  (<d> 9) :{:x =  (<expr> (x +  (<const> 0.8) )) :}) {::} (<code> (<a> n =  (<n> 23)) {::} (<b> b =  (<n> 25)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (<const> 0.3)) :})) {::} (<code> (<a> n =  (<n> 25)) {::} (<b> b =  (<n> 24)) {::} (<c> c =  (<data> (<n_avg> sum(opposite[-n:])/n))) {::} (<if> if  (<point> main[b])  <  (<point> opposite[ (<n> 9) ])  +  (<d> 2) :{:x =  (<expr> (x +  (<const> 0.5) )) :})))))) {::} (<code> (<a> n =  (<n> 49)) {::} (<b> b =  (<n> 21)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> sum(opposite[-n:])/n))   (<combine> *)   (<data> (<point> opposite[b]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> sum(main[-n:])/n))   (<combine> *)   (<data> (<n_avg> sum(main[-n:])/n))))))   (<eval> <)   (<data> (<point> opposite[ (<n> 38) ])) :{:x =  (<expr> (x -  (<const> 0.8) )) :})))))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
0.5069570099261687