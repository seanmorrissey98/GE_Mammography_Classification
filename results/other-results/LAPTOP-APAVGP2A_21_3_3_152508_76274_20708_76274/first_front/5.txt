Generation:
2

Phenotype:
def p():
  x = 0.0
  index = 3
  n = 37
  b = 19
  c = main[b] + sum(opposite[-index:])
  if opposite[17] > main[b]:
    x = (x - 0.5)
  index = 10
  n = 50
  b = 1
  c = opposite[b] - opposite[b]
  if c < opposite[b] * opposite[b]:
    x = (x - 0.9)
  index = 39
  n = 31
  b = 27
  c = sum(main[-index:])
  if sum(opposite[-index:]) > sum(main[:-index]):
    x = (x - 0.3)
  index = 12
  n = 32
  b = 18
  c = opposite[b]
  if opposite[b] > main[b]:
    x = (x - 0.6)
  index = 19
  n = 36
  b = 31
  c = main[b]
  if opposite[45] < main[b] + 3:
    x = (x / 0.4)
  index = 6
  n = 7
  b = 15
  c = sum(main[-index:])
  if c < sum(main[-index:]):
    x = (x - 0.1)
  index = 4
  n = 50
  b = 9
  c = opposite[b]
  if abs(sum(main) - sum(opposite)) > 1000:
    x = 0.9
  index = 36
  n = 50
  b = 40
  c = opposite[b]
  if opposite[27] > main[b] + 9:
    x = (x + 0.5)
  index = 31
  n = 48
  b = 47
  c = main[b]
  if main[19] > opposite[b] + 5:
    x = (x / 0.6)
  index = 29
  n = 2
  b = 8
  c = opposite[b]
  if main[b] < opposite[b] + 9:
    x = (x / 0.4)
  index = 8
  n = 29
  b = 34
  c = main[b]
  if main[b] > main[27]:
    x = (x + 0.9)
  index = 1
  n = 48
  b = 8
  c = opposite[b]
  if main[b] < main[b]:
    x = (x + 0.8)
  index = 50
  n = 31
  b = 15
  c = opposite[b]
  if c > opposite[b]:
    x = (x / 0.6)
  index = 32
  n = 27
  b = 44
  c = main[b]
  if opposite[b] > main[b] + 5:
    x = 0.1
  index = 32
  n = 39
  b = 50
  c = main[b]
  if opposite[37] < opposite[35] + 3:
    x = (x / 0.5)
  index = 10
  n = 11
  b = 47
  c = main[b]
  if main[b] < opposite[b]:
    x = (x - 0.9)
  index = 6
  n = 34
  b = 46
  c = main[b]
  if c < opposite[b]:
    x = 0.9
  return x
XXX_output_XXX = p()

Genotype:
[20546, 25884, 48210, 63334, 74563, 13661, 52768, 83946, 56651, 32807, 71062, 32233, 41720, 97540, 15424, 34477, 38727, 52818, 37785, 85572, 49481, 40894, 29419, 36424, 75025, 4964, 28242, 91433, 14782, 98942, 88184, 14726, 70409, 67575, 38974, 48574, 93610, 91752, 20962, 71729, 77509, 20959, 65380, 2545, 31190, 86120, 97698, 57423, 65472, 41633, 80546, 34411, 77248, 29787, 9368, 30794, 35498, 7313, 14399, 81461, 50164, 2156, 96924, 94388, 93286, 93047, 26412, 34869, 6762, 68616, 81864, 25213, 28704, 7151, 52516, 7217, 42043, 83607, 55971, 2855, 61179, 15264, 1456, 24612, 67420, 17150, 11385, 32724, 79255, 86077, 58462, 71059, 74291, 52159, 53339, 75099, 67461, 13750, 65425, 61633, 56454, 86765, 87601, 88483, 58194, 36590, 46344, 79928, 62918, 49400, 13233, 96884, 55191, 69899, 72473, 77148, 84555, 18012, 70024, 21172, 76553, 42289, 52460, 60423, 56094, 47109, 18770, 12916, 80592, 23935, 27333, 65669, 78587, 30953, 75071, 55920, 20807, 53058, 39289, 10550, 57464, 42051, 198, 59715, 33860, 6972, 548, 58182, 29183, 66129, 65989, 95941, 22703, 7190, 73064, 36219, 52534, 18901, 60577, 30088, 56705, 46627, 59196, 3821, 6193, 21516, 3428, 44341, 3385, 10249, 56631, 69225, 56488, 87175, 27535, 88486, 80431, 56217, 28426, 12009, 25176, 16101, 89025, 20960, 60633, 53622, 37462, 8962, 45907, 13646, 78817, 49884, 29985, 86823, 94334, 19085, 69033, 89464, 76258, 35313, 65784, 90191, 7299, 16386, 63337, 90025, 1307, 9404, 81101, 12561, 42808, 80413, 86118, 40314, 86249, 28902, 40170, 26776, 83690, 75358, 73132, 5433, 50109, 16558, 87589, 38917, 86920, 2813, 77113, 75643, 95992, 19887, 4656, 17622, 22538, 86410, 95483, 83046, 26171, 56002, 33565, 1650, 2773, 30328, 58017, 44808, 72210, 58525, 45214, 11608, 416, 26554, 53650, 80408, 71023, 81937, 17844, 42457, 52494, 73424, 22738, 41722, 9494, 65215, 77608, 32361, 57837, 79219, 53066, 39677, 69831, 90925, 95915, 27825, 4647, 60747, 82717, 17279, 29731, 14972, 48690, 66600, 12532, 81441, 72494, 23599, 22012, 3364, 34625, 73546, 87937, 6087, 40059, 65038, 23260, 9240, 47041, 8069, 94683, 76438, 43448, 94005, 45769, 43578, 51133, 37165, 55541, 33766, 11797, 72640, 33328, 63658, 249, 10116, 42959, 45841, 77697, 39706, 81156, 17564, 72870, 11276, 96844, 2803, 77441, 34393, 40293, 81334, 6701, 9385, 16328, 63105, 4612, 45979, 58981, 8668, 23228, 31441, 76589, 61015, 23946, 1913, 60694, 60972, 67598, 20626, 68696, 20577, 10266, 80301, 95501, 2840, 77899, 83404, 85616, 69926, 45224, 36693, 74811, 35045, 48433, 43993, 99550, 6234, 36165, 76063, 28825, 81387, 89268, 59471, 24281, 88711, 51312, 98935, 29096, 30997, 36938, 90443, 59814, 69546, 59596, 69171, 51792, 29414, 38011, 57544, 75613, 41885, 54685, 7022, 7720, 83414, 42707, 40862, 28699, 46630, 744, 21698, 44364, 80666, 15877, 81962, 47625, 47919, 97376, 13402, 89730, 85711, 83348, 25641, 28079, 21474, 59632, 68700, 65951, 56521, 60300, 15602, 76996, 60332, 89229, 44143, 76931, 86859, 44074, 66494, 95368, 76845, 6158, 37491, 68280, 27783, 63797, 18982, 91510, 42652, 25378, 74347, 28733, 52536, 84551, 41871, 64890, 5586, 37579, 55300, 63712, 55363, 48057, 81012, 60731, 34435, 94927, 51404, 24669, 47709, 6343, 13493, 21910, 24710, 92228, 43724, 70807, 53939, 18641, 90509, 86255, 43981, 8530, 52911, 68765]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 3)) {::} (<a> n =  (<n> 37)) {::} (<b> b =  (<n> 19)) {::} (<c> c =  (<data> (<combo> (<data> (<point> main[b]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))) {::} (<if> if  (<data> (<point> opposite[ (<n> 17) ]))   (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x -  (<const> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<a> n =  (<n> 50)) {::} (<b> b =  (<n> 1)) {::} (<c> c =  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> -)   (<data> (<point> opposite[b]))))) {::} (<if> if c  (<eval> <)   (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> *)   (<data> (<point> opposite[b])))) :{:x =  (<expr> (x -  (<const> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<a> n =  (<n> 31)) {::} (<b> b =  (<n> 27)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<const> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<a> n =  (<n> 32)) {::} (<b> b =  (<n> 18)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<data> (<point> opposite[b]))   (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x -  (<const> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<a> n =  (<n> 36)) {::} (<b> b =  (<n> 31)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 45) ])  <  (<point> main[b])  +  (<d> 3) :{:x =  (<expr> (x /  (<const> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 6)) {::} (<a> n =  (<n> 7)) {::} (<b> b =  (<n> 15)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> if c  (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<const> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<a> n =  (<n> 50)) {::} (<b> b =  (<n> 9)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (<const> 0.9)) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<a> n =  (<n> 50)) {::} (<b> b =  (<n> 40)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 27) ])  >  (<point> main[b])  +  (<d> 9) :{:x =  (<expr> (x +  (<const> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 47)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[ (<n> 19) ])  >  (<point> opposite[b])  +  (<d> 5) :{:x =  (<expr> (x /  (<const> 0.6) )) :})))) {::} (<code> (<index> index =  (<n> 29)) {::} (<a> n =  (<n> 2)) {::} (<b> b =  (<n> 8)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[b])  <  (<point> opposite[b])  +  (<d> 9) :{:x =  (<expr> (x /  (<const> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<a> n =  (<n> 29)) {::} (<b> b =  (<n> 34)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> >)   (<data> (<point> main[ (<n> 27) ])) :{:x =  (<expr> (x +  (<const> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 8)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x +  (<const> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<a> n =  (<n> 31)) {::} (<b> b =  (<n> 15)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> >)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x /  (<const> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<a> n =  (<n> 27)) {::} (<b> b =  (<n> 44)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[b])  >  (<point> main[b])  +  (<d> 5) :{:x =  (<expr> (<const> 0.1)) :}))) {::} (<code> (<index> index =  (<n> 32)) {::} (<a> n =  (<n> 39)) {::} (<b> b =  (<n> 50)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 37) ])  <  (<point> opposite[ (<n> 35) ])  +  (<d> 3) :{:x =  (<expr> (x /  (<const> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<a> n =  (<n> 11)) {::} (<b> b =  (<n> 47)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x -  (<const> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<a> n =  (<n> 34)) {::} (<b> b =  (<n> 46)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (<const> 0.9)) :}))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.43462343096234307, 0.5053963770960135]