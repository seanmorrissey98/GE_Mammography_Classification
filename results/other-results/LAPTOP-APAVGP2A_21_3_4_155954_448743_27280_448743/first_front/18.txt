Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 26
  n = 43
  b = 32
  c = opposite[b] + main[b]
  if opposite[b] + main[b] < opposite[b]:
    x = (x + 0.5)
  index = 39
  n = 12
  b = 30
  c = sum(main[-index:])
  if opposite[b] < opposite[50] + 1:
    x = (x * 0.9)
  index = 50
  n = 1
  b = 30
  c = main[b]
  if opposite[22] > main[12] + 2:
    x = (x - 0.9)
  index = 49
  n = 15
  b = 30
  c = opposite[b]
  if opposite[47] > opposite[b] + 4:
    x = (x + 0.3)
  index = 50
  n = 33
  b = 14
  c = opposite[b]
  if opposite[38] < main[15] + 0:
    x = 0.6
  return x
XXX_output_XXX = p()

Genotype:
[5300, 38843, 87898, 72533, 12051, 39166, 38264, 66173, 34967, 18035, 45841, 84181, 61306, 8843, 35247, 94977, 64354, 79940, 57277, 74517, 22219, 26843, 90265, 1186, 8325, 4669, 4880, 91400, 27565, 57034, 31652, 95715, 3790, 74628, 25844, 33419, 95632, 95095, 45431, 6901, 99301, 59842, 2671, 39708, 52875, 67510, 28930, 1262, 11029, 51777, 56812, 96613, 78408, 61068, 21152, 2889, 99483, 64596, 62693, 2106, 74975, 12812, 48878, 78310, 96082, 85735, 25542, 96114, 16180, 56084, 67512, 53445, 33385, 2358, 8132, 1098, 98539, 98518, 34728, 9115, 11502, 94043, 87719, 58428, 4577, 57353, 5662, 31085, 81971, 99135, 34217, 28561, 52019, 79473, 42191, 38332, 67063, 14061, 9358, 82846, 80914, 74228, 52760, 48398, 59269, 1873, 87340, 83755, 37064, 53068, 41586, 83478, 9089, 25836, 95977, 20931, 78114, 18147, 17511, 61341, 23317, 29248, 98536, 71566, 82305, 75871, 212, 31578, 54075, 64018, 46518, 74303, 90009, 78030, 18509, 39080, 8995, 41989, 81948, 1047, 19876, 12805, 61522, 7853, 18481, 89774, 60938, 18456, 69422, 7411, 2368, 39724, 10343]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 26)) {::} (<a> n =  (<n> 43)) {::} (<b> b =  (<n> 32)) {::} (<c> c =  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> +)   (<data> (<point> main[b]))))) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> +)   (<data> (<point> main[b]))))   (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x +  (<const> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<a> n =  (<n> 12)) {::} (<b> b =  (<n> 30)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> if  (<point> opposite[b])  <  (<point> opposite[ (<n> 50) ])  +  (<d> 1) :{:x =  (<expr> (x *  (<const> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<a> n =  (<n> 1)) {::} (<b> b =  (<n> 30)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 22) ])  >  (<point> main[ (<n> 12) ])  +  (<d> 2) :{:x =  (<expr> (x -  (<const> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<a> n =  (<n> 15)) {::} (<b> b =  (<n> 30)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 47) ])  >  (<point> opposite[b])  +  (<d> 4) :{:x =  (<expr> (x +  (<const> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<a> n =  (<n> 33)) {::} (<b> b =  (<n> 14)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 38) ])  <  (<point> main[ (<n> 15) ])  +  (<d> 0) :{:x =  (<expr> (<const> 0.6)) :})))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.0, 0.5]