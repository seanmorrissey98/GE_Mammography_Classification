Generation:
6

Phenotype:
def p():
  x = 0.0
  index = 24
  if main[index] < 1:
    if main[index] < main[index] + 0.1:
      x = (x - 0.2)
  else:
    if main[index] < opposite[index] + 4:
      x = (x - 0.7)
    else:
      x = (x - 0.4)
  index = 15
  if opposite[index] > opposite[index]:
    x = (x + 0.001)
  index = 44
  if main[index] < main[index]:
    x = (x - 0.5)
  index = 42
  if main[index] > opposite[index]:
    x = (x + 0.5)
  return x
XXX_output_XXX = p()

Genotype:
[79169, 85170, 14743, 46215, 97124, 44000, 84758, 6129, 60632, 53701, 38500, 58249, 35101, 80311, 27274, 62659, 50242, 55568, 39744, 95030, 41731, 4807, 38406, 92995, 50483, 24781, 54271, 96158, 91110, 95245, 38390, 3371, 19543, 28774, 89166, 95311, 18473, 64178, 9751, 36507, 72938, 8965, 394, 2156, 952, 59568, 8590, 49408, 11311, 61348, 79193, 50836, 6503, 24900, 90216, 66801, 15216, 88835, 38955, 25897, 52778, 93945, 54560, 47007, 94051, 62420, 39433, 2875, 53841, 55509, 88932, 28279, 94769, 7216, 37445, 6443, 20362, 69613, 91486, 47135, 66982]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 24)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9821010014915832, 0.7888868766754737]