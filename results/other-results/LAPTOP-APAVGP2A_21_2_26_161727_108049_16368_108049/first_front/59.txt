Generation:
6

Phenotype:
def p():
  x = 0.0
  index = 7
  if opposite[index] - main[index] - sum(main[-index:]) + sum(main[:-index]) + sum(opposite[:-index]) > sum(opposite[:-index]) + main[index] + opposite[index] + opposite[index] + sum(main[:-index]) + opposite[index] - sum(opposite[-index:]) + sum(main[:-index]):
    x = (x + 0.0001)
  index = 33
  if sum(opposite[-index:]) + main[index] + opposite[index] + main[index] + main[index] + main[index] + opposite[index] - opposite[index] + sum(main[:-index]) > main[index] - main[index] + opposite[index] + sum(opposite[-index:]) - sum(opposite[:-index]) + main[index] + opposite[index] - main[index]:
    x = (x + 0.3)
  index = 40
  if opposite[index] - opposite[index] - opposite[index] < main[index] + sum(opposite[:-index]) + sum(opposite[:-index]) + sum(opposite[-index:]) - sum(main[-index:]) - sum(main[-index:]):
    x = (x - 0.00001)
  index = 47
  if opposite[index] - sum(main[:-index]) > sum(main[:-index]) + opposite[index] - sum(opposite[:-index]) + main[index] + main[index] - sum(main[-index:]):
    x = (x + 0.0000001)
  index = 47
  if sum(opposite[-index:]) + main[index] + sum(main[-index:]) > opposite[index] + opposite[index]:
    x = (x - 0.000001)
  index = 25
  if opposite[index] + sum(opposite[:-index]) + sum(opposite[-index:]) - sum(opposite[-index:]) > opposite[index] - sum(main[-index:]) + sum(opposite[:-index]) + opposite[index]:
    x = (x - 0.6)
  return x
XXX_output_XXX = p()

Genotype:
[50587, 97309, 94883, 73798, 63086, 62533, 27760, 92748, 36886, 94994, 34958, 51219, 36569, 61789, 29919, 34450, 29893, 27841, 9061, 46501, 52591, 3499, 10784, 86426, 26024, 81770, 71676, 95522, 40760, 79826, 97542, 10870, 23756, 88416, 81280, 28478, 46306, 71367, 16649, 9016, 73463, 81569, 67244, 59635, 17672, 29394, 68821, 24294, 84052, 70931, 75905, 40765, 92342, 13017, 21155, 1347, 22988, 40190, 59662, 80325, 75018, 33980, 45320, 86099, 38092, 44328, 63276, 31483, 95313, 2422, 99138, 27771, 87472, 50122, 59240, 90356, 4288, 59722, 50333, 64147, 31959, 78740, 82750, 49117, 75036, 42791, 25505, 60688, 8324, 83817, 34705, 98606, 66749, 40043, 60768, 96992, 50012, 76459, 77108, 32563, 62620, 4484, 38951, 84308, 93337, 13313, 20635, 95007, 99111, 70741, 68307, 17577, 81830, 39565, 88234, 2834, 41793, 74441, 17619, 84422, 86625, 56049, 98586, 29531, 37834, 23475, 50778, 67607, 86711, 62249, 38130, 11622, 8266, 40446, 9171, 62290, 41349, 27030, 87871, 86516, 51653, 90923, 39185, 38179, 11747, 16409, 14228, 81756, 40501, 42896, 50316, 48482, 55169, 49019, 54094, 93691, 3446, 20330, 47500, 8055, 76924, 94290, 54785, 86751, 45024, 92670, 23129, 21476, 74134, 36300, 24388, 8303, 37245, 11594, 43897, 70436, 42233, 56169, 79637, 49918, 54014, 15044, 92006, 43433, 76518, 5311, 25622, 82362, 77150, 93179, 77951, 72248, 23663, 86772, 2795, 64067, 91451, 77883, 62212, 67105, 59284, 24008, 3942, 81379, 27681, 60079, 39327, 11649, 39240, 91914, 89959, 84001, 36552, 18226, 12916, 29208, 6978, 62438, 62517, 33568, 84542, 35359, 3264, 76420, 81892, 84022, 18284, 80208, 61168, 53207, 2366, 66501, 96881, 87767, 3604, 62546, 15084, 28738, 99800, 65719, 43136, 28386, 88931, 29395, 26120, 62671, 78960, 64147, 66819, 63743, 90888, 4339, 35983, 22776, 99174, 90203, 13414, 79166, 74303, 71146, 41505, 4421, 7119, 71214, 36040, 18655, 509, 49575, 93522, 48345, 3236, 43361, 23956, 74170, 13383, 47730, 60215, 80716, 4218, 92028, 87444, 53239, 46659, 81321, 47312, 1391, 76700, 77306, 97361, 98535, 70931, 11302, 52669, 51275, 70797, 94176, 35533, 41578, 67417, 24979, 71140, 91644, 63988, 9164, 56599, 64795, 96845, 51625, 61138, 82188, 1074, 20708, 28841, 35614, 17088, 2443, 22350, 80885, 95942, 79734, 47853, 94358, 91029, 94954, 49098, 8070, 99976, 59737, 3409, 52537, 57835, 51961, 28145, 4859, 1856, 55681, 18605, 90337, 68500, 44122, 99042, 30894, 18594, 52093, 5739, 64400, 74480, 78545, 24822, 56837, 13186, 47440, 25015, 93628, 11949, 72888, 34744, 83255, 99451, 2410, 20498, 96867, 80688, 71403, 11973, 51762, 42692, 33952, 56071, 9170, 67678, 58532, 34110, 66183, 7124, 25230, 91623, 67307, 5322, 69256, 41699, 34485, 9444, 93493, 17591, 80370, 97290, 31792, 23735, 17906, 20994, 21096, 36990, 11720, 33941, 10442, 71928, 17796, 51423, 98142, 79429, 88818, 26888, 46676, 44545, 63187, 7649, 93282, 572, 16180, 21022, 51403, 66948, 25309, 50464, 9107, 56775, 25686, 59824, 85861, 96374, 25287, 36178, 31907, 8660, 92024, 93392, 84154, 26755, 33696, 23993, 57056, 8012, 84275, 1410, 40246, 37246, 75877, 79659, 30939, 61002, 59484, 19824, 49616, 35004, 85826, 90466, 23681, 48976, 593, 21545, 68630, 80257, 82984, 29408, 47961, 1044, 59014, 73665, 37025, 89167, 89185, 94517, 61071, 60842, 90059, 34217, 87556, 74692, 77079, 85025, 43445, 79070, 51866, 36644, 67355, 27112, 43551, 72479, 66032, 27438, 7135, 62929, 7900, 43268, 10715, 47766, 21149, 52799, 11453, 79054, 32006, 21540, 2371, 72415, 96723, 18109, 36966, 97630, 94817, 41387, 56960, 90152, 17618]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<point> main[index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))))))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<point> main[index]))))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))))) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9774131685489026, 0.8654814321446338]