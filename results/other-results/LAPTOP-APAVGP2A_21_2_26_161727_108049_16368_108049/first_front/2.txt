Generation:
6

Phenotype:
def p():
  x = 0.0
  index = 23
  if sum(opposite[-index:]) + opposite[index] - main[index] + sum(opposite[-index:]) + main[index] > opposite[index] - main[index] - sum(opposite[-index:]) - opposite[index] - opposite[index] + opposite[index] - main[index] - main[index]:
    x = (x + 0.000001)
  index = 31
  if sum(main[-index:]) - opposite[index] - sum(opposite[:-index]) + sum(main[-index:]) < sum(opposite[:-index]) + sum(main[-index:]) + main[index] + sum(main[-index:]) + sum(main[:-index]) + opposite[index] + opposite[index] + opposite[index] + sum(opposite[-index:]):
    x = (x + 0.2)
  index = 44
  if sum(main[-index:]) - main[index] - sum(opposite[:-index]) - sum(main[:-index]) + sum(opposite[:-index]) - main[index] - main[index] < main[index] - sum(main[:-index]) - main[index]:
    x = (x + 1.0)
  index = 15
  if sum(main[:-index]) - sum(opposite[:-index]) < opposite[index] - sum(opposite[:-index]) - opposite[index]:
    x = (x + 1.0)
  index = 18
  if sum(main[-index:]) - main[index] + sum(opposite[-index:]) < main[index] - main[index]:
    x = (x - 0.0001)
  index = 21
  if main[index] > opposite[index] - main[index] - main[index] - opposite[index] - opposite[index]:
    x = (x - 0.0000001)
  index = 5
  if sum(opposite[:-index]) < sum(main[:-index]) + main[index]:
    x = (x - 0.2)
  index = 1
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 50:
    x = (x + 0.0000001)
  index = 48
  if main[index] < 1:
    if main[index] > opposite[index] + 1.0:
      x = (x - 0.0000001)
  else:
    if opposite[index] < opposite[index] + 6:
      x = (x - 0.2)
    else:
      x = (x - 0.0001)
  index = 43
  if main[index] < 1:
    if main[index] > main[index] + 0.4:
      x = (x - 0.2)
  else:
    if main[index] < main[index] + 7:
      x = (x - 0.9)
    else:
      x = (x + 0.000001)
  index = 28
  if main[index] < 1:
    if main[index] < main[index] + 0.1:
      x = (x - 0.01)
  else:
    if opposite[index] < main[index] + 9:
      x = (x - 1.0)
    else:
      x = (x - 0.001)
  index = 4
  if main[index] < main[index]:
    x = (x - 0.1)
  index = 10
  if opposite[index] < opposite[index]:
    x = (x + 0.9)
  index = 14
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.00001)
  index = 47
  if main[index] > main[index]:
    x = (x + 0.5)
  index = 16
  if main[index] < 1:
    if main[index] < opposite[index] + 1.0:
      x = (x - 1.0)
  else:
    if main[index] > opposite[index] + 3:
      x = (x + 0.3)
    else:
      x = (x - 0.8)
  index = 16
  if main[index] > opposite[index] + opposite[index]:
    x = (x - 0.3)
  index = 40
  if main[index] > main[index] - opposite[index]:
    x = (x - 0.4)
  index = 18
  if main[index] < 1:
    if opposite[index] < main[index] + 0.5:
      x = (x - 0.2)
  else:
    if opposite[index] < main[index] + 0:
      x = (x + 0.3)
    else:
      x = (x + 0.3)
  index = 14
  if main[index] > main[index]:
    x = (x + 0.001)
  index = 50
  if main[index] > main[index]:
    x = (x + 0.4)
  index = 39
  if opposite[index] < main[index] - main[index]:
    x = (x + 0.8)
  index = 29
  if sum(opposite[-index:]) < sum(opposite[-index:]):
    x = (x + 0.001)
  index = 34
  if main[index] > opposite[index]:
    x = (x - 0.9)
  index = 28
  if opposite[index] < main[index]:
    x = (x - 0.5)
  index = 30
  if sum(opposite[-index:]) > main[index]:
    x = (x - 0.2)
  index = 33
  if opposite[index] < main[index]:
    x = (x - 0.0001)
  index = 48
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 100:
    x = (x + 0.5)
  index = 5
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.4)
  index = 36
  if main[index] > main[index]:
    x = (x + 0.0000001)
  index = 47
  if main[index] < 1:
    if opposite[index] < opposite[index] + 1.0:
      x = (x - 0.7)
  else:
    if opposite[index] > opposite[index] + 5:
      x = (x + 0.0000001)
    else:
      x = (x + 0.2)
  index = 14
  if main[index] > main[index]:
    x = (x - 0.1)
  index = 36
  if opposite[index] > opposite[index]:
    x = (x - 0.1)
  index = 49
  if opposite[index] < opposite[index]:
    x = (x - 1.0)
  index = 34
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.7)
  index = 18
  if opposite[index] < opposite[index]:
    x = (x - 0.0001)
  index = 9
  if main[index] > opposite[index]:
    x = (x + 0.0001)
  index = 14
  if opposite[index] < main[index]:
    x = (x + 0.1)
  index = 46
  if sum(opposite[:-index]) - main[index] < sum(opposite[-index:]):
    x = (x + 0.0000001)
  index = 22
  if sum(main[-index:]) + sum(opposite[-index:]) < sum(opposite[:-index]):
    x = (x - 0.8)
  index = 6
  if sum(opposite[:-index]) - sum(main[:-index]) < main[index] + opposite[index] - main[index] + main[index] - main[index]:
    x = (x + 0.001)
  index = 5
  if main[index] - sum(main[-index:]) + sum(main[-index:]) - main[index] > sum(main[-index:]) - sum(opposite[-index:]) - main[index]:
    x = (x + 0.3)
  index = 14
  if opposite[index] - sum(main[:-index]) > sum(opposite[:-index]) - main[index] - main[index] - opposite[index] + main[index]:
    x = (x + 0.1)
  index = 34
  if opposite[index] - opposite[index] < sum(main[:-index]) + sum(opposite[-index:]) - sum(main[-index:]):
    x = (x - 0.01)
  index = 10
  if main[index] < opposite[index] - opposite[index] - opposite[index]:
    x = (x - 0.0000001)
  index = 4
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x + 0.8)
  index = 35
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 1.0)
  index = 22
  if main[index] < 1:
    if main[index] > main[index] + 0.0000001:
      x = (x + 0.5)
  else:
    if main[index] < opposite[index] + 1:
      x = (x + 0.7)
    else:
      x = (x - 1.0)
  index = 38
  if main[index] + sum(opposite[:-index]) > sum(opposite[:-index]) + sum(main[:-index]):
    x = (x + 1.0)
  index = 13
  if sum(opposite[:-index]) > main[index] + sum(main[:-index]) + sum(opposite[-index:]):
    x = (x - 0.2)
  index = 34
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.01:
      x = (x - 0.4)
  else:
    if main[index] > main[index] + 0:
      x = (x - 0.0001)
    else:
      x = (x + 0.00001)
  index = 38
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 1.0)
  index = 21
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.0001:
      x = (x - 0.00001)
  else:
    if main[index] < main[index] + 2:
      x = (x - 0.3)
    else:
      x = (x - 0.2)
  index = 46
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.5)
  index = 22
  if main[index] > sum(opposite[-index:]):
    x = (x - 0.9)
  index = 27
  if main[index] < 1:
    if main[index] > main[index] + 0.0001:
      x = (x - 0.2)
  else:
    if opposite[index] < main[index] + 9:
      x = (x + 0.3)
    else:
      x = (x + 0.0000001)
  index = 48
  if opposite[index] > opposite[index]:
    x = (x + 0.3)
  index = 47
  if opposite[index] - sum(opposite[-index:]) > opposite[index]:
    x = (x - 0.3)
  index = 20
  if main[index] < 1:
    if opposite[index] < main[index] + 0.00001:
      x = (x - 0.1)
  else:
    if opposite[index] < main[index] + 7:
      x = (x + 0.2)
    else:
      x = (x - 0.9)
  index = 33
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.00001:
      x = (x - 0.000001)
  else:
    if main[index] > main[index] + 9:
      x = (x + 0.000001)
    else:
      x = (x + 0.7)
  index = 32
  if opposite[index] < main[index]:
    x = (x + 0.2)
  index = 26
  if opposite[index] > main[index]:
    x = (x - 0.7)
  index = 40
  if main[index] < opposite[index]:
    x = (x - 0.5)
  index = 4
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 5000:
    x = (x - 0.9)
  index = 5
  if main[index] < 1:
    if main[index] < main[index] + 0.4:
      x = (x + 0.7)
  else:
    if opposite[index] > opposite[index] + 2:
      x = (x + 0.3)
    else:
      x = (x - 0.3)
  index = 35
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 50:
    x = (x - 0.01)
  index = 32
  if opposite[index] < main[index]:
    x = (x - 0.8)
  index = 12
  if opposite[index] > main[index]:
    x = (x + 0.2)
  index = 26
  if opposite[index] < opposite[index]:
    x = (x + 0.001)
  index = 24
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x - 0.0001)
  index = 49
  if main[index] < 1:
    if main[index] < main[index] + 0.2:
      x = (x + 0.4)
  else:
    if opposite[index] < opposite[index] + 6:
      x = (x - 0.001)
    else:
      x = (x + 0.000001)
  index = 2
  if main[index] < main[index]:
    x = (x - 0.2)
  index = 5
  if main[index] < main[index]:
    x = (x - 0.000001)
  index = 42
  if main[index] < 1:
    if main[index] > main[index] + 0.1:
      x = (x - 0.1)
  else:
    if opposite[index] > opposite[index] + 7:
      x = (x - 0.000001)
    else:
      x = (x - 0.00001)
  index = 4
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 50:
    x = (x + 0.01)
  index = 3
  if opposite[index] < opposite[index]:
    x = (x - 0.3)
  index = 31
  if opposite[index] > sum(main[:-index]):
    x = (x + 0.4)
  index = 16
  if main[index] < 1:
    if opposite[index] < main[index] + 0.5:
      x = (x - 0.7)
  else:
    if main[index] < main[index] + 7:
      x = (x - 0.7)
    else:
      x = (x - 1.0)
  index = 17
  if main[index] < opposite[index]:
    x = (x + 0.8)
  index = 17
  if main[index] > opposite[index]:
    x = (x + 1.0)
  index = 26
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.8)
  index = 11
  if main[index] < 1:
    if opposite[index] < main[index] + 0.01:
      x = (x + 0.9)
  else:
    if main[index] > opposite[index] + 8:
      x = (x + 0.01)
    else:
      x = (x - 0.0000001)
  index = 18
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x + 0.1)
  index = 45
  if main[index] < 1:
    if main[index] > main[index] + 0.000001:
      x = (x - 0.5)
  else:
    if opposite[index] < opposite[index] + 8:
      x = (x - 0.0000001)
    else:
      x = (x - 0.00001)
  index = 47
  if opposite[index] > main[index]:
    x = (x + 0.6)
  index = 4
  if opposite[index] < main[index]:
    x = (x - 1.0)
  index = 27
  if main[index] > main[index]:
    x = (x - 0.001)
  index = 19
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x - 0.1)
  index = 18
  if main[index] > opposite[index]:
    x = (x - 0.0001)
  index = 5
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.0000001)
  index = 7
  if sum(opposite[:-index]) > main[index]:
    x = (x - 0.8)
  index = 7
  if main[index] < 1:
    if main[index] < opposite[index] + 0.8:
      x = (x + 0.000001)
  else:
    if opposite[index] > opposite[index] + 1:
      x = (x - 0.6)
    else:
      x = (x - 0.0001)
  index = 29
  if opposite[index] < main[index]:
    x = (x - 0.7)
  index = 0
  if main[index] < opposite[index]:
    x = (x - 0.001)
  index = 34
  if opposite[index] < opposite[index]:
    x = (x - 0.1)
  index = 38
  if main[index] < main[index]:
    x = (x - 0.6)
  index = 23
  if main[index] < 1:
    if opposite[index] < opposite[index] + 1.0:
      x = (x + 0.01)
  else:
    if main[index] > main[index] + 5:
      x = (x - 0.000001)
    else:
      x = (x - 0.5)
  index = 32
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.00001:
      x = (x - 0.4)
  else:
    if main[index] < opposite[index] + 1:
      x = (x + 1.0)
    else:
      x = (x - 0.00001)
  index = 31
  if main[index] > opposite[index]:
    x = (x - 0.01)
  index = 48
  if main[index] > main[index]:
    x = (x + 0.0001)
  index = 35
  if opposite[index] > main[index]:
    x = (x - 0.0001)
  index = 0
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.01)
  index = 2
  if main[index] > main[index]:
    x = (x + 0.7)
  index = 15
  if main[index] < opposite[index]:
    x = (x - 0.000001)
  index = 35
  if opposite[index] > main[index]:
    x = (x + 0.00001)
  index = 14
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.4)
  index = 5
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.7)
  index = 13
  if main[index] < 1:
    if main[index] < opposite[index] + 0.01:
      x = (x + 0.1)
  else:
    if main[index] < opposite[index] + 3:
      x = (x - 0.0001)
    else:
      x = (x + 0.6)
  index = 34
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.0001)
  index = 26
  if main[index] < 1:
    if main[index] < main[index] + 0.8:
      x = (x - 0.01)
  else:
    if main[index] < opposite[index] + 0:
      x = (x + 0.001)
    else:
      x = (x - 0.0001)
  index = 17
  if sum(opposite[-index:]) > sum(opposite[:-index]) - opposite[index]:
    x = (x + 0.001)
  index = 48
  if sum(opposite[-index:]) > sum(main[-index:]) + main[index]:
    x = (x - 0.0000001)
  index = 23
  if sum(main[:-index]) - opposite[index] - sum(main[:-index]) + opposite[index] > opposite[index] + main[index] + opposite[index] - opposite[index] + main[index]:
    x = (x + 0.01)
  index = 45
  if sum(main[:-index]) - opposite[index] + main[index] < opposite[index] + sum(main[:-index]) - opposite[index]:
    x = (x - 0.001)
  return x
XXX_output_XXX = p()

Genotype:
[70604, 82919, 22786, 81845, 7157, 58342, 99595, 94966, 46390, 92078, 75612, 56484, 26629, 4733, 95158, 57922, 92336, 13495, 89926, 31729, 55103, 83512, 52190, 64487, 46862, 19038, 75946, 83086, 90425, 18182, 87523, 89452, 14660, 1258, 78628, 91444, 31220, 91502, 30908, 3493, 41825, 59534, 15600, 33164, 57135, 89531, 41656, 78073, 98904, 22268, 3859, 20222, 68175, 39985, 73743, 1332, 23506, 34487, 37074, 77384, 61636, 69220, 99886, 52583, 37302, 44070, 43073, 93467, 5540, 10165, 73247, 97438, 29515, 55087, 74903, 72859, 6488, 83363, 67619, 81494, 8913, 63077, 8981, 73625, 65117, 47235, 98498, 2086, 82805, 81311, 7441, 13615, 85661, 48220, 81641, 32040, 84295, 17104, 88311, 25618, 10331, 79735, 39287, 93364, 63313, 74963, 55033, 92233, 18879, 28033, 77423, 66523, 48458, 25038, 66833, 20511, 918, 27936, 81028, 47089, 54383, 74834, 82102, 38950, 60320, 56570, 43337, 81278, 16778, 14162, 89699, 97020, 89903, 17030, 54593, 50880, 26858, 54685, 90221, 12633, 59594, 37503, 99206, 14091, 79352, 65900, 54983, 90375, 51451, 15573, 50798, 93162, 95363, 25056, 16055, 66975, 88557, 15178, 1977, 68927, 6784, 60964, 92021, 15376, 66856, 35671, 92486, 27260, 54790, 71341, 64013, 42371, 34371, 32724, 32355, 13230, 21569, 20988, 93147, 10592, 59615, 9680, 71315, 4934, 13847, 75129, 68329, 36876, 83750, 36423, 70393, 45294, 36741, 57778, 14693, 82614, 90722, 84163, 30393, 76852, 392, 94191, 5727, 55812, 99194, 93257, 85813, 39203, 33956, 19647, 24541, 44019, 36849, 2656, 37543, 77936, 73052, 39375, 6905, 77059, 89637, 3460, 51887, 57642, 40705, 78537, 84460, 69590, 48218, 42564, 86099, 71942, 50568, 51122, 84778, 82415, 95501, 90126, 19871, 83290, 81787, 8580, 7811, 85382, 95297, 52225, 44880, 41956, 78977, 88498, 24532, 50942, 23681, 58962, 30715, 5703, 9507, 32014, 3352, 83103, 87603, 61994, 9536, 66111, 90969, 72939, 4418, 90799, 50511, 24832, 73324, 5855, 69887, 3257, 85600, 4097, 21506, 81813, 91964, 85391, 99085, 50796, 51175, 61815, 73203, 86594, 64940, 50599, 10595, 10423, 80877, 41359, 19700, 85564, 32185, 6333, 28787, 90597, 77921, 92018, 7339, 34930, 69483, 32657, 71997, 77731, 36281, 13941, 2825, 85521, 71560, 24884, 13269, 79196, 79408, 98129, 67281, 19587, 61237, 50335, 87583, 33748, 13198, 77664, 48705, 52917, 10799, 94288, 29333, 49334, 84865, 15212, 59827, 16576, 19, 16948, 85037, 40573, 80440, 41007, 33799, 35263, 35135, 3163, 81017, 29463, 86696, 38717, 84960, 40189, 99340, 8689, 848, 11882, 14524, 89539, 5383, 54088, 7947, 80043, 38197, 36551, 8187, 44995, 83388, 39877, 30865, 60489, 50527, 83351, 50450, 46817, 31621, 57017, 17139, 27714, 79684, 14903, 53698, 80640, 87852, 3784, 785, 51575, 29039, 80481, 4072, 64450, 64335, 51288, 91326, 18027, 54964, 90127, 51016, 85741, 47467, 76954, 15669, 39783, 10606, 40846, 41199, 68486, 85072, 61397, 42008, 29708, 81432, 6190, 79376, 26652, 75847, 7852, 35385, 50512, 39646, 61636, 91124, 99888, 87385, 5937, 19678, 94628, 38875, 14055, 99314, 58763, 73781, 28267, 61730, 35720, 3611, 60216, 45889, 10298, 62372, 7414, 14167, 84205, 79224, 51903, 40271, 53036, 2452, 53084, 27157, 91791, 61415, 45072, 94916, 77146, 50224, 45368, 52691, 59706, 69904, 64210, 35691, 64288, 42974, 22188, 67559, 95091, 94878, 91554, 51869, 49928, 17332, 41587, 82171, 15847, 9977, 83300, 74391, 2699, 33122, 16017, 68183, 93039, 11635, 19763, 23002, 43015, 62521, 67605, 81860, 96397, 77952, 98053, 2016, 50521, 5010, 49416, 74324, 32672, 99532, 35620, 72071, 53816, 2851, 11552, 63731, 40749, 15535, 18565, 97096, 86686, 92385, 70990, 10237, 627, 49864, 85568, 17017, 774, 35174, 33352, 60424, 60877, 91477, 70106, 80072, 59179, 493, 13806, 43817, 9302, 90859, 19105, 54272, 71034, 18076, 32719, 1768, 84253, 36617, 74866, 5782, 42266, 91160, 64983, 13994, 19220, 418, 60184, 99909, 85888, 87146, 15169, 78253, 70476, 967, 61611, 78052, 6795, 83922, 17433, 65548, 1731, 39774, 22898, 39558, 98602, 67079, 9696, 19679, 55515, 37153, 56578, 82245, 10589, 40110, 76996, 24174, 16433, 47094, 88452, 18347, 36028, 76508, 96154, 14535, 4672, 90550, 92838, 29836, 36376, 43869, 34094, 46333, 58898, 95807, 55454, 36740, 43875, 64918, 86259, 65950, 83334, 49836, 37556, 40527, 35842, 44160, 59663, 36883, 45634, 71278, 32846, 73805, 50494, 32839, 36267, 49955, 99006, 33143, 64975, 31128, 51845, 23428, 89854, 29386, 14779, 98436, 94425, 13928, 79731, 41520, 97939, 74740, 56409, 38725, 61463, 54470, 31549, 24989, 92595, 89709, 66998, 69989, 19894, 7290, 70150, 14260, 80098, 26566, 66253, 91742, 82883, 55048, 42076, 69505, 60735, 16535, 23362, 53392, 60571, 34423, 51089, 72653, 41435, 85052, 20945, 39744, 50311, 57637, 80378, 13865, 9946, 33809, 84323, 14336, 74018, 75885, 97009, 2673, 68815, 34698, 90015, 12463, 40299, 93942, 8160, 85040, 1613, 78377, 61665, 31390, 87101, 78846, 45803, 4474, 25287, 93610, 35216, 97506, 45446, 74991, 33483, 75613, 86714, 49630, 65266, 92519, 82775, 56599, 30436, 11951, 67396, 15196, 22723, 60771, 33380, 49241, 72934, 43096, 26819, 91396, 1539, 41889, 7631, 27897, 96635, 26112, 67934, 29500, 24775, 82865, 41995, 97194, 3661, 76373, 66896, 79469, 61411, 9612, 42733, 84834, 22459, 83284, 15732, 99126, 61761, 14411, 3334, 7181, 63395, 38585, 56975, 41185, 39152, 58515, 66746, 91409, 83790, 15523, 4351, 82901, 33662, 16119, 8661, 64858, 12519, 80135, 4133, 45852, 77876, 87209, 16382, 81102, 59427, 19196, 63547, 6168, 78703, 72320, 61520, 86692, 9868, 7058, 90218, 62027, 52889, 28393, 37631, 84137, 871, 580, 98924, 8137, 27376, 43010, 75186, 83501, 35770, 22407, 25540, 56257, 14647, 48657, 59939, 59237, 89284, 99763, 32391, 66709, 13103, 20026, 89993, 17077, 60359, 28675, 1525, 52455, 56795, 95821, 28196, 44932, 25624, 44389, 44137, 91939, 5905, 98902, 8054, 81604, 37604, 33565, 47871, 7114, 60133, 93189, 85261, 55996, 85732, 41277, 21167, 4793, 42941, 30634, 87832, 88623, 92416, 15076, 8204, 91667, 72062, 20113, 57274, 85215, 73627, 35445, 63655, 9482, 48749, 29425, 10463, 84723, 67003, 32243, 76848, 45412, 45502, 63746, 15008, 53827, 96010, 28152, 52024, 84211, 79852, 87703, 86365, 22594, 45391, 24988, 85364, 27283, 81377, 28285, 25527, 37864, 93005, 49180, 83000, 57680, 65937, 20551, 20231, 11743, 85039, 91496, 43927, 27995, 86644, 26860, 12487, 8206, 32481, 94576, 67577, 94584, 70867, 48005, 92378, 49698, 56506, 96967, 66424, 83940, 67153, 56426, 76697, 66127, 88491, 86557, 77844, 1957, 73930, 6747, 19761, 29653, 30093, 297, 37494, 14086, 53263, 83023, 41295, 73714, 604, 44292, 33006, 24337, 32845, 57586, 61415, 49524, 41874, 5402, 98061, 69091, 8416, 81327, 4435, 48852, 61222, 22338, 92291, 6195, 22301, 79460, 93768, 92806, 66935, 95430, 85398, 88252, 24634, 70896, 89552, 81637, 86050, 28052, 83492, 50476, 39133, 51734, 5000, 94132, 59131, 34218, 26247, 61489, 82672, 80359, 73443, 82464, 17880, 72727, 61445, 87774, 74215, 82457, 3853, 96082, 89164, 20644, 57276, 44179, 59954, 87447, 83726, 16424, 27101, 57232, 18589, 36385, 63565, 27493, 77467, 80194, 55827, 65819, 1894, 82891, 21791, 38346, 53159, 49725, 91017, 92814, 54805, 27992, 69659, 27700, 63466, 53571, 53009, 96405, 10974, 36101, 87855, 54607, 89135, 78869, 36066, 29444, 76835, 62191, 78617, 6993, 37476, 65776, 77716, 25178, 53955, 13795, 88210, 56851, 35811, 82767, 72905, 56632, 81142, 36846, 75880, 93012, 17078, 60143, 59227, 64889, 60862, 90571, 31114, 55710, 74241, 4619, 91202, 88839, 16210, 34034, 78119, 12668, 67679, 86366, 40024, 74227, 61756, 13268, 28307, 78167, 75016, 95875, 63790, 41825, 40879, 3090, 11559, 88472, 88795, 34524, 38995, 71212, 43616, 11209, 26383, 48498, 28805, 20440, 65521, 65110, 18532, 30284, 18008, 14555, 88827, 2503, 35409, 50224, 61978, 23298, 98655, 38644, 90680, 43894, 46999, 49118, 93036, 11117, 45608, 87356, 36608, 41970, 79843, 54087, 71158, 34731, 94447, 6396, 6896, 55499, 51675, 18560, 33700, 96239, 117, 22774, 65841, 7839, 35722, 81988, 31798, 23291, 62773, 46106, 55509, 62260, 60198, 95929, 60474, 98211, 60734, 12365, 65442, 46165, 32858, 86718, 63914, 23318, 21736, 67492, 56396, 5080, 17431, 26375, 81630, 54322, 73378, 77654, 98839, 61511, 38519, 23516, 44164, 1923, 86952, 75136, 57269, 97738, 66959, 30130, 21508, 90421, 87149, 70635, 72691, 40399, 32175, 78351, 6183, 93682, 69559, 24982, 42676, 62246, 28096, 75970, 44677, 88802, 8533, 3826, 48506, 93805, 76607, 32261, 8588, 76041, 88820, 65411, 3090, 22692, 78253, 26210, 45950, 45083, 89939, 19883, 47202, 52464, 96676, 23180, 91816, 95283, 56137, 69084, 86897, 92283, 7447, 6290, 71811, 94023, 37468, 41589, 5193, 99937, 70406, 89699, 84781, 41844, 18795, 94531, 15, 68263, 73787, 53380, 16806, 40259, 34834, 12469, 76310, 58184, 9694, 56518, 29660, 48192, 33351, 61395, 37862, 93493, 2304, 91530, 9190, 24409, 45221, 68876, 6564, 85057, 94734, 10984, 208, 53151, 77748, 89326, 54397, 35325, 27309, 60907, 93446, 13276, 80514, 10647, 57559, 60584, 64315, 68524, 41506, 50527, 64964, 31608, 18637, 47956, 42078, 81707, 98206, 38257, 79320, 63750, 2079, 62131, 36330, 42424, 14193, 93710, 25912, 20459, 36565, 83616, 39266, 65734, 53121, 97729, 74995, 39134, 53720, 66959, 83080, 55568, 76481, 75899, 70312, 37948, 73491, 41642, 93484, 22981, 11219, 75124, 14472, 6047, 86550, 13412, 93248, 90735, 4801, 6744, 7186, 73785, 79031, 35970, 50477, 98213, 2948, 88916, 7881, 33457, 97177, 15496, 46639, 42484, 85490, 43153, 54246, 71247, 88589, 42931, 35818, 28852, 14845, 12751, 36677, 13565, 51409, 46565, 59474, 82274, 46366, 82915, 30622, 14340, 42504, 74992, 18795, 11344, 45654, 42909, 31490, 30268, 52619, 75757, 19158, 52870, 73869, 42695, 90976, 93378, 36447, 49611, 42425, 81265, 40245, 74989, 62193, 52567, 2898, 33184, 67910, 88927, 57295, 9278, 11884, 1315, 144, 93663, 46395, 21941, 35774, 20730, 29229, 78876, 68618, 83198, 3632, 76751, 79964, 70238, 11072, 35436, 69883, 78673, 25650, 85847, 64814, 25890, 30975, 71745, 86000, 16931, 8152, 32049, 44625, 79552, 79572, 6249, 59061, 47691, 69553, 62072, 59587, 15216, 45600, 86070, 70091, 16804, 62769, 53660, 37799, 53155, 66578, 62569, 75613, 91413, 92335, 52080, 45799, 38842, 25052, 8765, 74945, 76277, 72473, 25497, 85624, 75584, 39947, 6282, 17006, 22667, 94870, 20659, 15686, 78892, 85604, 41536, 18349, 79796, 98611, 20101, 17641, 74312, 73438, 73937, 86552, 51625, 33967, 87457, 72481, 71269, 19908, 3138, 89979, 78876, 59578, 86172, 30148, 69779, 27412, 27443, 52289, 74663, 69044, 50474, 65057, 89725, 99950, 48241, 62996, 70243, 3557, 17514, 49782, 47991, 18281, 51317, 87431, 98959, 23475, 92797, 29617, 85652, 62374, 49147, 64070, 87005, 95978, 26260, 54374, 35222, 80021, 85366, 20674, 79474, 27244, 51482, 25947, 10799, 45844, 66006, 47841, 99825, 8629, 16509, 8670, 83615, 13692, 99762, 41636, 45639, 96528, 29345, 51457, 20661, 33438, 11059, 52495, 3557, 81201, 1462, 29409, 9747, 99093, 59374, 59415, 26192, 77961, 20201, 98097, 10947, 38828, 23156, 45191, 84391, 33658, 32720, 36597, 61332, 79613, 70057, 25832, 40243, 86001, 28125, 56178, 56488, 80435, 12752, 3739, 66419, 9384, 61534, 26952, 73033, 58494, 22600, 5449, 7567, 27635, 64517, 21329, 34610, 50348, 16233, 98772, 23359, 83310, 15868, 83555, 59804, 97309, 74689, 1938, 88013, 44091, 88007, 92621, 9093, 44721, 37859, 40971, 51558, 63541, 9196, 91067, 71332, 76795, 2589, 62128, 41909, 26264, 95535, 27923, 90740, 78199, 99715, 30833, 25828, 98695, 46449, 92297, 24544, 14492, 77586, 50118, 13725, 95335, 41973, 83506, 22755, 15442, 48625, 46168, 39476, 89910, 28122, 33398, 52246, 35793, 59518, 30103, 68574, 49644, 76638, 57615, 65670, 29392, 6668, 64741, 90970, 18557, 51861, 19384, 68950, 95459, 49177, 93082, 20207, 22042, 8153, 91452, 81960, 63945, 38178, 93372, 27518, 27880, 32725, 1729, 50810, 96366, 38321, 35444, 86761, 53650, 53161, 20718, 15559, 56870, 22676, 52134, 91296, 41664, 76405, 43304, 1453, 77755, 59368, 58807, 83378, 62411, 39631, 65977, 59344, 16490, 53575, 54570, 89717, 39532, 32731, 15042, 60671, 24270, 79274, 59400, 76893, 19859, 47501, 81323, 81325, 93756, 27573, 5203, 91997, 76489, 98103, 8989, 42662, 8844, 39674, 26671, 68806, 11740, 9737, 83347, 35342, 46864, 75636, 84600, 41836, 20531, 70606, 32380, 72395, 92947, 54501, 83499, 738, 42098, 33291, 98358, 13430, 453, 9955, 51825, 95784, 45350, 84900, 52360, 87028, 63672, 34381, 87743, 65211, 57393, 88775, 19285, 52905, 86236, 13172, 99899, 81918, 83571, 76810, 35288, 77494, 32183, 84077, 38863, 20705, 20108, 2229, 90332, 3784, 61626, 83046, 4284, 10681, 66869, 74188, 43471, 89297, 43141, 4539, 83601, 92970, 45270, 41548, 31918, 57363, 92092, 38947, 52501, 75056, 70111, 71767, 65949, 72016, 64671, 56592, 71288, 74035, 50419, 148, 36193, 25803, 86964, 95077, 62719, 37778, 84574, 13549, 82087, 88120, 68434, 34530, 52408, 81910, 57705, 43274, 74683, 80824, 67710, 41036, 36447, 41006, 6742, 47069, 18012, 38814, 59535, 29625, 43087, 70008, 4569, 66340, 98157, 38180, 35890, 69227, 96762, 63001, 47664, 48850, 52848, 43795, 489, 52389, 1292, 98436, 54859, 2464, 92184, 54522, 19201, 3141, 93796, 53454, 41273, 38061, 74436, 97806, 69592, 60286, 51710, 38227, 36465, 65320, 34184, 49960, 48146, 7881, 12267, 58697, 8010, 76382, 91115, 76325, 18347, 99793, 18517, 64015, 77288, 54982, 61133, 48749, 88353, 76409, 52659, 41213, 30395, 19967, 84636, 87792, 41386, 2219, 55547, 6120, 16053, 50843, 30226, 37048, 35146, 29822, 30570, 63536, 66358, 4734, 53984, 56226, 8176, 20965, 2816, 79468, 77441, 21264, 79500, 98381, 20482, 67172, 12339, 58806, 19494, 77354, 25144, 37989, 69962, 3603, 47225, 35825, 14837, 12001, 34309, 74070, 88292, 74940, 98190, 4150, 45326, 61128, 24895, 16284, 15245, 99796, 53445, 11180, 45269, 69963, 30518, 15410, 38681, 70212, 39182, 47018, 96289, 61060, 70883, 72788, 72624, 7764, 69923, 48236, 12484, 92962, 17085, 76244, 45696, 83701, 37850, 99399, 88150, 36798, 4007, 41168, 27234, 94017, 41240, 67822, 46130, 24254, 60729, 59326, 78760, 49467, 83017, 98584, 20349, 562, 98919, 50420, 53248, 15386, 59372, 57262, 54143, 87547, 6536, 14730, 35004, 38118, 67779, 7789, 62898, 73921, 58420, 31269, 46244, 25260, 87335, 29788, 5094, 43270, 55468, 75355, 66982, 716, 17743, 78569, 63566, 55811, 86825, 80821, 15479, 32655, 40846, 80144, 23341, 9132, 92325, 61792, 66198, 93228, 32205, 4620, 10496, 7134, 90978, 48292, 37470, 82935, 82816, 16289, 50279, 47679, 99788, 6209, 75910, 15328, 9144, 40392, 19642, 33181, 48371, 3929, 68643, 86039, 1221, 79578, 52666, 2176, 77638, 79260, 31511, 71668, 19848, 91531, 13376, 38776, 56809, 26514, 9732, 12123, 51850, 1610, 95572, 21770, 58275, 56317, 85458, 50083, 11770, 33381, 85205, 26341, 84755, 93693, 66624, 53575, 94369, 23992, 16982, 432, 80632, 80929, 69700, 5876, 16857, 51007, 99800, 17004, 77870, 14807, 89980, 6468, 73739, 21487, 23890, 80029, 54768, 4102, 92368, 29531, 32985, 41905, 24870, 63793, 86128, 48707, 6772, 51214, 18666, 23598, 76386, 93415, 56168, 94741, 21254, 74753, 27657, 49552, 64440, 86019, 61139, 8064, 17234, 28045, 26968, 61025, 73075, 96833, 58907, 57740, 99122, 7610, 27, 43449, 92842, 85068, 6944, 58482, 59826, 6427, 72880, 91965, 31562, 22907, 55264, 21264, 70085, 58725, 85539, 71291, 30515, 86654, 25721, 63847, 38889, 94201, 63620, 24241, 50128, 6002, 99202, 22942, 58098, 49297, 48488, 9381, 46159, 73481, 4234, 6792, 45439, 80474, 30383, 83996, 67020, 40229, 39072, 59132, 34752, 77033, 49728, 23141, 68461, 30924, 62779, 64029, 45432, 30330, 72851, 21425, 40893, 97929, 70821, 23526, 36306, 50041, 88711, 83919, 91312, 41725, 46008, 48671, 96672, 72101, 66650, 34038, 61940, 99902, 52808, 5810, 12196, 91108, 43690, 23873, 9594, 10456, 43195, 23025, 92279, 73439, 51780, 87417, 41254, 14741, 6279, 47651, 62153, 9758, 35020, 66669, 14803, 59706, 12593, 13806, 98166, 61150, 69278, 13303, 70335, 92146, 4073, 92520, 8804, 8405, 26196, 69936, 39717, 29984, 34254, 59630, 71096, 67967, 94560, 71294, 48199, 21848, 14067, 20089, 14702, 15036, 32293, 97100, 20895, 61447, 99604, 16682, 66847, 87490, 54555, 68028, 82773, 69297, 59792, 54037, 42762, 5092, 75801, 15436, 65266, 94735, 91203, 27177, 82499, 62778, 68639, 65815, 91768, 59993, 82007, 64452, 89585, 32363, 33883, 45473, 23309, 82401, 73243, 55105, 87165, 74621, 10317, 97009, 9527, 70455, 13263, 27359, 92617, 2552, 65836, 1886, 8897, 531, 89480, 30055, 68119, 56504, 57574, 54166, 73185, 38085, 5454, 55838, 38136, 62739, 58203, 97851, 16773, 79053, 99775, 85485, 54877, 45850, 15829, 97200, 64358, 66337, 10013, 37678, 44966, 58072, 98076, 32324, 22369, 94176, 91755, 17458, 4608, 17666, 66086, 71251, 25746, 50419, 95200, 48163, 94252, 35704, 54588, 1448, 47695, 79601, 36461, 15204, 29415, 21872, 33552, 25295, 3139, 84705, 80772, 74396, 20181, 8331, 32440, 7085, 36388, 35005, 66403, 16795, 63569, 73551, 15095, 75444, 81010, 34907, 14385, 62815, 87354, 33317, 30389, 34501, 82279, 20377, 16669, 91373, 4138, 64159, 14302, 14323, 61436, 1927, 84229, 54347, 39494, 73033, 4191, 91762, 7999, 53527, 64454, 18940, 18764, 96866, 70969, 65242, 28365, 67606, 23491, 11173, 13348, 87344, 31637, 78789, 25458, 34557, 15469, 97643, 895, 83938, 456, 87727, 76673, 69532, 68795, 64518, 10557, 38730, 38351, 40775, 91714, 32137, 7063, 3341, 36896, 67754, 31835, 69538, 47236, 14790, 69629, 87630, 75683, 251, 87684, 23164, 2517, 55475, 33308, 14435, 99591, 89387, 76156, 49916, 83877, 11684, 38437, 32601, 29794, 3851, 98065, 20044, 39047, 98682, 11486, 68033, 97056, 22743, 87537, 10308, 10147, 14582, 42756, 36853, 97023, 99756, 17874, 27069, 13084, 57329, 36661, 49602, 80584, 18172, 47518, 21918, 16651, 32438, 25627, 77103, 55473, 80078, 57190, 5375, 25390, 96813, 29423, 54042, 9144, 55153, 42034, 7738, 8765, 63015, 5086, 90552, 77976, 70880, 93193, 73913, 50371, 97742, 64716, 55432, 91269, 83710, 52158, 52735, 99816, 11412, 1522, 16706, 23630, 84899, 19627, 68720, 43958, 43130, 2034, 447, 49729, 94582, 36098, 79088, 66037, 70391, 8347, 46353, 43803, 80624, 1524, 50416, 24432, 2146, 74735, 44093, 10898, 4264, 15359, 35414, 74004, 31636, 95885, 47088, 56447, 64372, 6680, 67099, 57330, 36133, 81933, 3944, 18279, 90225, 32228, 25250, 74708, 14497, 34496, 7033, 65366, 63457, 14107, 31209, 64815, 864, 86823, 43103, 88814, 29285, 7009, 22365, 42586, 97719, 23438, 44311, 74310, 42003, 90362, 61242, 98035, 3999, 70716, 41767, 22573, 22531, 22260, 70301, 69023, 62407, 36520, 75739, 84908, 16858, 44263, 70657, 35684, 24594, 58803, 84388, 36164, 61105, 83532, 51588, 66205, 19148, 62333, 79940, 35448, 85422, 32920, 53558, 59638, 77687, 12309, 52470, 60067, 19502, 43326, 66743, 15129, 83285, 75582, 75389, 71744, 69198, 94171, 34650, 44023, 1314, 15576, 83117, 94093, 58449, 93184, 30517, 79139, 25616, 33137, 82888, 31204, 86210, 74602, 23541, 57076, 47362, 88333, 32105, 17853, 54593, 11136, 30922, 3047, 2444, 9956, 17738, 40676, 40688, 41203, 37539, 63812, 35670, 62002, 3416, 7985, 94453, 96107, 18413, 30369, 77317, 98200, 47747, 94506, 20349, 52013, 47641, 29024, 94126, 79872, 61356, 46792, 35683, 36632, 63446, 33335, 7413, 90286, 27645, 64694, 88581, 75191, 30921, 39238, 97340, 48253, 11224, 24653, 552, 39916, 98688, 31045, 23525, 68788, 29301, 14892, 77868, 43659, 17986, 92344, 10244, 34798, 62863, 53443, 86006, 56542, 80342, 52654, 4400, 50223, 44397, 46051, 5247, 38638, 10282, 46660, 4604, 13822, 57490, 76726, 15808, 91393, 90857, 46685, 25503, 49610, 42427, 76478, 84345, 20103, 41173, 88038, 40827, 9807, 76120, 66050, 54217]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))))   (<combine> -)   (<data> (<point> main[index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))))))))) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))))))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))))))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})))))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> -)   (<data> (<point> main[index]))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :})))) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))))) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})))))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}))))) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}))))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})))))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9729384189217984, 0.9830885468510276]