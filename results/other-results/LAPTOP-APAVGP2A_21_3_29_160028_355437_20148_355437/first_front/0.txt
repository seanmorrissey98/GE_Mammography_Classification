Generation:
7

Phenotype:
def p():
  x = 0.0
  index = 15
  if sum(main) / 52 - main[index] < sum(main) / 52 - sum(opposite) / 52:
    x = (x + 0.8)
  index = 10
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.001)
  index = 26
  if sum(opposite) / 52 < sum(opposite) / 52:
    x = (x - 0.0000001)
  index = 42
  if sum(main) / 52 < main[index]:
    x = (x + 1.0)
  index = 18
  if opposite[index] < opposite[index]:
    x = (x + 1.0)
  return x
XXX_output_XXX = p()

Genotype:
[71115, 28426, 6577, 95585, 92815, 65358, 15134, 18570, 51871, 86675, 71942, 78685, 85584, 98889, 92154, 78708, 72307, 489, 77765, 19509, 36273, 13020, 82711, 85343, 53123, 57343, 12387, 54634, 1333, 39276, 87638, 38371, 44067, 6734, 73861, 9313, 93070, 55516, 52102, 20746, 3139, 87023, 13283, 12039, 52545, 5200, 26785, 38933, 9256, 97001, 35406, 6008, 14423, 48943, 15460, 54511, 99139, 56119, 78660, 55397, 96509, 42052, 29035, 50120, 88783, 35536, 53666, 80884, 15552, 24728, 9892, 93670, 7442, 70920, 36978, 95725, 4443, 41483, 16886, 96679, 92625, 77165, 9284, 85171, 5923, 68379, 50327, 10882, 93115, 75377, 28233, 69031, 75761, 52798, 87036, 28100, 31135]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<combo> (<data> (<average> sum(main) / 52))   (<combine> -)   (<data> (<average> sum(opposite) / 52)))) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<average> sum(opposite) / 52))   (<eval> <)   (<data> (<average> sum(opposite) / 52)) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<average> sum(main) / 52))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.011235955056179775, 0.5024774384022066]