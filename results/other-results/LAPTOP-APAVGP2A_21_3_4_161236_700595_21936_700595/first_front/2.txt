Generation:
0

Phenotype:
def p():
  x = 0.0
  index = 24
  n = 42
  b = 43
  c = opposite[b]
  if abs(sum(main) - sum(opposite)) > 10000:
    x = 0.4
  index = 45
  n = 32
  b = 16
  c = main[b]
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.7)
  index = 12
  n = 48
  b = 26
  c = sum(main[:-index])
  if c > sum(main[:-index]):
    x = (x - 0.8)
  index = 9
  n = 47
  b = 14
  c = opposite[b]
  if main[b] > main[b] + 9:
    x = 0.3
  index = 13
  n = 32
  b = 8
  c = sum(opposite[:-index])
  if sum(main[-index:]) > main[50]:
    x = (x + 0.3)
  index = 20
  n = 13
  b = 48
  c = opposite[b]
  if opposite[b] < main[b] + 3:
    x = (x + 0.8)
  index = 35
  n = 14
  b = 47
  c = opposite[21]
  if main[b] > main[14]:
    x = (x * 0.4)
  index = 20
  n = 40
  b = 20
  c = main[b]
  if opposite[b] < main[b] + 9:
    x = (x / 0.4)
  index = 25
  n = 50
  b = 34
  c = main[b]
  if main[b] < opposite[b]:
    x = (x / 0.7)
  index = 34
  n = 36
  b = 34
  c = main[b]
  if c < opposite[b]:
    x = (x / 0.6)
  index = 32
  n = 28
  b = 48
  c = opposite[b] + main[b]
  if main[b] > opposite[b] + 9:
    x = (x * 0.6)
  index = 38
  n = 29
  b = 10
  c = opposite[b]
  if c < sum(main[-index:]):
    x = (x * 0.2)
  index = 48
  n = 36
  b = 24
  c = main[b] + main[b]
  if c > main[b] * opposite[b]:
    x = (x * 0.2)
  return x
XXX_output_XXX = p()

Genotype:
[37591, 61707, 36487, 63004, 16656, 22386, 81741, 32728, 68207, 40281, 9705, 19842, 37348, 72010, 10911, 71220, 29756, 29885, 7019, 68926, 35153, 35580, 86798, 40888, 66059, 64786, 97940, 25299, 45725, 7680, 10729, 12541, 79839, 35276, 71035, 24968, 80577, 81372, 20477, 28416, 45367, 93884, 86089, 43230, 31495, 41682, 54086, 23718, 39338, 7937, 48463, 94774, 37980, 75614, 92026, 57103, 61307, 70517, 36120, 65509, 59632, 49145, 14283, 39215, 79762, 8032, 14621, 85891, 3844, 57186, 24321, 64916, 12727, 46244, 56560, 77775, 54923, 56254, 64105, 99486, 42815, 44304, 99272, 65926, 21380, 15220, 51085, 50570, 36858, 82177, 26871, 84283, 25091, 91063, 99055, 84070, 70264, 31034, 40104, 28148, 99252, 45398, 81752, 29414, 18902, 61315, 97168, 97077, 96411, 9432, 64505, 86, 71772, 13537, 74226, 96491, 21366, 2020, 50653, 61753, 56003, 27156, 65456, 46838, 28714, 89520, 62913, 50465, 95128, 28466, 58873, 46988, 87056, 7207, 4353, 55306, 79973, 27266, 31193, 7313, 7374, 17208, 22786, 83470, 96038, 4224, 60131, 68635, 92405, 15681, 33917, 86762, 34101, 68339, 6761, 20837, 8427, 83289, 16380, 61596, 39955, 36156, 6219, 59872, 45120, 25800, 76891, 54414, 46923, 80117, 54698, 79064, 50408, 33703, 13735, 63658, 4445, 52110, 19057, 39382, 74877, 31424, 69153, 90490, 1627, 63742, 89376, 97046, 44280, 57870, 58409, 43425, 84394, 18048, 35567, 64868, 15836, 98851, 58195, 51902, 88040, 77987, 37123, 23265, 78893, 97069, 6034, 47943, 2635, 52720, 9400, 66834, 18647, 59972, 53691, 20816, 62462, 84829, 53024, 35365, 55863, 312, 39207, 18340, 48421, 8458, 54182, 8683, 50195, 12589, 4892, 23777, 59640, 17786, 38759, 56945, 24702, 81902, 52856, 29888, 78565, 13735, 30722, 95483, 69912, 2856, 3911, 79736, 98853, 95326, 40081, 90656, 7219, 29677, 31330, 12066, 60819, 87692, 27211, 62146, 39268, 1196, 5078, 91390, 93612, 4003, 77191, 55947, 83614, 63514, 37276, 82938, 69410, 21330, 15285, 40928, 39737, 38215, 76670, 36087, 93985, 79673, 89511, 62512, 57789, 97664, 16702, 80297, 62045, 86817, 9534, 89609, 61035, 89017, 73445, 7003, 76419, 75018, 67139, 85095, 51632, 10394, 3383, 79242, 71586, 69339, 30926, 48863, 51972, 82223, 87251, 56503, 38505, 89673, 33675, 3418, 72538, 10165, 2697, 30383, 31671, 8356, 63683, 21194, 5676, 62105, 5301, 96541, 56807, 69288, 60684, 73945, 85047, 93589, 4832, 48892, 68431, 19034, 54836, 22091, 91523, 2401, 61887, 8312, 19196, 89222, 93729, 48042, 68030, 87337, 15698, 42505, 88492, 15603, 59607, 20982, 28840]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 24)) {::} (<a> n =  (<n> 42)) {::} (<b> b =  (<n> 43)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (<const> 0.4)) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<a> n =  (<n> 32)) {::} (<b> b =  (<n> 16)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 26)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> if c  (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<const> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<a> n =  (<n> 47)) {::} (<b> b =  (<n> 14)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[b])  >  (<point> main[b])  +  (<d> 9) :{:x =  (<expr> (<const> 0.3)) :}))) {::} (<code> (<index> index =  (<n> 13)) {::} (<a> n =  (<n> 32)) {::} (<b> b =  (<n> 8)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<point> main[ (<n> 50) ])) :{:x =  (<expr> (x +  (<const> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<a> n =  (<n> 13)) {::} (<b> b =  (<n> 48)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[b])  <  (<point> main[b])  +  (<d> 3) :{:x =  (<expr> (x +  (<const> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 35)) {::} (<a> n =  (<n> 14)) {::} (<b> b =  (<n> 47)) {::} (<c> c =  (<data> (<point> opposite[ (<n> 21) ]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> >)   (<data> (<point> main[ (<n> 14) ])) :{:x =  (<expr> (x *  (<const> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<a> n =  (<n> 40)) {::} (<b> b =  (<n> 20)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[b])  <  (<point> main[b])  +  (<d> 9) :{:x =  (<expr> (x /  (<const> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<a> n =  (<n> 50)) {::} (<b> b =  (<n> 34)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x /  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<a> n =  (<n> 36)) {::} (<b> b =  (<n> 34)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x /  (<const> 0.6) )) :})))) {::} (<code> (<index> index =  (<n> 32)) {::} (<a> n =  (<n> 28)) {::} (<b> b =  (<n> 48)) {::} (<c> c =  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> +)   (<data> (<point> main[b]))))) {::} (<if> if  (<point> main[b])  >  (<point> opposite[b])  +  (<d> 9) :{:x =  (<expr> (x *  (<const> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<a> n =  (<n> 29)) {::} (<b> b =  (<n> 10)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x *  (<const> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 48)) {::} (<a> n =  (<n> 36)) {::} (<b> b =  (<n> 24)) {::} (<c> c =  (<data> (<combo> (<data> (<point> main[b]))   (<combine> +)   (<data> (<point> main[b]))))) {::} (<if> if c  (<eval> >)   (<data> (<combo> (<data> (<point> main[b]))   (<combine> *)   (<data> (<point> opposite[b])))) :{:x =  (<expr> (x *  (<const> 0.2) )) :}))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.02247191011235955, 0.49697267319279326]