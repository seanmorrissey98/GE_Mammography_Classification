Generation:
0

Phenotype:
def p():
  x = 0.0
  index = 9
  n = 39
  b = 30
  c = main[b]
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x - 0.6)
  index = 23
  n = 7
  b = 15
  c = sum(main[:-index])
  if opposite[39] < main[b] + 5:
    x = (x + 0.5)
  index = 13
  n = 23
  b = 0
  c = main[b]
  if opposite[b] < opposite[b] + 3:
    x = 1.0
  index = 35
  n = 34
  b = 46
  c = opposite[b]
  if main[47] < opposite[b] + 9:
    x = (x - 0.7)
  index = 21
  n = 1
  b = 30
  c = main[b]
  if opposite[b] > opposite[25] + 6:
    x = (x / 0.9)
  index = 22
  n = 11
  b = 7
  c = sum(main[:-index])
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x / 1.0)
  index = 41
  n = 6
  b = 14
  c = main[b]
  if opposite[25] > opposite[b] + 9:
    x = (x * 0.3)
  index = 40
  n = 5
  b = 4
  c = main[b]
  if opposite[45] < main[b] + 4:
    x = (x / 0.7)
  index = 34
  n = 38
  b = 22
  c = sum(main[:-index])
  if main[b] < opposite[b] + 8:
    x = (x / 0.6)
  index = 21
  n = 42
  b = 40
  c = opposite[b]
  if c > main[b]:
    x = (x * 0.4)
  index = 9
  n = 0
  b = 13
  c = sum(opposite[-index:])
  if opposite[b] < opposite[b] + 9:
    x = 0.8
  index = 45
  n = 23
  b = 23
  c = main[b]
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 5000:
    x = 0.9
  index = 9
  n = 15
  b = 22
  c = opposite[b]
  if opposite[b] < main[12] + 1:
    x = (x + 0.6)
  index = 13
  n = 31
  b = 43
  c = sum(main[:-index])
  if c > main[26]:
    x = 0.5
  index = 44
  n = 15
  b = 28
  c = main[b]
  if opposite[b] > opposite[b] + 8:
    x = (x + 0.7)
  index = 40
  n = 41
  b = 33
  c = main[b]
  if main[b] < main[b] + 4:
    x = (x - 0.9)
  index = 48
  n = 2
  b = 29
  c = opposite[b]
  if opposite[8] > main[b] + 6:
    x = (x / 0.4)
  index = 45
  n = 31
  b = 7
  c = main[b]
  if main[41] < opposite[33] + 8:
    x = (x - 0.1)
  index = 28
  n = 41
  b = 43
  c = main[b]
  if opposite[b] < opposite[b]:
    x = (x * 1.0)
  index = 46
  n = 39
  b = 44
  c = main[b]
  if opposite[b] > main[b]:
    x = (x + 0.9)
  index = 2
  n = 31
  b = 34
  c = sum(main[:-index])
  if main[b] < main[b] + 6:
    x = (x + 0.5)
  index = 42
  n = 43
  b = 45
  c = opposite[b]
  if abs(sum(main) - sum(opposite)) > 5000:
    x = 0.4
  index = 34
  n = 17
  b = 24
  c = opposite[b]
  if main[b] > opposite[43] + 3:
    x = (x + 0.3)
  index = 42
  n = 40
  b = 8
  c = main[b]
  if main[b] > main[b] + 0:
    x = (x / 1.0)
  index = 47
  n = 39
  b = 7
  c = opposite[b]
  if opposite[45] > opposite[b] + 5:
    x = (x / 0.7)
  index = 25
  n = 23
  b = 26
  c = sum(opposite[-index:])
  if sum(opposite[:-index]) < main[29]:
    x = (x - 1.0)
  index = 34
  n = 42
  b = 0
  c = opposite[b]
  if c < opposite[b]:
    x = (x * 0.7)
  index = 2
  n = 48
  b = 34
  c = opposite[b]
  if main[b] < main[30] + 8:
    x = (x * 1.0)
  index = 36
  n = 0
  b = 18
  c = main[b]
  if main[b] > opposite[b]:
    x = (x * 0.7)
  index = 48
  n = 26
  b = 17
  c = main[2]
  if c > sum(main[-index:]):
    x = (x + 0.7)
  index = 50
  n = 40
  b = 14
  c = main[b]
  if main[11] > opposite[49] + 1:
    x = (x + 0.9)
  index = 28
  n = 8
  b = 36
  c = opposite[b]
  if c > main[b]:
    x = (x * 0.4)
  return x
XXX_output_XXX = p()

Genotype:
[21155, 69475, 45287, 63099, 15920, 42252, 41259, 43675, 26397, 40788, 3405, 65697, 8303, 62579, 4597, 47425, 97427, 56879, 19131, 44764, 80271, 56106, 24356, 76192, 19997, 29313, 1087, 19126, 27557, 2993, 36496, 14394, 63552, 44493, 31935, 27990, 52733, 87855, 53599, 30470, 87407, 84983, 15025, 19477, 2594, 26867, 1326, 17194, 66766, 27550, 45708, 29144, 79746, 94388, 11401, 52283, 27092, 34939, 35856, 12911, 16481, 80004, 38802, 1026, 60513, 91505, 12611, 73166, 72537, 70949, 35455, 43362, 81566, 93906, 73825, 49644, 46820, 16525, 314, 84252, 85226, 9312, 54596, 86947, 9124, 18356, 15323, 34328, 12926, 36396, 1524, 34930, 43640, 34179, 29420, 76191, 79827, 38087, 16314, 53090, 79395, 90846, 30290, 93913, 3984, 29336, 87884, 81891, 39304, 69498, 12193, 78323, 36796, 55920, 53131, 89612, 56078, 38932, 20552, 78261, 65824, 77546, 88740, 84988, 2949, 26048, 1332, 92922, 98042, 80359, 37959, 77916, 53664, 85644, 51061, 98477, 49222, 29404, 32062, 30413, 33721, 5969, 94882, 85638, 70790, 59749, 23494, 14357, 87310, 22980, 97313, 36792, 75560, 26547, 74460, 55342, 10456, 36607, 98158, 27484, 97879, 16667, 36033, 93251, 22479, 62505, 39429, 40168, 87624, 2493, 34499, 59138, 54821, 32455, 57740, 45255, 2479, 82742, 96572, 74119, 65666, 31529, 10558, 9278, 42475, 78629, 91988, 18076, 48981, 33064, 99527, 44260, 88959, 59803, 99540, 52884, 16328, 41553, 23240, 37556, 12753, 29340, 61951, 78308, 97267, 25094, 8256, 46260, 97886, 9772, 74305, 56044, 29616, 71693, 660, 59412, 46227, 50115, 65746, 23876, 41175, 4266, 54826, 39534, 25540, 9601, 14522, 58178, 21668, 73022, 77928, 34918, 59268, 27474, 57698, 72499, 22984, 28956, 61924, 34813, 81365, 3365, 58585, 33504, 6837, 54260, 7048, 39037, 35660, 70127, 34827, 25864, 80281, 8922, 86893, 99187, 46558, 70761, 25299, 52701, 6776, 21331, 60759, 43018, 58254, 73508, 49966, 31211, 52770, 32808, 21159, 78380, 28940, 36398, 88578, 55900, 40835, 93116, 69356, 85477, 15805, 89286, 92203, 70343, 57174, 51914, 32335, 19697, 96542, 65526, 48293, 93777, 45838, 22708, 64763, 16931, 5304, 68643, 58891, 71139, 77767, 6325, 22177, 17684, 80857, 25283, 80756, 20882, 83323, 78604, 45532, 44169, 7592, 55849, 93620, 49411, 97145, 86489, 67031, 33684, 23611, 18406, 94683, 41212, 95442, 68222, 70991, 47982, 11707, 14993, 42418, 21019, 93853, 61251, 5766, 60411, 97723, 77198, 39919, 16235, 24564, 67790, 19780, 136, 49712, 58435, 83134, 5555, 20473, 59481, 72105, 30537, 73685, 91582, 13254, 22126, 25743, 12467, 95394, 1812, 39058, 47532, 29918, 6354, 64892, 69928, 35969, 78617, 19384, 32818, 34534, 53995, 44824, 49806, 72081, 13648, 72020, 2095, 95704, 42846, 49322, 70231, 55546, 79951, 13592, 22277, 98747, 20620, 2816, 51931, 90554, 80136, 27445, 12333, 4628, 93602, 48141, 30063, 44169, 84400, 38809, 36505, 97354, 17961, 28189, 81458, 84292, 15972, 79772, 50223, 22739, 20125, 17830, 51830, 38635, 8895, 96355, 34803, 80746, 17550, 72109, 77345, 47713, 29593, 74014, 90715, 59813, 8578, 15279, 76785, 72865, 4364, 97018, 39193, 70927, 36075, 28721, 6223, 80045, 5691, 1316, 38606, 14878, 56151, 38749, 71628, 47153, 20421, 7836, 25908, 27730, 73794, 67953, 47524, 6622, 27942, 57229, 40033, 95333, 23726, 90893, 99755, 79476, 81504, 85339, 96088, 885, 63306, 5338, 17743, 4208, 65341, 16756, 24715, 23501, 54601, 36761, 59483, 39208, 33608, 13975, 52639, 84604, 87745, 28608, 24436, 65143, 73479, 38781, 47830, 44729, 50818, 22287, 1186, 50411, 86233, 87218, 60049, 4621, 31329, 20633, 37845, 20472, 76700, 95756, 1673, 69253, 10754, 39312, 87246, 16739, 64022, 98389, 12605, 60606, 87886, 93403, 60628, 2689, 90615, 36273, 30221, 67506, 27733, 22883, 12662, 91181, 4785, 13818, 86551, 13866, 53669, 30857, 92859, 90575, 8922, 99411, 44886, 87672, 39432, 65353, 7661, 41050, 34375, 3464, 16467, 43589, 55504, 49824, 25600, 75024, 40818, 59469, 80282, 28791, 50524, 16539, 87624, 75919, 97644, 24830, 39717, 65366, 37930, 34875, 73252, 46046, 33380, 47378, 67711, 11447, 78883, 22345, 44551, 9012, 64535, 76846, 75123, 40754, 50457, 15789, 38407, 94768, 8431, 5547, 76801, 48481, 19843, 2692, 88429, 34524, 76142, 28615, 66281, 259, 46506, 62529, 83063, 27042, 12327, 88695, 46661, 9898, 76097, 48301, 3700, 24962, 40607, 13279, 89866, 80275, 706, 74381, 50152, 43238, 12454, 86665, 23654, 62946, 45124, 42543, 1308, 85032, 99198, 40581, 75054, 24346, 79781, 66145, 12565, 15355, 89268, 84926, 43790, 98347, 11588, 15318, 74051, 78835, 98721, 81302, 5546, 8061, 63560, 47941, 6767, 77667, 58015, 49535, 93105, 74548, 50387, 65848, 10552, 22460, 72981, 74699, 16809, 81071, 82288, 18071, 54167, 39001, 88503, 68800, 90547, 65168, 11742, 83143, 84537, 96398, 33548, 88225, 69661, 11796, 97594, 73468, 43260, 83074, 30146, 13826, 17280, 65372, 8070, 31635, 33770, 6611, 27532, 90564, 66399, 77350, 89946, 70691, 10138, 2732, 71925, 44748, 49331, 28819, 78686, 60929, 61057, 93385, 15017, 7462, 22204, 80408, 72644, 6130, 95901, 87588, 70999, 33068, 99922, 93375, 20530, 58595, 59028, 85807, 5100, 60659, 67980, 11337, 44760, 48884, 39128, 78579, 53232, 5833, 90584, 38274, 31968, 91627, 56222, 71248, 59682, 64308, 12067, 34065, 4637, 24538, 18702, 9409, 48086, 4883, 24, 7315, 78239, 7452, 76660, 17936, 15706, 93082, 72305, 8394, 9038, 62532, 86986, 13090, 48146, 42178, 4793, 56659, 28519, 14382, 71001, 66065, 80280, 85569, 64289, 45389, 78118, 90540, 57834, 24614, 96540, 45193, 20089, 35901, 30796, 97497, 62708, 6387, 19316, 25452, 75506, 31540, 45577, 52363, 55349, 77048, 87765, 18906, 9546, 42948, 70705, 74902, 86849, 45674, 99215, 68160, 31583, 88417, 11178, 51934, 16309, 48246, 73182, 55208, 37233, 31138, 14291, 32834, 13679, 249, 47755, 63464, 68764, 19264, 20184, 45322, 98856, 78872, 4371, 77410, 82401]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 9)) {::} (<a> n =  (<n> 39)) {::} (<b> b =  (<n> 30)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<const> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<a> n =  (<n> 7)) {::} (<b> b =  (<n> 15)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> if  (<point> opposite[ (<n> 39) ])  <  (<point> main[b])  +  (<d> 5) :{:x =  (<expr> (x +  (<const> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<a> n =  (<n> 23)) {::} (<b> b =  (<n> 0)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[b])  <  (<point> opposite[b])  +  (<d> 3) :{:x =  (<expr> (<const> 1.0)) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<a> n =  (<n> 34)) {::} (<b> b =  (<n> 46)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[ (<n> 47) ])  <  (<point> opposite[b])  +  (<d> 9) :{:x =  (<expr> (x -  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<a> n =  (<n> 1)) {::} (<b> b =  (<n> 30)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[b])  >  (<point> opposite[ (<n> 25) ])  +  (<d> 6) :{:x =  (<expr> (x /  (<const> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 22)) {::} (<a> n =  (<n> 11)) {::} (<b> b =  (<n> 7)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x /  (<const> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<a> n =  (<n> 6)) {::} (<b> b =  (<n> 14)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 25) ])  >  (<point> opposite[b])  +  (<d> 9) :{:x =  (<expr> (x *  (<const> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<a> n =  (<n> 5)) {::} (<b> b =  (<n> 4)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 45) ])  <  (<point> main[b])  +  (<d> 4) :{:x =  (<expr> (x /  (<const> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 34)) {::} (<a> n =  (<n> 38)) {::} (<b> b =  (<n> 22)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> if  (<point> main[b])  <  (<point> opposite[b])  +  (<d> 8) :{:x =  (<expr> (x /  (<const> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<a> n =  (<n> 42)) {::} (<b> b =  (<n> 40)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x *  (<const> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 9)) {::} (<a> n =  (<n> 0)) {::} (<b> b =  (<n> 13)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))) {::} (<if> if  (<point> opposite[b])  <  (<point> opposite[b])  +  (<d> 9) :{:x =  (<expr> (<const> 0.8)) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<a> n =  (<n> 23)) {::} (<b> b =  (<n> 23)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (<const> 0.9)) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<a> n =  (<n> 15)) {::} (<b> b =  (<n> 22)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[b])  <  (<point> main[ (<n> 12) ])  +  (<d> 1) :{:x =  (<expr> (x +  (<const> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 13)) {::} (<a> n =  (<n> 31)) {::} (<b> b =  (<n> 43)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> if c  (<eval> >)   (<data> (<point> main[ (<n> 26) ])) :{:x =  (<expr> (<const> 0.5)) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<a> n =  (<n> 15)) {::} (<b> b =  (<n> 28)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[b])  >  (<point> opposite[b])  +  (<d> 8) :{:x =  (<expr> (x +  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<a> n =  (<n> 41)) {::} (<b> b =  (<n> 33)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[b])  <  (<point> main[b])  +  (<d> 4) :{:x =  (<expr> (x -  (<const> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<a> n =  (<n> 2)) {::} (<b> b =  (<n> 29)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 8) ])  >  (<point> main[b])  +  (<d> 6) :{:x =  (<expr> (x /  (<const> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 45)) {::} (<a> n =  (<n> 31)) {::} (<b> b =  (<n> 7)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[ (<n> 41) ])  <  (<point> opposite[ (<n> 33) ])  +  (<d> 8) :{:x =  (<expr> (x -  (<const> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<a> n =  (<n> 41)) {::} (<b> b =  (<n> 43)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> opposite[b]))   (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x *  (<const> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<a> n =  (<n> 39)) {::} (<b> b =  (<n> 44)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> opposite[b]))   (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x +  (<const> 0.9) )) :})))) {::} (<code> (<index> index =  (<n> 2)) {::} (<a> n =  (<n> 31)) {::} (<b> b =  (<n> 34)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> if  (<point> main[b])  <  (<point> main[b])  +  (<d> 6) :{:x =  (<expr> (x +  (<const> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<a> n =  (<n> 43)) {::} (<b> b =  (<n> 45)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (<const> 0.4)) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<a> n =  (<n> 17)) {::} (<b> b =  (<n> 24)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[b])  >  (<point> opposite[ (<n> 43) ])  +  (<d> 3) :{:x =  (<expr> (x +  (<const> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<a> n =  (<n> 40)) {::} (<b> b =  (<n> 8)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[b])  >  (<point> main[b])  +  (<d> 0) :{:x =  (<expr> (x /  (<const> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<a> n =  (<n> 39)) {::} (<b> b =  (<n> 7)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 45) ])  >  (<point> opposite[b])  +  (<d> 5) :{:x =  (<expr> (x /  (<const> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 25)) {::} (<a> n =  (<n> 23)) {::} (<b> b =  (<n> 26)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<point> main[ (<n> 29) ])) :{:x =  (<expr> (x -  (<const> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<a> n =  (<n> 42)) {::} (<b> b =  (<n> 0)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x *  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 34)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[b])  <  (<point> main[ (<n> 30) ])  +  (<d> 8) :{:x =  (<expr> (x *  (<const> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<a> n =  (<n> 0)) {::} (<b> b =  (<n> 18)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> >)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x *  (<const> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 48)) {::} (<a> n =  (<n> 26)) {::} (<b> b =  (<n> 17)) {::} (<c> c =  (<data> (<point> main[ (<n> 2) ]))) {::} (<if> if c  (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<const> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<a> n =  (<n> 40)) {::} (<b> b =  (<n> 14)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[ (<n> 11) ])  >  (<point> opposite[ (<n> 49) ])  +  (<d> 1) :{:x =  (<expr> (x +  (<const> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<a> n =  (<n> 8)) {::} (<b> b =  (<n> 36)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x *  (<const> 0.4) )) :}))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.028089887640449437, 0.49520170906492506]