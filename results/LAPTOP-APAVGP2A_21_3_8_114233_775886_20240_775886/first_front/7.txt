Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 4
  n = 27
  b = 28
  c = sum(main[-index:])
  if main[b] > main[b] + 2:
    x = (x / 0.4)
  index = 17
  n = 14
  b = 30
  c = sum(main[-index:])
  if main[b] < main[32] + 5:
    x = (x - 0.6)
  index = 20
  n = 49
  b = 33
  c = main[b] - sum(opposite[:-index])
  if main[b] < opposite[33] + 8:
    x = (x - 0.8)
  index = 18
  n = 36
  b = 28
  c = opposite[b]
  if c > sum(main[-index:]):
    x = (x - 0.7)
  index = 2
  n = 41
  b = 32
  c = sum(main[:-index])
  if opposite[b] + main[b] > sum(opposite[-index:]):
    x = (x - 0.8)
  index = 5
  n = 2
  b = 38
  c = sum(main[-index:])
  if c > main[b]:
    x = (x * 0.3)
  index = 15
  n = 2
  b = 47
  c = main[b]
  if main[b] < main[b] + 5:
    x = (x / 0.8)
  index = 36
  n = 2
  b = 46
  c = sum(main[-index:])
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 1000:
    x = (x / 0.8)
  index = 36
  n = 48
  b = 2
  c = opposite[b]
  if c < main[b]:
    x = 0.7
  index = 42
  n = 6
  b = 21
  c = sum(main[:-index])
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 1000:
    x = (x * 0.2)
  index = 44
  n = 30
  b = 5
  c = main[b]
  if c > main[b]:
    x = (x / 0.8)
  index = 18
  n = 48
  b = 4
  c = main[b]
  if main[b] < main[b]:
    x = (x * 0.2)
  index = 29
  n = 2
  b = 0
  c = main[b]
  if opposite[b] > opposite[0] + 5:
    x = (x + 0.4)
  index = 45
  n = 45
  b = 11
  c = main[44]
  if main[b] < opposite[33] + 3:
    x = (x * 0.9)
  index = 38
  n = 27
  b = 20
  c = main[7]
  if opposite[1] > opposite[31] + 2:
    x = 0.6
  index = 42
  n = 13
  b = 50
  c = opposite[48] + main[27]
  if c > sum(opposite[-index:]) + opposite[38]:
    x = (x / 0.7)
  index = 4
  n = 25
  b = 23
  c = opposite[b] - opposite[b]
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x * 0.5)
  index = 22
  n = 0
  b = 2
  c = opposite[b]
  if opposite[16] < opposite[b] + 5:
    x = (x + 0.3)
  index = 17
  n = 19
  b = 29
  c = opposite[b]
  if main[b] > main[8] + 1:
    x = (x * 0.4)
  index = 14
  n = 6
  b = 4
  c = main[b]
  if opposite[20] < main[16] + 1:
    x = (x - 0.3)
  index = 38
  n = 33
  b = 40
  c = main[b]
  if main[b] > main[b]:
    x = (x * 0.7)
  index = 10
  n = 22
  b = 42
  c = opposite[6]
  if opposite[50] > opposite[b] + 3:
    x = (x + 0.3)
  index = 44
  n = 33
  b = 21
  c = main[48]
  if c < sum(opposite[:-index]):
    x = (x * 0.1)
  index = 17
  n = 50
  b = 41
  c = sum(main[-index:])
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x / 0.2)
  index = 34
  n = 40
  b = 15
  c = opposite[b]
  if opposite[b] > main[b]:
    x = (x * 0.5)
  index = 28
  n = 6
  b = 18
  c = opposite[b]
  if opposite[b] > opposite[b]:
    x = (x * 0.7)
  index = 12
  n = 28
  b = 50
  c = sum(main[-index:])
  if c > main[b]:
    x = (x + 0.4)
  index = 6
  n = 25
  b = 44
  c = main[b]
  if opposite[b] < opposite[b]:
    x = (x * 0.3)
  index = 15
  n = 42
  b = 2
  c = main[b]
  if opposite[6] > main[12] + 7:
    x = (x + 0.2)
  index = 12
  n = 20
  b = 0
  c = sum(opposite[-index:])
  if main[b] > opposite[b] + main[b]:
    x = (x * 0.8)
  index = 45
  n = 10
  b = 18
  c = opposite[38]
  if main[18] < main[b] + 2:
    x = (x + 0.2)
  index = 7
  n = 20
  b = 7
  c = main[b]
  if c < main[b]:
    x = (x / 0.5)
  index = 9
  n = 12
  b = 19
  c = main[b]
  if main[b] > main[b]:
    x = (x - 0.5)
  index = 45
  n = 38
  b = 13
  c = opposite[b]
  if main[b] < main[b]:
    x = (x + 0.1)
  index = 16
  n = 37
  b = 22
  c = main[b]
  if main[29] < opposite[26] + 9:
    x = (x + 0.5)
  index = 17
  n = 38
  b = 33
  c = sum(main[:-index])
  if main[0] > main[b] + 1:
    x = (x - 0.4)
  return x
XXX_output_XXX = p()

Genotype:
[11621, 72476, 30582, 51244, 92975, 95897, 94302, 69458, 22841, 81607, 10669, 23183, 69227, 44540, 26298, 65357, 4684, 7525, 84937, 94164, 8304, 78919, 3171, 54851, 51035, 52058, 97016, 13422, 58766, 7354, 52112, 53574, 59512, 84046, 17473, 91792, 57931, 12382, 61772, 22330, 42811, 166, 8591, 20316, 7388, 22525, 24417, 89066, 69623, 70773, 19009, 65956, 89056, 93295, 64706, 56630, 85155, 90581, 21189, 13311, 41293, 20700, 39388, 48748, 63094, 43451, 29330, 98077, 41119, 67854, 86344, 38784, 8441, 37190, 66544, 6222, 56244, 34249, 7288, 93052, 85297, 35603, 9388, 8062, 23285, 59759, 73201, 97906, 93535, 56952, 97244, 58604, 69054, 91020, 75855, 64479, 34158, 37674, 38813, 80230, 44441, 36378, 51581, 98054, 78211, 8257, 71933, 48819, 19617, 72170, 85765, 72702, 86881, 47465, 92372, 79242, 19096, 5642, 50018, 63636, 13072, 34151, 49296, 33855, 97794, 74865, 51199, 88202, 60692, 11737, 10848, 48591, 1702, 90967, 34314, 31660, 1068, 61249, 14384, 87206, 94648, 85187, 25195, 76697, 63731, 79064, 70197, 71218, 79179, 6142, 10739, 72863, 19094, 77019, 87815, 52308, 46686, 56831, 81556, 1875, 44289, 24432, 48972, 32487, 13378, 50191, 49968, 30704, 25584, 91255, 50144, 84166, 87833, 54272, 21202, 59695, 46061, 96244, 83748, 81495, 3479, 90972, 64323, 35982, 52749, 8573, 18466, 64223, 23995, 97806, 27509, 77176, 55922, 6945, 35132, 50814, 3093, 89033, 1154, 7631, 49324, 83713, 59117, 90222, 85861, 43927, 22252, 68212, 25682, 35381, 16409, 47599, 36628, 38850, 37217, 2643, 15557, 23911, 83480, 74970, 52892, 12020, 50512, 99132, 46655, 42237, 990, 94429, 48092, 75451, 22368, 20471, 94696, 40393, 72144, 15405, 48870, 10120, 71441, 22065, 53685, 96809, 44678, 99619, 60374, 4880, 74345, 6783, 29498, 64524, 84963, 78337, 55082, 60783, 9487, 27237, 28999, 57392, 71913, 24402, 26032, 39928, 60123, 68138, 8454, 77581, 7176, 15765, 77092, 79489, 64143, 97381, 67145, 93151, 61141, 68765, 10888, 18678, 29565, 30396, 604, 3436, 97951, 40453, 21733, 8900, 62272, 47359, 90844, 23427, 75796, 468, 85388, 5654, 40677, 27509, 9096, 69793, 65560, 65724, 36169, 35178, 46540, 60759, 78746, 13151, 34652, 7072, 46838, 31403, 12472, 77464, 72885, 45096, 33276, 63603, 70918, 82258, 9135, 52886, 1794, 52492, 90261, 69709, 31721, 66457, 44899, 54894, 92508, 80083, 4072, 25638, 27253, 99271, 83016, 99098, 36161, 9605, 96583, 31184, 8078, 78226, 57106, 90739, 27473, 49206, 2322, 32682, 13447, 86701, 45800, 89485, 96639, 36852, 91404, 37616, 14449, 59824, 410, 82150, 6559, 38240, 40394, 92827, 83173, 89269, 17946, 85106, 86913, 2754, 7737, 2029, 64561, 7181, 45974, 82858, 12524, 12471, 74133, 84226, 27681, 9345, 19545, 68093, 26055, 18643, 68976, 46490, 2886, 31330, 5973, 32920, 12485, 98555, 95051, 75163, 29686, 89793, 67930, 45228, 18235, 9736, 23280, 24136, 30119, 97300, 36886, 96433, 34752, 82772, 60096, 5475, 56689, 59386, 73448, 72084, 62926, 28366, 25532, 17217, 49743, 23680, 50881, 21231, 65237, 35217, 35107, 87696, 33645, 70698, 60557, 35534, 56561, 76356, 14386, 69712, 25539, 31151, 99037, 7978, 50856, 74430, 48774, 94048, 83007, 50472, 31051, 50921, 64900, 80982, 93725, 16046, 71284, 77827, 17353, 19065, 34555, 57667, 92310, 30688, 86747, 29012, 26066, 28897, 1675, 99488, 76853, 93905, 77257, 69762, 3724, 96882, 86920, 80532, 64368, 5132, 34628, 47885, 93123, 47133, 54419, 78439, 9973, 14738, 96588, 80238, 31685, 62898, 92316, 1694, 1920, 22746, 29871, 95845, 13190, 12155, 67439, 68357, 40862, 49944, 7024, 38456, 16228, 63916, 70845, 17781, 94831, 43517, 3016, 90284, 42454, 49742, 25550, 1734, 22197, 72589, 52854, 77640, 90953, 80096, 58285, 11837, 38922, 36161, 45816, 16828, 54631, 87620, 31676, 55575, 95872, 11117, 68666, 10966, 85421, 6388, 72906, 43032, 26987, 90671, 949, 46384, 31132, 56732, 95573, 11419, 39093, 95119, 10896, 16285, 30350, 90170, 97760, 60528, 83063, 40306, 54751, 68039, 24528, 63469, 13214, 8893, 38407, 79914, 66512, 42891, 17811, 15980, 52619, 189, 2254, 91193, 93343, 88230, 52174, 62946, 85363, 68616, 92164, 32671, 41605, 20597, 52421, 76452, 22955, 37881, 99994, 60651, 58346, 34308, 12715, 60074, 7572, 50812, 56749, 75412, 30180, 12378, 59106, 44224, 80332, 28500, 59990, 34711, 83151, 99220, 32185, 4240, 58160, 10476, 12936, 95805, 3928, 40955, 15843, 53723, 21435, 49941, 26358, 14515, 92467, 72947, 94456, 57028, 41568, 59191, 27446, 63967, 9220, 7031, 27916, 18668, 95815, 80640, 3901, 85329, 2047, 58672, 65078, 64249, 74750, 12601, 64940, 21152, 91604, 72407, 74182, 89336, 4731, 45147, 97729, 15409, 24728, 1509, 40332, 40467, 48571, 17234, 11481, 69947, 71122, 21332, 83388, 20815, 59204, 5866, 12153, 98858, 77960, 67951, 26451, 53615, 61321, 82400, 50100, 91950, 10211, 77739, 95501, 38587, 20230, 93003, 85251, 38779, 91511, 25869, 11773, 49274, 3458, 94110, 69884, 14350, 60717, 54963, 19104, 77494, 33585, 11701, 21348, 65027, 84654, 98122, 34039, 72556, 58690, 81089, 77211, 1870, 99366, 78403, 2322, 16609, 53297, 22964, 966, 44666, 6604, 88581, 59529, 83852, 64403, 99681, 48406, 40248, 530, 19614, 39201, 71091, 28068, 5193, 24484, 80533, 57532, 92758, 35704, 87904, 95299, 45041, 72536, 18385, 90215, 41914, 48815, 93645, 7510, 48832, 45489, 87948, 99067, 26361, 38132, 19131, 11679, 57181, 94850, 6188, 98327, 89464, 66703, 55719, 20281, 22310, 89804, 73769, 39218, 52669, 70706, 7929, 71270, 12904, 18549, 23538, 44521, 76862, 93747, 58160, 74501, 17400, 33435, 99519, 42980, 68004, 43348, 70334, 84104, 47790, 71098, 49989, 51434, 56838, 55852, 95056, 11410, 46962, 37543, 98566, 58822, 96879, 38221, 128, 95488, 88203, 85671, 35578, 15028, 18002, 51495, 9211, 71861, 2171, 32912, 34231, 58922, 36306, 51001, 82210, 17061, 81853, 67952, 23218, 11151, 68467, 46731, 56643, 21616, 25431, 34949, 18530, 93426, 57451, 51285, 2183, 38619, 29319, 43689, 86308, 764, 21790, 49284, 77438, 27645, 21969, 22973, 61023, 80842, 57767, 34284, 88687, 85910, 92697, 5888, 10007, 93594, 3169, 58150, 20837, 3539, 49445, 67403, 9908, 9213, 75808, 37000, 35746, 59783, 30920, 82866, 76450, 70653, 22187, 68894, 59856, 52718, 56230, 35770, 55917, 27138, 71156, 59352, 5553, 87581, 87546, 7050, 54304, 45388, 26580, 74874, 68214, 45942, 62079, 30723, 31398, 16117, 95641, 27915, 68875, 40586, 5717, 67501, 33076, 9967, 10775, 75484, 33426, 69286, 72489, 21355, 50825, 51723, 49926, 31192, 42629, 9344, 46953, 94906, 55619, 94542, 36912, 16211, 33957, 13234, 89952, 48200, 13527, 43378, 55147, 43086, 42416, 92761, 15979, 24581, 82277, 5911, 4833, 13804, 60402, 7167, 85126, 44782, 61583, 30078, 99495, 14149, 61823, 83164, 79448, 81462, 49779, 89706, 31398, 99402, 71380, 40357, 54467, 34414, 77535, 88634, 64079, 7142, 39017, 28558, 83952, 36223, 61784, 48395, 34578, 20228, 74157, 17357, 54090, 32989, 83966, 51389, 24144, 39071, 33048, 4361, 76173, 4215, 9366, 7184, 16048, 44953, 88939, 49291, 95788, 39468, 67797, 51128, 32206, 29270, 90122, 27578, 59836, 51532, 27765, 49899, 16959, 49008, 97251]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 4)) {::} (<a> n =  (<n> 27)) {::} (<b> b =  (<n> 28)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> if  (<point> main[b])  >  (<point> main[b])  +  (<d> 2) :{:x =  (<expr> (x /  (<const> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<a> n =  (<n> 14)) {::} (<b> b =  (<n> 30)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> if  (<point> main[b])  <  (<point> main[ (<n> 32) ])  +  (<d> 5) :{:x =  (<expr> (x -  (<const> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<a> n =  (<n> 49)) {::} (<b> b =  (<n> 33)) {::} (<c> c =  (<data> (<combo> (<data> (<point> main[b]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))) {::} (<if> if  (<point> main[b])  <  (<point> opposite[ (<n> 33) ])  +  (<d> 8) :{:x =  (<expr> (x -  (<const> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<a> n =  (<n> 36)) {::} (<b> b =  (<n> 28)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<const> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<a> n =  (<n> 41)) {::} (<b> b =  (<n> 32)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> +)   (<data> (<point> main[b]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<const> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<a> n =  (<n> 2)) {::} (<b> b =  (<n> 38)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> if c  (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x *  (<const> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<a> n =  (<n> 2)) {::} (<b> b =  (<n> 47)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[b])  <  (<point> main[b])  +  (<d> 5) :{:x =  (<expr> (x /  (<const> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 36)) {::} (<a> n =  (<n> 2)) {::} (<b> b =  (<n> 46)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x /  (<const> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 2)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (<const> 0.7)) :}))) {::} (<code> (<index> index =  (<n> 42)) {::} (<a> n =  (<n> 6)) {::} (<b> b =  (<n> 21)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x *  (<const> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<a> n =  (<n> 30)) {::} (<b> b =  (<n> 5)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x /  (<const> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 4)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x *  (<const> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<a> n =  (<n> 2)) {::} (<b> b =  (<n> 0)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[b])  >  (<point> opposite[ (<n> 0) ])  +  (<d> 5) :{:x =  (<expr> (x +  (<const> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 45)) {::} (<a> n =  (<n> 45)) {::} (<b> b =  (<n> 11)) {::} (<c> c =  (<data> (<point> main[ (<n> 44) ]))) {::} (<if> if  (<point> main[b])  <  (<point> opposite[ (<n> 33) ])  +  (<d> 3) :{:x =  (<expr> (x *  (<const> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<a> n =  (<n> 27)) {::} (<b> b =  (<n> 20)) {::} (<c> c =  (<data> (<point> main[ (<n> 7) ]))) {::} (<if> if  (<point> opposite[ (<n> 1) ])  >  (<point> opposite[ (<n> 31) ])  +  (<d> 2) :{:x =  (<expr> (<const> 0.6)) :})))) {::} (<code> (<index> index =  (<n> 42)) {::} (<a> n =  (<n> 13)) {::} (<b> b =  (<n> 50)) {::} (<c> c =  (<data> (<combo> (<data> (<point> opposite[ (<n> 48) ]))   (<combine> +)   (<data> (<point> main[ (<n> 27) ]))))) {::} (<if> if c  (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<point> opposite[ (<n> 38) ])))) :{:x =  (<expr> (x /  (<const> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<a> n =  (<n> 25)) {::} (<b> b =  (<n> 23)) {::} (<c> c =  (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> -)   (<data> (<point> opposite[b]))))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x *  (<const> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<a> n =  (<n> 0)) {::} (<b> b =  (<n> 2)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 16) ])  <  (<point> opposite[b])  +  (<d> 5) :{:x =  (<expr> (x +  (<const> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<a> n =  (<n> 19)) {::} (<b> b =  (<n> 29)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[b])  >  (<point> main[ (<n> 8) ])  +  (<d> 1) :{:x =  (<expr> (x *  (<const> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<a> n =  (<n> 6)) {::} (<b> b =  (<n> 4)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 20) ])  <  (<point> main[ (<n> 16) ])  +  (<d> 1) :{:x =  (<expr> (x -  (<const> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<a> n =  (<n> 33)) {::} (<b> b =  (<n> 40)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x *  (<const> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 10)) {::} (<a> n =  (<n> 22)) {::} (<b> b =  (<n> 42)) {::} (<c> c =  (<data> (<point> opposite[ (<n> 6) ]))) {::} (<if> if  (<point> opposite[ (<n> 50) ])  >  (<point> opposite[b])  +  (<d> 3) :{:x =  (<expr> (x +  (<const> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 44)) {::} (<a> n =  (<n> 33)) {::} (<b> b =  (<n> 21)) {::} (<c> c =  (<data> (<point> main[ (<n> 48) ]))) {::} (<if> if c  (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x *  (<const> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<a> n =  (<n> 50)) {::} (<b> b =  (<n> 41)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x /  (<const> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<a> n =  (<n> 40)) {::} (<b> b =  (<n> 15)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<data> (<point> opposite[b]))   (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x *  (<const> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<a> n =  (<n> 6)) {::} (<b> b =  (<n> 18)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<data> (<point> opposite[b]))   (<eval> >)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x *  (<const> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<a> n =  (<n> 28)) {::} (<b> b =  (<n> 50)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))) {::} (<if> if c  (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x +  (<const> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<a> n =  (<n> 25)) {::} (<b> b =  (<n> 44)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> opposite[b]))   (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x *  (<const> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 15)) {::} (<a> n =  (<n> 42)) {::} (<b> b =  (<n> 2)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 6) ])  >  (<point> main[ (<n> 12) ])  +  (<d> 7) :{:x =  (<expr> (x +  (<const> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<a> n =  (<n> 20)) {::} (<b> b =  (<n> 0)) {::} (<c> c =  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[b]))   (<combine> +)   (<data> (<point> main[b])))) :{:x =  (<expr> (x *  (<const> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<a> n =  (<n> 10)) {::} (<b> b =  (<n> 18)) {::} (<c> c =  (<data> (<point> opposite[ (<n> 38) ]))) {::} (<if> if  (<point> main[ (<n> 18) ])  <  (<point> main[b])  +  (<d> 2) :{:x =  (<expr> (x +  (<const> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<a> n =  (<n> 20)) {::} (<b> b =  (<n> 7)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x /  (<const> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<a> n =  (<n> 12)) {::} (<b> b =  (<n> 19)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> >)   (<data> (<point> main[b])) :{:x =  (<expr> (x -  (<const> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<a> n =  (<n> 38)) {::} (<b> b =  (<n> 13)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x +  (<const> 0.1) )) :})))))) {::} (<code> (<index> index =  (<n> 16)) {::} (<a> n =  (<n> 37)) {::} (<b> b =  (<n> 22)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[ (<n> 29) ])  <  (<point> opposite[ (<n> 26) ])  +  (<d> 9) :{:x =  (<expr> (x +  (<const> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<a> n =  (<n> 38)) {::} (<b> b =  (<n> 33)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> if  (<point> main[ (<n> 0) ])  >  (<point> main[b])  +  (<d> 1) :{:x =  (<expr> (x -  (<const> 0.4) )) :})))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[1.0, 0.5]