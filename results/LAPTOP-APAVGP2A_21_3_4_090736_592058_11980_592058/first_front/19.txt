Generation:
60

Phenotype:
def p():
  x = 0.0
  index = 8
  if opposite[index] + opposite[index] - opposite[index] - sum(main[:-index]) + sum(main[-index:]) - main[index] + sum(main[-index:]) - sum(main[:-index]) > main[index] - opposite[index] + main[index] + opposite[index] - opposite[index] + opposite[index] - opposite[index] - opposite[index] + main[index] - main[index] - opposite[index] + main[index] - main[index] + opposite[index] - sum(main[-index:]) + opposite[index]:
    x = (x + 0.001)
  index = 7
  if main[index] - opposite[index] - opposite[index] + sum(opposite[-index:]) - main[index] > sum(opposite[:-index]) - sum(main[-index:]) + opposite[index] + sum(main[-index:]) - main[index]:
    x = (x - 0.01)
  index = 42
  if main[index] - main[index] - opposite[index] + main[index] - opposite[index] + opposite[index] + sum(opposite[-index:]) + sum(opposite[-index:]) + sum(opposite[-index:]) > main[index] + main[index] + sum(main[:-index]) - sum(main[:-index]) - sum(main[:-index]) + main[index]:
    x = (x + 0.6)
  index = 45
  if main[index] + main[index] - sum(opposite[-index:]) > sum(main[-index:]) - main[index] - sum(opposite[:-index]):
    x = (x - 0.0000001)
  index = 23
  if sum(opposite[-index:]) > sum(opposite[-index:]) + sum(opposite[-index:]):
    x = (x + 0.1)
  index = 5
  if sum(opposite[:-index]) - sum(opposite[:-index]) + sum(opposite[:-index]) < opposite[index] - opposite[index]:
    x = (x - 0.01)
  index = 30
  if sum(opposite[:-index]) > sum(opposite[-index:]):
    x = (x + 0.2)
  index = 46
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 500:
    x = (x - 0.000001)
  index = 41
  if opposite[index] - sum(main[-index:]) < main[index]:
    x = (x - 0.001)
  index = 19
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.001)
  index = 7
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.4)
  index = 12
  if main[index] > main[index]:
    x = (x - 0.8)
  index = 40
  if main[index] < opposite[index]:
    x = (x - 0.6)
  index = 32
  if sum(main[-index:]) < main[index]:
    x = (x - 0.3)
  index = 26
  if main[index] < 1:
    if main[index] > main[index] + 0.6:
      x = (x - 0.01)
  else:
    if opposite[index] > main[index] + 2:
      x = (x + 0.8)
    else:
      x = (x - 0.000001)
  index = 26
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 1000:
    x = (x - 0.000001)
  index = 8
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 1000:
    x = (x - 0.01)
  index = 45
  if opposite[index] > main[index]:
    x = (x - 0.6)
  index = 37
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.5)
  index = 48
  if opposite[index] > opposite[index]:
    x = (x + 0.01)
  index = 12
  if main[index] < 1:
    if main[index] > main[index] + 0.0000001:
      x = (x - 0.9)
  else:
    if main[index] < main[index] + 5:
      x = (x + 0.3)
    else:
      x = (x - 0.0000001)
  index = 36
  if sum(main[-index:]) > main[index]:
    x = (x + 1.0)
  index = 39
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.0001)
  index = 48
  if main[index] < 1:
    if main[index] > main[index] + 0.00001:
      x = (x + 0.4)
  else:
    if opposite[index] > opposite[index] + 3:
      x = (x - 0.5)
    else:
      x = (x + 0.0000001)
  index = 26
  if opposite[index] - sum(opposite[:-index]) < opposite[index] + sum(opposite[:-index]):
    x = (x - 0.5)
  index = 4
  if sum(main[:-index]) + main[index] + sum(main[:-index]) - main[index] < sum(main[-index:]) + main[index] - main[index] - main[index] - sum(main[:-index]) - sum(main[:-index]):
    x = (x + 0.5)
  index = 45
  if main[index] + opposite[index] < main[index] - main[index] + sum(opposite[-index:]):
    x = (x - 1.0)
  index = 37
  if opposite[index] > sum(opposite[-index:]) + sum(main[-index:]):
    x = (x - 0.4)
  index = 25
  if opposite[index] - main[index] > opposite[index] - opposite[index] + sum(main[-index:]) - opposite[index]:
    x = (x + 0.01)
  index = 8
  if main[index] < 1:
    if main[index] < main[index] + 0.5:
      x = (x - 0.01)
  else:
    if main[index] < opposite[index] + 7:
      x = (x - 0.00001)
    else:
      x = (x + 0.000001)
  index = 47
  if main[index] < 1:
    if main[index] < opposite[index] + 0.000001:
      x = (x - 0.7)
  else:
    if main[index] < main[index] + 8:
      x = (x + 0.9)
    else:
      x = (x + 0.00001)
  index = 39
  if sum(opposite[:-index]) > opposite[index]:
    x = (x - 0.01)
  index = 50
  if main[index] < 1:
    if opposite[index] > main[index] + 0.01:
      x = (x - 0.3)
  else:
    if main[index] < opposite[index] + 3:
      x = (x + 0.4)
    else:
      x = (x + 0.0000001)
  index = 24
  if main[index] < opposite[index]:
    x = (x - 0.01)
  index = 11
  if opposite[index] < opposite[index]:
    x = (x + 0.000001)
  index = 2
  if main[index] > opposite[index]:
    x = (x - 0.001)
  index = 33
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.7)
  index = 45
  if sum(main[-index:]) - sum(opposite[:-index]) < sum(main[:-index]) + opposite[index]:
    x = (x + 0.1)
  index = 15
  if opposite[index] < main[index]:
    x = (x - 0.4)
  index = 30
  if main[index] < 1:
    if main[index] > opposite[index] + 0.3:
      x = (x + 0.001)
  else:
    if main[index] > main[index] + 6:
      x = (x - 0.2)
    else:
      x = (x - 0.7)
  index = 32
  if opposite[index] < main[index]:
    x = (x + 0.00001)
  index = 9
  if main[index] < main[index]:
    x = (x - 0.9)
  index = 18
  if main[index] > opposite[index]:
    x = (x + 0.8)
  index = 27
  if opposite[index] > opposite[index]:
    x = (x + 0.1)
  index = 8
  if opposite[index] < opposite[index]:
    x = (x - 0.000001)
  index = 25
  if main[index] > opposite[index]:
    x = (x - 0.8)
  index = 6
  if main[index] < 1:
    if main[index] < opposite[index] + 1.0:
      x = (x - 0.0001)
  else:
    if main[index] > opposite[index] + 2:
      x = (x - 0.0001)
    else:
      x = (x - 0.3)
  index = 5
  if sum(main[-index:]) > sum(opposite[-index:]):
    x = (x - 1.0)
  index = 25
  if main[index] < 1:
    if opposite[index] > main[index] + 0.9:
      x = (x + 0.1)
  else:
    if main[index] > main[index] + 2:
      x = (x - 0.00001)
    else:
      x = (x - 0.6)
  index = 15
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x - 0.1)
  index = 8
  if sum(opposite[:-index]) < main[index]:
    x = (x + 0.5)
  index = 27
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.5:
      x = (x + 0.0000001)
  else:
    if main[index] < opposite[index] + 9:
      x = (x - 1.0)
    else:
      x = (x - 0.7)
  index = 15
  if main[index] < 1:
    if main[index] > main[index] + 0.4:
      x = (x - 0.4)
  else:
    if main[index] < opposite[index] + 6:
      x = (x + 0.2)
    else:
      x = (x - 0.3)
  index = 0
  if opposite[index] > opposite[index]:
    x = (x + 0.8)
  index = 43
  if main[index] > main[index]:
    x = (x + 0.0000001)
  index = 15
  if opposite[index] > sum(opposite[:-index]):
    x = (x + 0.0001)
  index = 28
  if main[index] < opposite[index]:
    x = (x - 0.3)
  index = 41
  if main[index] > main[index]:
    x = (x + 0.2)
  index = 42
  if main[index] + main[index] > main[index] - main[index]:
    x = (x - 0.00001)
  index = 15
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.4)
  index = 6
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.1)
  index = 12
  if opposite[index] > main[index]:
    x = (x - 0.000001)
  index = 31
  if opposite[index] > main[index]:
    x = (x + 0.01)
  index = 14
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.001:
      x = (x + 1.0)
  else:
    if main[index] > opposite[index] + 1:
      x = (x - 0.000001)
    else:
      x = (x + 1.0)
  index = 25
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.0001)
  index = 27
  if opposite[index] > main[index]:
    x = (x + 0.7)
  index = 23
  if opposite[index] > main[index]:
    x = (x - 0.1)
  index = 17
  if main[index] > opposite[index]:
    x = (x - 1.0)
  index = 20
  if opposite[index] > main[index]:
    x = (x - 0.0001)
  index = 32
  if opposite[index] > opposite[index]:
    x = (x - 0.4)
  index = 16
  if main[index] > main[index]:
    x = (x - 0.001)
  index = 40
  if sum(main[:-index]) > sum(main[-index:]):
    x = (x - 0.0001)
  index = 35
  if opposite[index] < opposite[index]:
    x = (x - 0.0000001)
  index = 42
  if main[index] < main[index]:
    x = (x - 0.01)
  index = 34
  if main[index] > opposite[index]:
    x = (x + 0.9)
  index = 39
  if main[index] < 1:
    if main[index] > main[index] + 0.7:
      x = (x - 0.0000001)
  else:
    if opposite[index] > opposite[index] + 5:
      x = (x - 0.7)
    else:
      x = (x - 0.6)
  index = 16
  if main[index] - sum(main[-index:]) > sum(opposite[-index:]):
    x = (x + 0.7)
  index = 28
  if main[index] < 1:
    if opposite[index] > main[index] + 0.7:
      x = (x - 0.00001)
  else:
    if opposite[index] > opposite[index] + 1:
      x = (x + 0.01)
    else:
      x = (x - 0.00001)
  index = 13
  if main[index] < 1:
    if opposite[index] > main[index] + 0.1:
      x = (x + 0.7)
  else:
    if main[index] > main[index] + 9:
      x = (x + 0.000001)
    else:
      x = (x + 1.0)
  index = 44
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x - 1.0)
  index = 6
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.7:
      x = (x + 0.1)
  else:
    if opposite[index] > main[index] + 4:
      x = (x - 1.0)
    else:
      x = (x - 0.000001)
  index = 15
  if main[index] + main[index] < opposite[index]:
    x = (x - 0.01)
  index = 13
  if opposite[index] > sum(main[:-index]):
    x = (x + 0.2)
  index = 8
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.4:
      x = (x - 0.0000001)
  else:
    if main[index] < opposite[index] + 8:
      x = (x - 0.00001)
    else:
      x = (x - 0.6)
  index = 3
  if main[index] < 1:
    if main[index] < opposite[index] + 0.1:
      x = (x + 0.6)
  else:
    if opposite[index] < opposite[index] + 7:
      x = (x + 1.0)
    else:
      x = (x + 0.3)
  index = 31
  if main[index] > opposite[index]:
    x = (x - 0.8)
  index = 4
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.00001)
  index = 29
  if main[index] > opposite[index] - opposite[index]:
    x = (x - 0.9)
  index = 30
  if main[index] < 1:
    if main[index] < opposite[index] + 0.00001:
      x = (x - 0.1)
  else:
    if opposite[index] < main[index] + 1:
      x = (x - 0.001)
    else:
      x = (x - 0.9)
  index = 34
  if main[index] > main[index]:
    x = (x + 1.0)
  index = 20
  if opposite[index] < sum(main[:-index]):
    x = (x - 0.00001)
  index = 27
  if main[index] < 1:
    if main[index] > main[index] + 0.4:
      x = (x + 0.5)
  else:
    if main[index] < main[index] + 2:
      x = (x - 0.6)
    else:
      x = (x + 0.9)
  index = 5
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 1000:
    x = (x + 0.6)
  index = 1
  if main[index] + opposite[index] > sum(opposite[-index:]):
    x = (x + 0.2)
  index = 13
  if main[index] < 1:
    if opposite[index] > main[index] + 0.9:
      x = (x - 0.7)
  else:
    if main[index] < main[index] + 5:
      x = (x + 0.000001)
    else:
      x = (x - 0.5)
  index = 35
  if opposite[index] < main[index]:
    x = (x - 0.0001)
  index = 45
  if opposite[index] < main[index]:
    x = (x + 0.01)
  index = 3
  if main[index] > opposite[index]:
    x = (x - 0.2)
  index = 22
  if opposite[index] > opposite[index]:
    x = (x + 0.0001)
  index = 40
  if main[index] < 1:
    if main[index] > opposite[index] + 0.5:
      x = (x + 0.8)
  else:
    if main[index] > main[index] + 3:
      x = (x - 0.5)
    else:
      x = (x + 0.2)
  index = 16
  if opposite[index] > main[index]:
    x = (x + 0.5)
  index = 32
  if opposite[index] < main[index]:
    x = (x - 0.4)
  index = 36
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.9)
  index = 6
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 100:
    x = (x - 0.001)
  index = 38
  if opposite[index] < main[index]:
    x = (x + 0.01)
  index = 37
  if opposite[index] > opposite[index]:
    x = (x - 0.0000001)
  index = 23
  if opposite[index] < main[index]:
    x = (x + 0.8)
  index = 4
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.6:
      x = (x + 0.0001)
  else:
    if main[index] < opposite[index] + 1:
      x = (x - 0.2)
    else:
      x = (x + 1.0)
  index = 30
  if opposite[index] > opposite[index]:
    x = (x + 0.8)
  index = 40
  if opposite[index] > opposite[index]:
    x = (x + 0.6)
  index = 26
  if opposite[index] - opposite[index] > opposite[index] + main[index]:
    x = (x - 0.3)
  index = 19
  if sum(opposite[-index:]) < opposite[index]:
    x = (x + 0.6)
  index = 26
  if opposite[index] > opposite[index]:
    x = (x + 0.5)
  index = 14
  if opposite[index] > opposite[index]:
    x = (x + 0.2)
  index = 17
  if opposite[index] < main[index]:
    x = (x - 0.7)
  index = 14
  if opposite[index] - sum(main[:-index]) > opposite[index] - main[index] - opposite[index] + opposite[index]:
    x = (x - 0.00001)
  index = 4
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.0001)
  index = 38
  if sum(main[-index:]) > main[index] - main[index]:
    x = (x + 0.9)
  index = 14
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.6)
  index = 47
  if main[index] < 1:
    if main[index] < opposite[index] + 0.7:
      x = (x + 0.0001)
  else:
    if main[index] > main[index] + 4:
      x = (x + 0.001)
    else:
      x = (x + 0.6)
  index = 9
  if main[index] < opposite[index]:
    x = (x - 0.3)
  index = 45
  if main[index] < 1:
    if main[index] < main[index] + 0.001:
      x = (x - 0.4)
  else:
    if main[index] < main[index] + 7:
      x = (x + 0.1)
    else:
      x = (x - 0.01)
  index = 8
  if main[index] < 1:
    if main[index] > opposite[index] + 0.001:
      x = (x - 0.01)
  else:
    if opposite[index] > main[index] + 7:
      x = (x + 0.8)
    else:
      x = (x + 0.01)
  index = 18
  if main[index] < 1:
    if opposite[index] > main[index] + 0.0001:
      x = (x - 0.8)
  else:
    if opposite[index] > main[index] + 1:
      x = (x - 0.8)
    else:
      x = (x + 0.8)
  index = 24
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.000001)
  index = 6
  if main[index] < 1:
    if opposite[index] < main[index] + 0.4:
      x = (x + 0.1)
  else:
    if main[index] < main[index] + 4:
      x = (x + 0.7)
    else:
      x = (x + 0.9)
  index = 39
  if opposite[index] < opposite[index]:
    x = (x - 0.0001)
  index = 33
  if opposite[index] > main[index]:
    x = (x - 0.0001)
  index = 27
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 500:
    x = (x - 0.1)
  index = 45
  if sum(main[-index:]) > sum(opposite[-index:]):
    x = (x - 0.01)
  index = 46
  if main[index] < opposite[index]:
    x = (x + 0.7)
  index = 10
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.7)
  index = 10
  if main[index] < opposite[index]:
    x = (x + 0.3)
  index = 35
  if opposite[index] > main[index]:
    x = (x - 0.3)
  index = 9
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 1.0)
  index = 46
  if main[index] < 1:
    if opposite[index] < main[index] + 0.2:
      x = (x - 0.01)
  else:
    if main[index] < opposite[index] + 6:
      x = (x + 0.3)
    else:
      x = (x + 0.8)
  index = 12
  if main[index] < main[index]:
    x = (x + 0.6)
  index = 38
  if opposite[index] > main[index]:
    x = (x + 0.7)
  index = 44
  if opposite[index] < opposite[index]:
    x = (x + 1.0)
  index = 49
  if main[index] + main[index] > opposite[index] - main[index]:
    x = (x + 0.6)
  index = 1
  if opposite[index] - sum(opposite[:-index]) > opposite[index] - sum(main[-index:]):
    x = (x - 1.0)
  index = 23
  if opposite[index] + opposite[index] - opposite[index] - opposite[index] - opposite[index] < opposite[index] + opposite[index]:
    x = (x - 0.3)
  index = 35
  if opposite[index] < sum(main[:-index]):
    x = (x + 0.5)
  index = 39
  if main[index] < 1:
    if opposite[index] > main[index] + 1.0:
      x = (x - 0.000001)
  else:
    if main[index] < main[index] + 7:
      x = (x + 0.4)
    else:
      x = (x - 0.1)
  index = 49
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.1)
  index = 26
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x - 0.00001)
  index = 25
  if main[index] < 1:
    if opposite[index] < main[index] + 0.2:
      x = (x - 0.3)
  else:
    if opposite[index] > opposite[index] + 5:
      x = (x + 1.0)
    else:
      x = (x - 0.1)
  index = 13
  if main[index] < 1:
    if main[index] > main[index] + 0.3:
      x = (x - 0.0001)
  else:
    if main[index] < opposite[index] + 4:
      x = (x - 0.6)
    else:
      x = (x + 0.000001)
  index = 47
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 1000:
    x = (x + 0.1)
  index = 36
  if main[index] > opposite[index]:
    x = (x - 0.000001)
  index = 19
  if sum(opposite[-index:]) > sum(main[-index:]):
    x = (x + 0.5)
  index = 37
  if main[index] > main[index]:
    x = (x + 0.6)
  index = 43
  if main[index] > main[index]:
    x = (x - 0.2)
  index = 27
  if opposite[index] < opposite[index]:
    x = (x - 0.00001)
  index = 45
  if main[index] < 1:
    if main[index] < opposite[index] + 0.01:
      x = (x + 0.01)
  else:
    if opposite[index] > main[index] + 1:
      x = (x + 0.8)
    else:
      x = (x + 0.3)
  index = 49
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 1.0)
  index = 21
  if main[index] > opposite[index]:
    x = (x - 0.01)
  index = 35
  if main[index] > main[index]:
    x = (x - 0.6)
  index = 50
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 1.0)
  index = 1
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.01)
  index = 29
  if main[index] < 1:
    if main[index] > opposite[index] + 0.3:
      x = (x + 0.9)
  else:
    if opposite[index] < main[index] + 4:
      x = (x + 0.001)
    else:
      x = (x - 0.4)
  index = 14
  if main[index] > opposite[index]:
    x = (x - 0.4)
  index = 37
  if main[index] > opposite[index]:
    x = (x - 0.9)
  index = 10
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.2:
      x = (x - 0.000001)
  else:
    if main[index] > opposite[index] + 8:
      x = (x - 0.001)
    else:
      x = (x - 0.001)
  index = 41
  if main[index] < main[index]:
    x = (x + 0.9)
  index = 39
  if opposite[index] < opposite[index]:
    x = (x - 0.0001)
  index = 25
  if sum(opposite[:-index]) - sum(opposite[:-index]) < opposite[index] + opposite[index]:
    x = (x + 0.9)
  index = 35
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x - 0.5)
  index = 28
  if main[index] + sum(main[-index:]) > sum(opposite[:-index]):
    x = (x - 0.01)
  index = 40
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.3:
      x = (x + 0.7)
  else:
    if main[index] < main[index] + 3:
      x = (x - 0.1)
    else:
      x = (x - 0.01)
  index = 27
  if main[index] < 1:
    if opposite[index] > main[index] + 0.01:
      x = (x + 0.4)
  else:
    if main[index] > opposite[index] + 4:
      x = (x - 0.1)
    else:
      x = (x + 0.4)
  index = 19
  if main[index] < 1:
    if main[index] > opposite[index] + 0.000001:
      x = (x - 0.0001)
  else:
    if opposite[index] > main[index] + 7:
      x = (x + 0.6)
    else:
      x = (x - 0.01)
  index = 1
  if sum(main[:-index]) < opposite[index]:
    x = (x + 0.001)
  index = 24
  if main[index] < main[index]:
    x = (x + 0.6)
  index = 9
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x - 0.4)
  index = 3
  if main[index] < 1:
    if main[index] < main[index] + 0.8:
      x = (x + 0.9)
  else:
    if main[index] < main[index] + 0:
      x = (x - 0.6)
    else:
      x = (x - 0.0001)
  index = 33
  if main[index] > main[index]:
    x = (x + 0.2)
  index = 47
  if opposite[index] > main[index]:
    x = (x - 0.3)
  index = 39
  if main[index] > main[index]:
    x = (x + 0.6)
  index = 7
  if main[index] < 1:
    if opposite[index] > main[index] + 0.001:
      x = (x + 1.0)
  else:
    if main[index] < opposite[index] + 2:
      x = (x - 0.5)
    else:
      x = (x + 0.01)
  index = 32
  if main[index] - main[index] < sum(main[:-index]):
    x = (x - 0.8)
  index = 41
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x - 0.0000001)
  index = 24
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x + 0.3)
  index = 26
  if main[index] < 1:
    if main[index] < opposite[index] + 0.5:
      x = (x - 0.1)
  else:
    if opposite[index] > main[index] + 8:
      x = (x + 0.2)
    else:
      x = (x + 1.0)
  index = 17
  if main[index] < 1:
    if opposite[index] > main[index] + 0.00001:
      x = (x + 0.5)
  else:
    if opposite[index] > main[index] + 7:
      x = (x + 0.2)
    else:
      x = (x + 1.0)
  index = 28
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.3)
  index = 24
  if main[index] < 1:
    if opposite[index] > main[index] + 0.000001:
      x = (x - 1.0)
  else:
    if opposite[index] > opposite[index] + 2:
      x = (x - 0.0000001)
    else:
      x = (x - 0.8)
  index = 21
  if main[index] > opposite[index]:
    x = (x + 0.01)
  index = 7
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.7:
      x = (x + 0.5)
  else:
    if main[index] < main[index] + 4:
      x = (x - 0.4)
    else:
      x = (x - 0.0001)
  index = 41
  if opposite[index] < opposite[index]:
    x = (x + 0.7)
  index = 14
  if opposite[index] < opposite[index]:
    x = (x + 0.01)
  index = 34
  if main[index] < main[index]:
    x = (x + 0.001)
  index = 13
  if main[index] < 1:
    if opposite[index] < main[index] + 0.001:
      x = (x - 0.5)
  else:
    if main[index] > main[index] + 8:
      x = (x - 0.6)
    else:
      x = (x - 0.000001)
  index = 21
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.6)
  index = 23
  if opposite[index] > opposite[index]:
    x = (x - 0.8)
  index = 24
  if main[index] > main[index]:
    x = (x + 1.0)
  index = 0
  if sum(opposite[-index:]) < sum(opposite[:-index]):
    x = (x - 0.00001)
  index = 29
  if opposite[index] < main[index]:
    x = (x - 0.9)
  index = 6
  if main[index] < main[index]:
    x = (x - 0.000001)
  index = 29
  if main[index] < sum(main[:-index]):
    x = (x + 0.4)
  index = 3
  if main[index] > opposite[index]:
    x = (x - 0.7)
  index = 3
  if opposite[index] < main[index]:
    x = (x - 0.0000001)
  index = 36
  if opposite[index] < opposite[index]:
    x = (x - 0.5)
  index = 0
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 50:
    x = (x - 0.1)
  index = 9
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 1000:
    x = (x + 0.6)
  index = 40
  if opposite[index] < sum(opposite[:-index]):
    x = (x + 0.8)
  index = 11
  if opposite[index] < sum(opposite[-index:]):
    x = (x + 0.00001)
  index = 47
  if main[index] < opposite[index]:
    x = (x + 0.5)
  index = 43
  if sum(opposite[:-index]) < main[index]:
    x = (x - 0.6)
  index = 6
  if opposite[index] < opposite[index]:
    x = (x - 0.001)
  index = 35
  if main[index] < opposite[index]:
    x = (x + 0.001)
  index = 32
  if main[index] > opposite[index]:
    x = (x + 0.8)
  index = 37
  if main[index] - opposite[index] > opposite[index] + opposite[index]:
    x = (x - 0.00001)
  index = 38
  if main[index] > opposite[index]:
    x = (x + 0.2)
  index = 42
  if main[index] > main[index]:
    x = (x - 0.001)
  index = 46
  if main[index] < opposite[index]:
    x = (x + 0.1)
  index = 19
  if main[index] < opposite[index]:
    x = (x + 0.1)
  index = 6
  if sum(main[:-index]) > sum(main[:-index]):
    x = (x + 0.9)
  index = 41
  if main[index] < 1:
    if main[index] < opposite[index] + 0.0001:
      x = (x - 0.4)
  else:
    if opposite[index] < main[index] + 9:
      x = (x + 0.2)
    else:
      x = (x + 0.001)
  index = 34
  if sum(opposite[:-index]) - main[index] - sum(opposite[-index:]) < main[index]:
    x = (x + 0.0000001)
  index = 46
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 500:
    x = (x + 0.5)
  index = 12
  if main[index] - opposite[index] + sum(main[:-index]) > opposite[index] + main[index] + main[index]:
    x = (x - 1.0)
  index = 43
  if sum(main[-index:]) > sum(main[:-index]) - main[index] - main[index]:
    x = (x - 0.6)
  index = 21
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 5000:
    x = (x - 0.000001)
  index = 26
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x - 0.001)
  index = 45
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 5000:
    x = (x - 0.4)
  index = 49
  if main[index] < main[index]:
    x = (x + 1.0)
  index = 34
  if main[index] < 1:
    if opposite[index] > main[index] + 0.01:
      x = (x - 0.001)
  else:
    if main[index] < opposite[index] + 1:
      x = (x + 0.9)
    else:
      x = (x + 0.001)
  index = 40
  if sum(main[-index:]) > opposite[index]:
    x = (x + 1.0)
  index = 34
  if main[index] < opposite[index]:
    x = (x + 0.2)
  index = 26
  if opposite[index] > main[index]:
    x = (x - 0.0001)
  index = 37
  if opposite[index] < opposite[index]:
    x = (x - 0.2)
  index = 11
  if main[index] < 1:
    if main[index] > main[index] + 0.9:
      x = (x + 0.0000001)
  else:
    if opposite[index] > opposite[index] + 3:
      x = (x + 0.001)
    else:
      x = (x + 0.4)
  index = 25
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.3:
      x = (x + 1.0)
  else:
    if main[index] > main[index] + 9:
      x = (x - 0.8)
    else:
      x = (x - 0.6)
  index = 5
  if opposite[index] < sum(main[-index:]):
    x = (x + 0.000001)
  index = 13
  if main[index] < 1:
    if opposite[index] > opposite[index] + 1.0:
      x = (x + 0.6)
  else:
    if opposite[index] < main[index] + 6:
      x = (x - 0.1)
    else:
      x = (x - 0.7)
  index = 29
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.00001:
      x = (x + 0.1)
  else:
    if opposite[index] < main[index] + 9:
      x = (x + 0.1)
    else:
      x = (x + 0.4)
  index = 18
  if main[index] < 1:
    if opposite[index] > main[index] + 0.001:
      x = (x - 0.1)
  else:
    if opposite[index] < opposite[index] + 3:
      x = (x - 0.00001)
    else:
      x = (x + 0.1)
  index = 17
  if main[index] < 1:
    if main[index] < main[index] + 0.01:
      x = (x - 0.3)
  else:
    if opposite[index] > opposite[index] + 4:
      x = (x + 0.2)
    else:
      x = (x + 0.000001)
  index = 19
  if main[index] - opposite[index] > main[index] - opposite[index]:
    x = (x - 0.3)
  index = 0
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.0000001:
      x = (x + 0.4)
  else:
    if opposite[index] > main[index] + 3:
      x = (x + 0.5)
    else:
      x = (x + 0.001)
  index = 39
  if opposite[index] < main[index]:
    x = (x + 0.4)
  index = 16
  if main[index] > opposite[index]:
    x = (x - 0.00001)
  index = 28
  if main[index] < 1:
    if main[index] < opposite[index] + 0.000001:
      x = (x - 0.001)
  else:
    if opposite[index] > opposite[index] + 0:
      x = (x + 0.01)
    else:
      x = (x + 0.9)
  index = 28
  if main[index] < 1:
    if opposite[index] < main[index] + 1.0:
      x = (x + 0.00001)
  else:
    if main[index] < opposite[index] + 2:
      x = (x - 0.7)
    else:
      x = (x + 1.0)
  index = 24
  if main[index] < 1:
    if main[index] < opposite[index] + 0.00001:
      x = (x - 0.001)
  else:
    if opposite[index] < opposite[index] + 7:
      x = (x - 0.7)
    else:
      x = (x - 0.000001)
  index = 42
  if opposite[index] < sum(main[-index:]):
    x = (x - 0.2)
  index = 19
  if sum(main[-index:]) < sum(main[:-index]):
    x = (x - 0.1)
  index = 24
  if main[index] < 1:
    if opposite[index] < main[index] + 1.0:
      x = (x - 0.000001)
  else:
    if main[index] < main[index] + 1:
      x = (x - 0.9)
    else:
      x = (x + 0.0000001)
  index = 5
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x - 0.2)
  index = 2
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.8)
  index = 5
  if main[index] > opposite[index]:
    x = (x - 0.0001)
  index = 6
  if opposite[index] > main[index]:
    x = (x - 0.000001)
  index = 30
  if main[index] < 1:
    if main[index] < main[index] + 0.3:
      x = (x - 0.01)
  else:
    if main[index] < opposite[index] + 5:
      x = (x - 0.7)
    else:
      x = (x + 0.001)
  index = 8
  if opposite[index] < main[index]:
    x = (x - 0.1)
  index = 5
  if main[index] < main[index]:
    x = (x - 0.5)
  index = 40
  if opposite[index] < main[index]:
    x = (x - 0.3)
  index = 23
  if main[index] < 1:
    if opposite[index] > main[index] + 0.0001:
      x = (x - 0.001)
  else:
    if opposite[index] < opposite[index] + 1:
      x = (x + 0.0001)
    else:
      x = (x + 0.1)
  index = 8
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.1)
  index = 29
  if main[index] > opposite[index]:
    x = (x + 0.001)
  index = 23
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 1.0)
  index = 49
  if sum(main[-index:]) < main[index]:
    x = (x - 0.0001)
  index = 11
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x - 0.2)
  index = 15
  if main[index] > opposite[index]:
    x = (x + 0.3)
  index = 46
  if main[index] > opposite[index]:
    x = (x + 0.0000001)
  index = 22
  if opposite[index] > main[index]:
    x = (x - 0.00001)
  index = 44
  if opposite[index] > opposite[index]:
    x = (x + 0.001)
  index = 44
  if opposite[index] > main[index]:
    x = (x - 1.0)
  index = 1
  if opposite[index] > opposite[index]:
    x = (x - 0.7)
  index = 12
  if opposite[index] > opposite[index]:
    x = (x - 0.6)
  index = 24
  if opposite[index] < sum(opposite[:-index]):
    x = (x - 0.6)
  index = 36
  if opposite[index] + main[index] + opposite[index] - main[index] - sum(opposite[-index:]) - main[index] + sum(main[:-index]) + sum(main[:-index]) + sum(opposite[:-index]) > main[index] + main[index]:
    x = (x + 0.01)
  index = 15
  if sum(opposite[-index:]) - opposite[index] + opposite[index] - opposite[index] - sum(opposite[-index:]) > main[index] - opposite[index] + opposite[index] - main[index] - sum(main[:-index]):
    x = (x + 0.000001)
  index = 13
  if main[index] > sum(main[:-index]) - sum(main[-index:]) + sum(main[-index:]) - main[index] - opposite[index] - sum(opposite[-index:]) + main[index] - opposite[index]:
    x = (x + 0.00001)
  index = 40
  if opposite[index] < main[index]:
    x = (x - 0.01)
  index = 29
  if main[index] < sum(opposite[-index:]) + main[index] + sum(opposite[-index:]):
    x = (x - 0.8)
  index = 14
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 500:
    x = (x + 0.000001)
  index = 30
  if main[index] < 1:
    if opposite[index] < main[index] + 0.3:
      x = (x - 0.8)
  else:
    if opposite[index] > main[index] + 8:
      x = (x + 0.01)
    else:
      x = (x - 0.5)
  index = 49
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.1)
  index = 3
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x + 0.00001)
  index = 22
  if opposite[index] > main[index]:
    x = (x + 0.00001)
  index = 24
  if opposite[index] > opposite[index]:
    x = (x - 0.9)
  index = 42
  if main[index] < opposite[index]:
    x = (x + 0.001)
  index = 48
  if main[index] < main[index]:
    x = (x - 0.001)
  index = 10
  if opposite[index] < opposite[index]:
    x = (x + 0.1)
  index = 7
  if main[index] < 1:
    if opposite[index] < main[index] + 0.00001:
      x = (x - 0.1)
  else:
    if main[index] > opposite[index] + 8:
      x = (x - 0.3)
    else:
      x = (x - 1.0)
  index = 3
  if opposite[index] > opposite[index]:
    x = (x + 0.3)
  index = 47
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.01)
  index = 11
  if opposite[index] > sum(main[:-index]):
    x = (x - 0.5)
  index = 9
  if sum(main[:-index]) < main[index] - main[index]:
    x = (x + 1.0)
  index = 14
  if opposite[index] > main[index]:
    x = (x - 0.000001)
  index = 18
  if opposite[index] - main[index] < opposite[index] - main[index]:
    x = (x - 0.00001)
  index = 12
  if main[index] < 1:
    if opposite[index] > main[index] + 0.00001:
      x = (x + 0.0000001)
  else:
    if main[index] > main[index] + 9:
      x = (x + 0.000001)
    else:
      x = (x + 0.7)
  index = 35
  if opposite[index] < opposite[index]:
    x = (x + 0.8)
  index = 46
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 50:
    x = (x + 0.6)
  index = 11
  if opposite[index] > opposite[index]:
    x = (x + 0.4)
  index = 45
  if opposite[index] < main[index]:
    x = (x + 0.001)
  index = 31
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.7)
  index = 50
  if main[index] > sum(opposite[-index:]):
    x = (x - 0.1)
  index = 3
  if main[index] > main[index]:
    x = (x - 0.9)
  index = 22
  if opposite[index] > main[index]:
    x = (x - 0.5)
  index = 8
  if sum(opposite[:-index]) < opposite[index] - sum(main[:-index]):
    x = (x + 0.5)
  index = 32
  if main[index] > main[index] + opposite[index] + opposite[index]:
    x = (x + 0.0000001)
  index = 4
  if sum(opposite[-index:]) - sum(main[:-index]) > opposite[index] + sum(opposite[:-index]):
    x = (x + 0.01)
  index = 1
  if main[index] < 1:
    if opposite[index] < opposite[index] + 1.0:
      x = (x - 0.2)
  else:
    if main[index] < main[index] + 5:
      x = (x + 0.001)
    else:
      x = (x + 0.001)
  index = 37
  if opposite[index] > main[index]:
    x = (x + 0.7)
  index = 1
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.001:
      x = (x - 1.0)
  else:
    if main[index] < main[index] + 6:
      x = (x - 0.1)
    else:
      x = (x + 0.000001)
  index = 3
  if main[index] > opposite[index]:
    x = (x + 0.1)
  index = 14
  if sum(main[:-index]) - sum(opposite[:-index]) < main[index]:
    x = (x + 0.00001)
  index = 46
  if main[index] + main[index] < main[index] - main[index]:
    x = (x - 0.3)
  index = 41
  if sum(main[:-index]) > sum(main[:-index]):
    x = (x + 0.5)
  index = 0
  if opposite[index] < main[index]:
    x = (x - 1.0)
  index = 20
  if opposite[index] < opposite[index]:
    x = (x + 0.3)
  index = 13
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.0001)
  index = 38
  if main[index] > opposite[index]:
    x = (x + 1.0)
  index = 14
  if main[index] < opposite[index]:
    x = (x + 0.8)
  index = 29
  if opposite[index] > opposite[index]:
    x = (x - 1.0)
  index = 26
  if sum(opposite[-index:]) > sum(main[:-index]):
    x = (x - 0.00001)
  index = 23
  if main[index] < 1:
    if main[index] < opposite[index] + 0.0000001:
      x = (x + 0.000001)
  else:
    if opposite[index] < opposite[index] + 8:
      x = (x + 1.0)
    else:
      x = (x - 0.01)
  index = 10
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 5000:
    x = (x + 0.8)
  index = 34
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.7)
  index = 35
  if opposite[index] + opposite[index] > sum(opposite[-index:]):
    x = (x - 0.1)
  index = 37
  if main[index] > sum(opposite[:-index]):
    x = (x - 0.000001)
  index = 10
  if main[index] < 1:
    if opposite[index] < main[index] + 1.0:
      x = (x + 1.0)
  else:
    if opposite[index] > main[index] + 0:
      x = (x - 0.0001)
    else:
      x = (x + 0.01)
  index = 44
  if sum(main[-index:]) > sum(opposite[:-index]):
    x = (x - 0.01)
  index = 50
  if opposite[index] > opposite[index]:
    x = (x - 0.2)
  index = 26
  if opposite[index] < opposite[index]:
    x = (x - 0.2)
  index = 9
  if main[index] < 1:
    if opposite[index] < main[index] + 0.7:
      x = (x + 0.6)
  else:
    if opposite[index] > main[index] + 4:
      x = (x - 0.4)
    else:
      x = (x + 0.9)
  index = 21
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.2:
      x = (x - 0.000001)
  else:
    if main[index] < main[index] + 5:
      x = (x + 0.01)
    else:
      x = (x - 0.000001)
  index = 40
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.00001)
  index = 28
  if opposite[index] > opposite[index]:
    x = (x - 0.01)
  index = 1
  if sum(opposite[:-index]) < opposite[index]:
    x = (x + 0.0000001)
  index = 16
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.1)
  index = 27
  if main[index] < 1:
    if main[index] > main[index] + 0.2:
      x = (x + 0.001)
  else:
    if opposite[index] > opposite[index] + 8:
      x = (x + 0.000001)
    else:
      x = (x + 0.000001)
  index = 19
  if main[index] < 1:
    if main[index] > opposite[index] + 0.9:
      x = (x + 0.1)
  else:
    if opposite[index] < main[index] + 1:
      x = (x - 0.1)
    else:
      x = (x + 0.000001)
  index = 45
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 50:
    x = (x + 0.0001)
  index = 29
  if main[index] < 1:
    if main[index] < main[index] + 0.8:
      x = (x - 0.7)
  else:
    if main[index] < opposite[index] + 7:
      x = (x - 0.1)
    else:
      x = (x + 0.6)
  index = 17
  if main[index] < 1:
    if opposite[index] < main[index] + 0.001:
      x = (x - 0.001)
  else:
    if opposite[index] < main[index] + 0:
      x = (x + 0.01)
    else:
      x = (x - 1.0)
  index = 43
  if main[index] > main[index]:
    x = (x + 0.9)
  index = 28
  if main[index] < 1:
    if main[index] > main[index] + 0.2:
      x = (x - 0.2)
  else:
    if opposite[index] > opposite[index] + 5:
      x = (x - 0.001)
    else:
      x = (x - 0.8)
  index = 41
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.2)
  index = 33
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.001:
      x = (x - 0.9)
  else:
    if main[index] < main[index] + 6:
      x = (x + 0.6)
    else:
      x = (x - 0.0001)
  index = 2
  if main[index] < main[index]:
    x = (x - 0.00001)
  index = 1
  if opposite[index] < sum(main[:-index]):
    x = (x + 0.8)
  index = 5
  if main[index] < opposite[index]:
    x = (x + 0.000001)
  index = 36
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.01)
  index = 49
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.4)
  index = 7
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.7)
  index = 50
  if main[index] < 1:
    if opposite[index] > main[index] + 0.0000001:
      x = (x + 0.9)
  else:
    if opposite[index] > opposite[index] + 8:
      x = (x - 0.001)
    else:
      x = (x - 0.001)
  index = 43
  if opposite[index] < main[index]:
    x = (x + 0.2)
  index = 33
  if sum(main[-index:]) + sum(opposite[:-index]) > sum(main[:-index]) + sum(main[:-index]):
    x = (x - 0.0000001)
  index = 3
  if opposite[index] > sum(opposite[:-index]):
    x = (x + 0.0000001)
  index = 28
  if main[index] < 1:
    if opposite[index] < opposite[index] + 1.0:
      x = (x - 0.00001)
  else:
    if opposite[index] > opposite[index] + 9:
      x = (x + 0.5)
    else:
      x = (x + 0.6)
  index = 9
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 1000:
    x = (x + 0.001)
  index = 7
  if opposite[index] < sum(main[:-index]) - main[index]:
    x = (x + 0.8)
  index = 4
  if main[index] - sum(main[-index:]) < main[index]:
    x = (x + 0.9)
  index = 17
  if main[index] - main[index] < opposite[index] - opposite[index]:
    x = (x + 0.5)
  index = 44
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.001:
      x = (x - 0.8)
  else:
    if opposite[index] < opposite[index] + 8:
      x = (x + 0.4)
    else:
      x = (x - 0.000001)
  index = 4
  if main[index] < main[index]:
    x = (x - 0.8)
  index = 11
  if main[index] > main[index]:
    x = (x - 0.000001)
  index = 40
  if main[index] < opposite[index]:
    x = (x - 0.3)
  index = 21
  if main[index] < opposite[index]:
    x = (x + 0.2)
  index = 39
  if main[index] < 1:
    if opposite[index] > main[index] + 0.1:
      x = (x - 0.001)
  else:
    if opposite[index] > opposite[index] + 1:
      x = (x + 0.001)
    else:
      x = (x - 0.2)
  index = 34
  if main[index] < 1:
    if main[index] < main[index] + 0.01:
      x = (x + 0.0001)
  else:
    if main[index] < opposite[index] + 0:
      x = (x + 0.000001)
    else:
      x = (x - 1.0)
  index = 26
  if main[index] > main[index]:
    x = (x - 0.9)
  index = 4
  if main[index] < sum(main[:-index]):
    x = (x + 1.0)
  index = 37
  if main[index] > main[index]:
    x = (x + 0.0001)
  index = 44
  if main[index] > opposite[index]:
    x = (x + 1.0)
  index = 6
  if opposite[index] > opposite[index]:
    x = (x + 0.6)
  index = 43
  if main[index] > sum(main[-index:]):
    x = (x + 0.001)
  index = 19
  if sum(opposite[-index:]) > sum(opposite[:-index]) + sum(opposite[-index:]) + main[index]:
    x = (x + 0.5)
  index = 50
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.2)
  index = 20
  if main[index] + sum(main[-index:]) + main[index] - sum(main[-index:]) + main[index] > opposite[index] + sum(main[-index:]) - main[index] - opposite[index] + main[index]:
    x = (x - 0.7)
  index = 47
  if sum(opposite[:-index]) + opposite[index] < main[index] - opposite[index] - sum(opposite[-index:]):
    x = (x - 0.01)
  index = 26
  if sum(opposite[:-index]) + main[index] + main[index] - main[index] + opposite[index] > opposite[index] - sum(main[-index:]) - opposite[index] - opposite[index]:
    x = (x - 0.3)
  index = 41
  if sum(opposite[:-index]) < sum(main[:-index]):
    x = (x - 0.0000001)
  index = 49
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.1)
  index = 48
  if main[index] < 1:
    if opposite[index] < main[index] + 0.5:
      x = (x - 0.01)
  else:
    if opposite[index] < opposite[index] + 2:
      x = (x - 0.7)
    else:
      x = (x - 0.2)
  index = 39
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.000001:
      x = (x + 0.8)
  else:
    if main[index] < main[index] + 1:
      x = (x + 0.2)
    else:
      x = (x + 0.4)
  index = 37
  if opposite[index] > sum(opposite[:-index]):
    x = (x - 0.000001)
  index = 48
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.8:
      x = (x - 0.2)
  else:
    if opposite[index] > opposite[index] + 7:
      x = (x - 1.0)
    else:
      x = (x - 0.5)
  index = 18
  if sum(opposite[:-index]) < opposite[index]:
    x = (x + 1.0)
  index = 41
  if opposite[index] < main[index]:
    x = (x + 0.8)
  index = 35
  if opposite[index] < main[index]:
    x = (x + 0.0001)
  index = 15
  if main[index] < opposite[index]:
    x = (x - 0.0000001)
  index = 16
  if sum(main[:-index]) < main[index]:
    x = (x - 0.0001)
  index = 26
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.2)
  index = 40
  if opposite[index] < main[index]:
    x = (x + 0.8)
  index = 17
  if opposite[index] < main[index]:
    x = (x - 0.0001)
  index = 45
  if main[index] < 1:
    if opposite[index] < main[index] + 0.7:
      x = (x + 0.0000001)
  else:
    if main[index] > main[index] + 0:
      x = (x + 0.000001)
    else:
      x = (x - 0.0001)
  index = 32
  if opposite[index] > opposite[index]:
    x = (x - 0.6)
  index = 46
  if main[index] < opposite[index]:
    x = (x - 0.4)
  index = 36
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.5)
  index = 17
  if opposite[index] > opposite[index]:
    x = (x - 0.6)
  index = 27
  if opposite[index] + main[index] > main[index] + opposite[index]:
    x = (x - 0.5)
  index = 21
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.01:
      x = (x - 0.7)
  else:
    if main[index] < opposite[index] + 8:
      x = (x + 0.7)
    else:
      x = (x + 0.7)
  index = 31
  if opposite[index] < opposite[index]:
    x = (x - 0.1)
  index = 10
  if main[index] < opposite[index]:
    x = (x + 0.5)
  index = 43
  if main[index] > main[index]:
    x = (x + 0.01)
  index = 1
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.01)
  index = 23
  if main[index] < opposite[index]:
    x = (x + 0.5)
  index = 37
  if main[index] < main[index]:
    x = (x + 0.4)
  index = 41
  if main[index] > opposite[index]:
    x = (x + 0.01)
  index = 13
  if main[index] < 1:
    if main[index] > main[index] + 0.5:
      x = (x - 0.001)
  else:
    if main[index] < main[index] + 5:
      x = (x - 0.0001)
    else:
      x = (x + 0.5)
  index = 48
  if opposite[index] < opposite[index]:
    x = (x - 0.6)
  index = 33
  if opposite[index] < main[index]:
    x = (x + 1.0)
  index = 31
  if opposite[index] < opposite[index]:
    x = (x - 0.7)
  index = 10
  if sum(opposite[-index:]) > main[index]:
    x = (x + 0.000001)
  index = 31
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 100:
    x = (x + 0.00001)
  index = 30
  if sum(main[-index:]) > main[index]:
    x = (x + 0.6)
  index = 18
  if main[index] < 1:
    if main[index] > opposite[index] + 0.9:
      x = (x + 0.000001)
  else:
    if main[index] > main[index] + 2:
      x = (x + 0.4)
    else:
      x = (x - 0.01)
  index = 44
  if main[index] < 1:
    if main[index] > opposite[index] + 0.6:
      x = (x - 0.9)
  else:
    if main[index] > opposite[index] + 4:
      x = (x + 0.5)
    else:
      x = (x - 1.0)
  index = 2
  if main[index] < opposite[index]:
    x = (x - 0.9)
  index = 33
  if main[index] < 1:
    if main[index] < opposite[index] + 0.000001:
      x = (x - 0.3)
  else:
    if opposite[index] > main[index] + 5:
      x = (x - 0.4)
    else:
      x = (x - 0.3)
  index = 21
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 500:
    x = (x - 0.5)
  index = 1
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 1.0)
  index = 18
  if main[index] > main[index]:
    x = (x - 0.00001)
  index = 46
  if opposite[index] < main[index]:
    x = (x + 0.0001)
  index = 32
  if main[index] > opposite[index]:
    x = (x - 0.000001)
  index = 26
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.6)
  index = 19
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.001)
  index = 31
  if sum(main[:-index]) < opposite[index] - main[index]:
    x = (x + 0.7)
  index = 31
  if main[index] < 1:
    if main[index] > main[index] + 0.1:
      x = (x - 0.3)
  else:
    if opposite[index] > main[index] + 1:
      x = (x + 0.3)
    else:
      x = (x + 0.3)
  index = 4
  if main[index] > opposite[index]:
    x = (x + 0.0000001)
  index = 38
  if main[index] < 1:
    if opposite[index] < main[index] + 0.9:
      x = (x + 0.3)
  else:
    if opposite[index] > main[index] + 6:
      x = (x - 1.0)
    else:
      x = (x + 0.5)
  index = 41
  if opposite[index] > main[index]:
    x = (x + 0.001)
  index = 18
  if opposite[index] < opposite[index]:
    x = (x + 0.000001)
  index = 34
  if main[index] < 1:
    if main[index] < main[index] + 0.3:
      x = (x + 0.000001)
  else:
    if main[index] < opposite[index] + 0:
      x = (x - 0.3)
    else:
      x = (x - 0.00001)
  index = 31
  if main[index] < opposite[index]:
    x = (x + 0.3)
  index = 22
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.9:
      x = (x + 0.1)
  else:
    if main[index] < main[index] + 0:
      x = (x + 0.3)
    else:
      x = (x + 0.01)
  index = 24
  if main[index] < 1:
    if main[index] < opposite[index] + 1.0:
      x = (x + 0.7)
  else:
    if main[index] > opposite[index] + 2:
      x = (x + 0.01)
    else:
      x = (x - 0.5)
  index = 7
  if sum(main[-index:]) > sum(opposite[-index:]):
    x = (x - 0.2)
  index = 47
  if main[index] > opposite[index]:
    x = (x + 0.3)
  index = 0
  if main[index] > main[index]:
    x = (x - 0.3)
  index = 16
  if opposite[index] > main[index]:
    x = (x + 0.01)
  index = 12
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 500:
    x = (x - 0.9)
  index = 1
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.1)
  index = 12
  if main[index] < opposite[index]:
    x = (x + 0.0000001)
  index = 50
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.01:
      x = (x + 0.3)
  else:
    if main[index] > opposite[index] + 4:
      x = (x - 1.0)
    else:
      x = (x - 0.6)
  index = 13
  if opposite[index] < opposite[index] + main[index]:
    x = (x + 0.4)
  index = 26
  if opposite[index] > main[index]:
    x = (x + 0.6)
  index = 39
  if opposite[index] > main[index]:
    x = (x - 0.6)
  index = 26
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.2)
  index = 31
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 500:
    x = (x + 0.0001)
  index = 30
  if sum(main[-index:]) < opposite[index]:
    x = (x - 0.0001)
  index = 16
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.01:
      x = (x + 0.7)
  else:
    if main[index] > opposite[index] + 6:
      x = (x + 0.9)
    else:
      x = (x + 0.00001)
  index = 8
  if opposite[index] > opposite[index]:
    x = (x - 0.1)
  index = 30
  if main[index] > opposite[index]:
    x = (x - 0.0001)
  index = 19
  if main[index] > main[index]:
    x = (x - 0.9)
  index = 42
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.0000001)
  index = 10
  if opposite[index] > sum(main[:-index]):
    x = (x - 0.001)
  index = 19
  if main[index] < 1:
    if opposite[index] < main[index] + 0.0000001:
      x = (x + 0.01)
  else:
    if opposite[index] < main[index] + 8:
      x = (x + 0.00001)
    else:
      x = (x - 0.0001)
  index = 41
  if opposite[index] < main[index]:
    x = (x - 0.8)
  index = 18
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.3:
      x = (x - 0.01)
  else:
    if opposite[index] < main[index] + 9:
      x = (x + 0.000001)
    else:
      x = (x + 0.001)
  index = 29
  if main[index] < 1:
    if opposite[index] < main[index] + 0.001:
      x = (x - 0.0001)
  else:
    if opposite[index] > main[index] + 4:
      x = (x - 0.7)
    else:
      x = (x + 0.5)
  index = 0
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 100:
    x = (x - 0.4)
  index = 5
  if main[index] + sum(opposite[:-index]) < sum(main[-index:]):
    x = (x + 0.3)
  index = 26
  if main[index] + main[index] > main[index] + opposite[index]:
    x = (x - 0.6)
  index = 15
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.4)
  index = 32
  if main[index] < opposite[index]:
    x = (x - 0.3)
  index = 7
  if main[index] > main[index]:
    x = (x - 0.01)
  index = 22
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 1000:
    x = (x + 0.0001)
  index = 46
  if main[index] > opposite[index]:
    x = (x - 0.0001)
  index = 10
  if main[index] > opposite[index]:
    x = (x - 0.3)
  index = 37
  if main[index] > main[index]:
    x = (x - 0.7)
  index = 5
  if main[index] - opposite[index] < opposite[index] - opposite[index]:
    x = (x + 0.4)
  index = 34
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 500:
    x = (x + 0.00001)
  index = 21
  if opposite[index] < opposite[index]:
    x = (x - 0.0000001)
  index = 3
  if opposite[index] < opposite[index]:
    x = (x + 0.3)
  index = 1
  if main[index] > main[index]:
    x = (x - 1.0)
  index = 40
  if sum(opposite[:-index]) < sum(opposite[-index:]):
    x = (x - 0.6)
  index = 48
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 1000:
    x = (x - 0.2)
  index = 10
  if main[index] - main[index] > main[index]:
    x = (x + 0.00001)
  index = 42
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.9)
  index = 9
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 1000:
    x = (x + 0.1)
  index = 50
  if main[index] < opposite[index]:
    x = (x + 0.01)
  index = 31
  if main[index] > opposite[index]:
    x = (x + 0.001)
  index = 44
  if opposite[index] < main[index]:
    x = (x + 0.0001)
  index = 16
  if main[index] < 1:
    if opposite[index] < main[index] + 0.8:
      x = (x + 0.6)
  else:
    if opposite[index] > main[index] + 3:
      x = (x - 0.000001)
    else:
      x = (x + 0.001)
  index = 50
  if opposite[index] > opposite[index]:
    x = (x - 0.0000001)
  index = 23
  if opposite[index] < main[index]:
    x = (x + 0.00001)
  index = 46
  if opposite[index] < opposite[index]:
    x = (x - 0.2)
  index = 12
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 50:
    x = (x - 0.8)
  index = 45
  if main[index] < 1:
    if main[index] > opposite[index] + 0.00001:
      x = (x - 0.4)
  else:
    if opposite[index] < opposite[index] + 9:
      x = (x - 0.001)
    else:
      x = (x - 0.1)
  index = 13
  if opposite[index] > main[index]:
    x = (x + 0.1)
  index = 0
  if sum(opposite[:-index]) < sum(main[:-index]):
    x = (x - 0.6)
  index = 15
  if opposite[index] < opposite[index]:
    x = (x + 0.00001)
  index = 48
  if main[index] < 1:
    if main[index] < main[index] + 0.01:
      x = (x - 0.0001)
  else:
    if opposite[index] < main[index] + 5:
      x = (x - 0.000001)
    else:
      x = (x - 0.001)
  index = 29
  if main[index] > main[index]:
    x = (x + 0.0000001)
  index = 4
  if main[index] > opposite[index]:
    x = (x - 0.1)
  index = 21
  if opposite[index] > main[index]:
    x = (x + 0.5)
  index = 2
  if main[index] < 1:
    if main[index] > opposite[index] + 1.0:
      x = (x + 0.4)
  else:
    if opposite[index] > main[index] + 9:
      x = (x + 0.9)
    else:
      x = (x - 0.3)
  index = 15
  if main[index] < 1:
    if opposite[index] > main[index] + 0.00001:
      x = (x + 0.001)
  else:
    if main[index] > main[index] + 4:
      x = (x + 0.1)
    else:
      x = (x - 0.5)
  index = 9
  if main[index] < 1:
    if main[index] > opposite[index] + 0.0001:
      x = (x + 0.9)
  else:
    if opposite[index] < main[index] + 1:
      x = (x - 0.01)
    else:
      x = (x + 0.001)
  index = 5
  if main[index] < opposite[index]:
    x = (x + 0.5)
  index = 18
  if opposite[index] > main[index]:
    x = (x - 0.3)
  index = 49
  if opposite[index] > opposite[index]:
    x = (x - 0.4)
  index = 7
  if sum(main[:-index]) > main[index]:
    x = (x - 0.2)
  index = 3
  if main[index] < 1:
    if opposite[index] < main[index] + 0.5:
      x = (x + 0.1)
  else:
    if opposite[index] < main[index] + 4:
      x = (x + 0.0001)
    else:
      x = (x + 0.000001)
  index = 19
  if main[index] < 1:
    if main[index] < opposite[index] + 0.8:
      x = (x - 0.4)
  else:
    if opposite[index] < opposite[index] + 1:
      x = (x - 0.000001)
    else:
      x = (x - 0.1)
  index = 11
  if main[index] < 1:
    if main[index] > opposite[index] + 0.1:
      x = (x + 0.6)
  else:
    if main[index] < opposite[index] + 1:
      x = (x - 0.001)
    else:
      x = (x - 0.0000001)
  index = 25
  if main[index] > main[index]:
    x = (x - 0.3)
  index = 31
  if main[index] > opposite[index]:
    x = (x - 0.001)
  index = 50
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.6)
  index = 0
  if main[index] < opposite[index]:
    x = (x + 0.4)
  index = 19
  if main[index] < main[index]:
    x = (x + 0.5)
  index = 28
  if main[index] < 1:
    if opposite[index] < main[index] + 0.2:
      x = (x - 0.5)
  else:
    if main[index] > opposite[index] + 9:
      x = (x - 0.3)
    else:
      x = (x + 0.00001)
  index = 41
  if main[index] < 1:
    if main[index] < opposite[index] + 0.8:
      x = (x - 0.1)
  else:
    if opposite[index] < main[index] + 6:
      x = (x - 0.00001)
    else:
      x = (x - 0.1)
  index = 6
  if sum(main[-index:]) > main[index]:
    x = (x + 0.000001)
  index = 25
  if opposite[index] > opposite[index]:
    x = (x + 0.000001)
  index = 25
  if opposite[index] < main[index]:
    x = (x + 0.00001)
  index = 5
  if main[index] < opposite[index]:
    x = (x - 0.1)
  index = 25
  if main[index] + opposite[index] < opposite[index] + main[index]:
    x = (x + 0.4)
  return x
XXX_output_XXX = p()

Genotype:
[75233, 26634, 11006, 3046, 27223, 74071, 12443, 83795, 36121, 11596, 20342, 32690, 33218, 22829, 73702, 33916, 28621, 63770, 69325, 47897, 97123, 62639, 76082, 71923, 83807, 83856, 13161, 92220, 16591, 28102, 88368, 20922, 79502, 57624, 20034, 19055, 72677, 44561, 49126, 26054, 41240, 39507, 8971, 60253, 99441, 23057, 174, 47185, 93314, 76976, 27617, 49260, 78033, 73324, 36326, 16314, 77101, 97293, 73054, 75810, 75614, 9796, 20074, 33254, 80971, 54868, 35658, 67631, 13615, 5908, 31163, 85652, 92860, 26473, 74818, 53150, 54911, 49037, 19265, 50286, 22733, 20606, 99057, 14300, 17035, 36203, 30095, 92210, 37067, 47688, 62630, 20236, 30636, 17578, 42523, 53881, 54773, 58110, 77932, 57761, 25895, 12717, 30768, 59028, 81122, 17262, 91220, 8024, 32032, 74266, 47927, 59193, 71659, 40981, 74342, 9006, 45878, 94431, 44694, 55609, 56085, 56747, 50860, 95629, 93058, 92634, 27172, 14156, 25288, 28320, 38409, 8543, 8494, 68207, 77088, 56116, 57174, 40145, 73101, 40697, 2518, 84354, 4604, 1210, 62068, 1639, 88275, 61664, 55970, 9326, 46773, 42935, 73493, 11755, 54749, 7739, 29467, 64549, 27747, 18189, 33759, 29495, 45274, 80849, 5853, 78834, 21301, 20538, 66419, 14972, 33173, 29596, 45342, 41003, 94436, 62556, 22027, 49579, 84249, 60147, 21751, 2194, 39997, 49028, 35864, 63439, 11241, 33860, 46438, 974, 11473, 21692, 98575, 12604, 3639, 18004, 44510, 92830, 84366, 82952, 24319, 14947, 28648, 8135, 20158, 73620, 34268, 8070, 31768, 70783, 57348, 87999, 4131, 79616, 11868, 5611, 40372, 73254, 29495, 551, 23596, 56047, 63712, 61424, 17990, 78364, 99102, 50004, 52129, 56255, 47976, 48239, 36805, 87464, 39938, 84074, 75196, 74194, 9004, 19019, 91135, 68363, 11904, 71265, 5054, 42956, 67724, 95726, 15736, 66368, 41224, 14700, 94648, 10848, 15479, 89942, 42086, 49714, 86543, 86848, 74587, 27775, 56306, 50035, 7898, 21820, 26030, 76369, 77666, 39882, 63803, 64531, 87808, 45157, 40375, 75573, 54980, 6377, 80227, 90180, 14348, 91143, 42774, 16337, 91764, 86592, 62344, 68818, 50876, 6924, 85503, 52838, 37688, 55684, 14100, 71883, 28410, 43245, 1208, 84628, 81783, 69071, 94656, 86012, 88575, 69685, 63381, 24464, 1428, 70659, 35906, 60641, 40159, 39940, 62298, 53899, 2088, 16986, 99988, 36373, 52000, 72055, 94120, 10456, 43905, 24386, 80056, 12346, 89959, 77213, 2573, 28853, 21394, 58793, 83932, 19018, 91060, 7965, 70508, 10408, 32425, 96699, 49081, 89652, 22951, 15041, 204, 3600, 98249, 11163, 50532, 86626, 67483, 22002, 78883, 23224, 34019, 27457, 36306, 58161, 13576, 50923, 33458, 97380, 93777, 37117, 17050, 29064, 67201, 42099, 18795, 33754, 82236, 58149, 23584, 84793, 3228, 77710, 1012, 60561, 7166, 53941, 69911, 39291, 35249, 40243, 86326, 37892, 96774, 22581, 12735, 45458, 25260, 22991, 22110, 45083, 5473, 31417, 56905, 32375, 68954, 59097, 57045, 81567, 55605, 30062, 59609, 42784, 5338, 68577, 84443, 72146, 83059, 33737, 69618, 6798, 21450, 54086, 58538, 52004, 13279, 7241, 45494, 56574, 87428, 69983, 65248, 14843, 54423, 9824, 10562, 48666, 84488, 48917, 71615, 96319, 65621, 47488, 98354, 33304, 37318, 20450, 9217, 236, 37294, 36811, 577, 65773, 9457, 3335, 53304, 22546, 75251, 60146, 37271, 9131, 58195, 71440, 90148, 89257, 4428, 80572, 31653, 93697, 29482, 51095, 25209, 46205, 22220, 6653, 32990, 15907, 56382, 18186, 23313, 42665, 45244, 88599, 28024, 84116, 23399, 56786, 2900, 26412, 46761, 64972, 4298, 79204, 94419, 43947, 73373, 18784, 15566, 2270, 6696, 66043, 45529, 30396, 42695, 67261, 44219, 21415, 46565, 70225, 11013, 26871, 11028, 34259, 63202, 61647, 33446, 36995, 64116, 60384, 726, 89319, 19946, 50905, 11918, 60767, 29072, 33961, 39366, 59307, 97061, 11141, 84293, 26912, 71615, 30683, 68351, 77672, 65035, 95623, 27986, 90206, 48970, 15591, 34963, 20862, 85333, 16370, 70430, 92494, 94513, 41515, 74450, 88774, 6959, 28689, 48487, 1077, 50362, 98520, 96376, 38510, 89374, 95573, 99074, 88304, 85781, 64865, 15083, 49852, 27551, 13496, 67701, 38804, 58150, 91214, 93494, 37684, 56506, 77196, 90603, 10109, 91706, 43766, 77684, 21356, 48627, 42069, 95036, 59581, 71915, 53449, 48809, 3659, 87692, 35393, 90652, 90586, 6901, 29133, 47675, 31292, 73661, 30654, 2030, 66911, 69268, 28587, 93896, 53562, 31152, 93382, 14090, 46194, 90105, 69491, 25079, 36644, 6178, 95561, 89480, 99905, 57564, 42865, 56924, 49590, 97284, 66424, 89155, 46427, 8225, 81283, 41946, 95485, 17480, 58556, 96107, 50708, 97625, 51650, 69533, 81900, 91946, 44372, 55801, 89812, 24940, 52641, 14872, 62767, 96394, 61508, 8941, 61273, 60958, 54226, 19135, 75457, 69045, 11337, 56688, 79093, 60291, 40487, 68450, 54359, 97005, 71222, 78838, 1268, 76855, 98551, 94404, 14723, 64200, 22834, 66701, 42881, 34495, 84420, 56880, 22219, 25395, 57850, 19776, 96388, 3673, 40024, 45659, 51448, 11428, 14663, 96960, 89500, 25273, 97393, 71412, 77925, 21042, 91615, 39619, 72214, 10879, 94810, 78295, 87621, 7744, 38353, 18320, 69274, 29263, 38846, 66414, 23996, 5477, 15290, 2050, 24121, 16291, 15426, 26222, 10130, 33704, 12590, 3517, 3254, 12735, 95372, 94745, 1233, 19238, 92612, 982, 27489, 83003, 16634, 10150, 26484, 43198, 64714, 33091, 83154, 76529, 10704, 86226, 17955, 90677, 67408, 83222, 65977, 38732, 54365, 30630, 97126, 7611, 89909, 55183, 36819, 97514, 88294, 39919, 89202, 92965, 1388, 58081, 2776, 68897, 58746, 6898, 77802, 75914, 34525, 49321, 61799, 14545, 99260, 7692, 31879, 33408, 83265, 65625, 97331, 81072, 60344, 51856, 8522, 397, 55134, 72250, 57605, 21725, 29561, 17729, 86415, 39236, 33862, 18120, 79646, 50069, 99513, 82514, 87205, 80752, 35235, 53947, 14928, 82265, 45744, 71645, 61408, 36011, 17112, 5666, 66254, 59813, 90199, 61848, 92547, 97213, 86670, 67225, 82598, 83575, 96359, 20268, 66991, 973, 38836, 55047, 76369, 15474, 73829, 91413, 13424, 96090, 83106, 11282, 50882, 41715, 4267, 5609, 76363, 10242, 79136, 82511, 43298, 20219, 60457, 25312, 95635, 75293, 48785, 77082, 98189, 42074, 65338, 83965, 92314, 99481, 85623, 39295, 45689, 29437, 74524, 98554, 17053, 15308, 23313, 99472, 10155, 66516, 45567, 4358, 77457, 55141, 22447, 1689, 61134, 87514, 9580, 85525, 40089, 17552, 59795, 64478, 22897, 89391, 75118, 18527, 38706, 59668, 88845, 31031, 54819, 34979, 79026, 59588, 73003, 90991, 63813, 86336, 26567, 23507, 3572, 59265, 69658, 79281, 61466, 20661, 96773, 73547, 9231, 26158, 90226, 83091, 5375, 94430, 27105, 42156, 65032, 39841, 40687, 28889, 683, 92980, 46346, 37398, 98281, 26477, 52063, 31913, 89463, 642, 63775, 68776, 94096, 89031, 29215, 19702, 52923, 60755, 81729, 42304, 18643, 88219, 39997, 87789, 77977, 1410, 51731, 87191, 28675, 11455, 55621, 86673, 24937, 90674, 72450, 75730, 2935, 95101, 12719, 82843, 18976, 36579, 81125, 39280, 73703, 31122, 56803, 89148, 38716, 98199, 75793, 68818, 94912, 28492, 22136, 24325, 99467, 21004, 30710, 18637, 38825, 79892, 74982, 51529, 89351, 58905, 63778, 32280, 23247, 51878, 59830, 88831, 85930, 3681, 28062, 90281, 89963, 40236, 43807, 89682, 4437, 34351, 94528, 14036, 21339, 83456, 42376, 90489, 3091, 68414, 91003, 4421, 57141, 74056, 28960, 31720, 30421, 17338, 45228, 67102, 73929, 18503, 25095, 9557, 82433, 95039, 3867, 49940, 42833, 29135, 12730, 9661, 17158, 97825, 53522, 82456, 29599, 33803, 88841, 75577, 94545, 47990, 62495, 43133, 31559, 86144, 76097, 43113, 36583, 88530, 10140, 3182, 21926, 77845, 1342, 50045, 49729, 70297, 50656, 35164, 70546, 40309, 71364, 53448, 57305, 69446, 35925, 63595, 73618, 43443, 40278, 8703, 50962, 15971, 3033, 64557, 24215, 95354, 38256, 92596, 69920, 67784, 17065, 44739, 3829, 22154, 3376, 60710, 47403, 41879, 95788, 62904, 96686, 13900, 58895, 93861, 54662, 79025, 42449, 72498, 29369, 81580, 66065, 21065, 7339, 32853, 24228, 70467, 51733, 8295, 33602, 97172, 66480, 12756, 47167, 1871, 89787, 6110, 22021, 33132, 89105, 3268, 11313, 26836, 13948, 64976, 58601, 8022, 34059, 18183, 51995, 81496, 55999, 80325, 21364, 17247, 45845, 8473, 52139, 80603, 49426, 60407, 59106, 78792, 47529, 87574, 64615, 44568, 19436, 53828, 63137, 20781, 33674, 53056, 13412, 85940, 47997, 23755, 15786, 13224, 78272, 84717, 85641, 90021, 84832, 35803, 21583, 70060, 37726, 59102, 50891, 1416, 66722, 58906, 18432, 724, 8911, 78213, 39835, 48766, 93877, 85036, 97872, 25231, 85984, 75664, 61538, 71064, 31329, 55448, 49536, 47087, 14766, 73788, 89383, 35791, 80680, 91805, 582, 63016, 12824, 34465, 21170, 59846, 32051, 3952, 99797, 3062, 74935, 4337, 73438, 19612, 46943, 48948, 78270, 28429, 6575, 28457, 21294, 76549, 89023, 32846, 7076, 28315, 24157, 10800, 60694, 88411, 74119, 37862, 77219, 98780, 66142, 77503, 90864, 3652, 23925, 28742, 92528, 75510, 27947, 1803, 11907, 58275, 41957, 96417, 46809, 24263, 98096, 73613, 56914, 81398, 78779, 83565, 91591, 79652, 81111, 74199, 19905, 55488, 96131, 72338, 49900, 80996, 36127, 40441, 3996, 66754, 26734, 43118, 41196, 76775, 24184, 81783, 31365, 30131, 63735, 81271, 61204, 1039, 42508, 65560, 74940, 63959, 38163, 57860, 5368, 93953, 49655, 5806, 61882, 4584, 21943, 66837, 63646, 93406, 48521, 55894, 66230, 99033, 83864, 900, 71652, 23950, 96318, 28880, 55372, 10262, 76182, 83395, 63995, 39136, 98960, 27390, 50608, 32958, 4262, 59566, 43432, 79240, 61126, 81458, 13847, 76939, 57385, 71985, 4700, 36216, 68850, 9506, 61129, 82089, 65432, 2782, 39082, 68781, 21929, 83725, 60877, 52638, 26278, 44251, 36725, 69976, 81676, 3633, 42658, 99573, 33693, 34422, 78837, 90126, 42610, 91652, 3697, 50761, 62571, 72684, 27124, 87255, 33621, 49020, 32430, 82518, 77272, 47861, 26512, 25126, 13811, 58111, 14105, 19792, 7777, 23059, 73665, 44397, 77475, 57025, 15652, 17433, 87673, 70390, 52373, 30016, 7628, 4329, 47167, 66808, 75958, 93719, 78315, 21345, 26822, 72285, 35200, 59694, 55453, 89262, 99184, 24394, 54739, 62768, 62237, 79506, 10435, 13537, 57571, 67971, 85991, 20920, 36787, 15031, 68475, 20458, 30910, 60253, 8442, 21717, 36404, 98816, 69702, 11857, 63353, 95822, 59630, 59029, 17750, 29900, 10276, 23968, 36866, 24239, 58863, 96923, 9893, 92792, 56727, 38653, 88552, 97829, 28351, 6571, 29850, 39886, 51826, 34330, 35460, 66979, 37882, 25135, 89555, 47089, 96918, 33623, 13386, 13548, 21582, 65847, 99841, 12253, 26058, 91450, 80273, 32044, 35187, 38566, 19422, 28271, 69688, 94224, 53478, 15543, 18807, 74978, 97439, 85471, 97790, 37980, 84472, 36438, 24469, 87349, 12952, 91877, 83961, 83675, 60046, 9591, 69419, 49734, 31130, 96405, 99392, 23380, 68038, 74236, 9272, 38372, 57085, 96457, 1769, 65923, 30371, 42545, 82609, 46180, 288, 73135, 76979, 9589, 51109, 41404, 23489, 86979, 52758, 69409, 25618, 58952, 51755, 98563, 35442, 37041, 58615, 5700, 31221, 91466, 72846, 32731, 52564, 6292, 68844, 48845, 25007, 51229, 67683, 99552, 89376, 76146, 45546, 42108, 39553, 80379, 34530, 90148, 29385, 54978, 43236, 45590, 95756, 37001, 61329, 38139, 35120, 84122, 92964, 22769, 80408, 60589, 77487, 70972, 84434, 91172, 4290, 3700, 12751, 85952, 59656, 74338, 87701, 40882, 29535, 13558, 32076, 75519, 83595, 32681, 31935, 39384, 2600, 60078, 41323, 83660, 55268, 63866, 49682, 47664, 11398, 55216, 59040, 61315, 23588, 77411, 35649, 12277, 11715, 5087, 2736, 81676, 76154, 31034, 47240, 5603, 20614, 98815, 78813, 84695, 59122, 26523, 84322, 92310, 89960, 53136, 82549, 77822, 13810, 86737, 9308, 67192, 36366, 9025, 34363, 58993, 16133, 683, 18275, 77478, 85247, 77799, 41896, 42474, 26960, 95516, 82551, 3553, 43651, 38927, 61177, 11082, 70691, 62545, 19304, 96461, 49576, 78617, 96920, 43413, 29723, 88254, 37699, 11218, 9210, 79018, 56464, 64501, 22222, 35702, 46579, 20396, 47426, 19279, 9281, 44216, 61701, 25306, 82174, 48774, 83715, 43945, 55854, 6486, 89754, 31832, 6340, 33418, 2919, 45629, 33252, 50535, 27965, 86083, 73662, 3535, 7654, 11101, 97276, 21701, 55197, 8529, 53845, 51799, 12897, 55113, 28534, 91977, 61254, 9106, 1124, 96736, 35717, 29957, 27171, 9922, 60145, 81202, 99931, 42460, 7844, 11784, 95011, 39223, 85346, 70180, 75603, 17314, 7262, 98717, 22847, 81654, 58664, 63883, 69972, 37932, 75745, 58799, 55986, 48366, 49663, 86617, 37233, 39085, 26064, 5670, 95440, 87000, 7209, 38848, 43232, 45036, 30293, 81376, 13370, 57427, 99339, 49513, 42761, 83093, 13887, 65053, 26728, 31069, 92836, 58442, 33270, 34761, 77555, 57758, 7774, 29412, 36259, 69073, 12362, 6605, 14523, 12640, 70399, 88944, 32466, 72448, 44063, 83359, 35559, 62116, 67307, 4687, 6380, 45712, 5032, 48931, 81331, 92795, 54225, 74460, 30034, 56275, 58503, 67058, 13260, 8971, 65100, 88780, 70773, 11372, 27078, 17968, 84477, 51882, 46659, 41336, 76996, 56184, 95919, 3404, 40879, 63707, 61752, 70711, 56719, 18731, 36268, 73102, 21682, 77978, 92973, 22325, 80210, 98531, 18516, 19711, 10379, 42341, 2643, 46325, 53185, 50852, 58666, 59374, 32872, 8297, 66173, 98041, 34419, 28414, 9887, 93669, 78472, 6543, 27460, 58853, 3966, 24450, 30635, 89191, 22267, 66731, 10385, 95368, 84201, 62962, 33541, 23246, 14368, 33718, 62761, 29263, 79636, 95349, 60297, 16174, 24015, 77124, 68890, 48626, 42978, 18182, 6041, 25467, 76972, 70026, 9740, 73009, 6593, 84694, 81722, 93050, 32943, 33683, 21537, 3195, 688, 95391, 50327, 4691, 33929, 29255, 55843, 61187, 91373, 20716, 12840, 56582, 25462, 40674, 36208, 47497, 4206, 44701, 38708, 78252, 68259, 20554, 98808, 13386, 25956, 20490, 66389, 2165, 75364, 80077, 42679, 79861, 47840, 46061, 32872, 89927, 79120, 49250, 41070, 54373, 9316, 73193, 17704, 68146, 39395, 85214, 90857, 46583, 17581, 28801, 19126, 36102, 6065, 67367, 76713, 54474, 17654, 78775, 47608, 19058, 85740, 29125, 81706, 77183, 85413, 7964, 83113, 67335, 48956, 45084, 51728, 25693, 3577, 4678, 65865, 28347, 94209, 30238, 27960, 28743, 26905, 77425, 48562, 26212, 98782, 34264, 52789, 6910, 78186, 83102, 41507, 1498, 39097, 50467, 90393, 22273, 28531, 23611, 43937, 24859, 50147, 13742, 14486, 45978, 48541, 23773, 36669, 20868, 56566, 33566, 3656, 19434, 86113, 15943, 36539, 17159, 14891, 10954, 62092, 7339, 28781, 31821, 95123, 86403, 72642, 90466, 92075, 50983, 27605, 29913, 37898, 36635, 35877, 76633, 34733, 3084, 40265, 87418, 46796, 87231, 34784, 16319, 66493, 10320, 65619, 28469, 41889, 12621, 94684, 537, 67644, 22402, 29006, 93835, 45539, 95492, 18315, 99549, 30937, 72650, 41947, 71288, 63665, 25220, 62710, 81139, 7904, 75780, 47355, 18049, 23720, 14525, 98573, 70175, 93326, 1026, 35162, 83214, 60114, 63014, 90403, 16874, 54112, 35957, 2542, 62649, 69682, 97469, 42744, 78636, 29254, 68339, 99055, 88750, 82873, 79584, 86676, 5342, 10597, 19802, 95756, 55297, 20617, 42833, 89253, 86937, 95083, 74284, 14117, 8540, 56939, 24914, 9409, 82419, 39898, 91186, 21685, 11850, 78622, 19739, 27734, 80335, 78947, 17099, 87322, 41926, 38763, 38980, 32719, 31853, 24081, 93748, 41134, 16290, 78511, 3172, 98457, 76460, 1183, 19078, 70663, 78600, 82224, 60464, 7482, 6600, 64029, 13768, 24625, 7992, 22405, 68345, 86110, 33196, 90286, 36364, 98471, 34881, 79712, 97048, 91236, 92365, 3887, 69667, 66852, 38990, 57791, 40882, 98227, 28270, 2773, 49401, 972, 19816, 38089, 52812, 25146, 92846, 6226, 10075, 86611, 7094, 52037, 60341, 22376, 93618, 34415, 12235, 79547, 1616, 75514, 23256, 96989, 77535, 53281, 2174, 31809, 77575, 98593, 22271, 15459, 1558, 72380, 16128, 74204, 74635, 17217, 86256, 17816, 66903, 45215, 67213, 39031, 58724, 55265, 7954, 7231, 85293, 79791, 29644, 35964, 90272, 28541, 11424, 99625, 59528, 33431, 7056, 46779, 27420, 95412, 12372, 96592, 48022, 60559, 66603, 39975, 91491, 21550, 81722, 10677, 97632, 50567, 12742, 34598, 98059, 86560, 92828, 65170, 1438, 43740, 75215, 15118, 53004, 21392, 12697, 82034, 20757, 55303, 28066, 544, 28408, 73672, 66355, 31079, 88834, 23032, 37540, 48302, 69813, 47897, 67093, 28645, 94093, 24007, 10592, 70801, 57915, 81378, 6852, 12554, 91845, 38498, 41733, 77217, 93755, 9926, 77248, 76262, 68347, 17290, 26720, 96947, 11433, 33076, 25612, 64255, 74969, 16477, 11300, 39186, 44760, 82827, 38835, 22245, 23859, 95558, 22910, 8324, 29336, 59227, 52597, 32021, 8149, 80321, 68851, 28402, 46264, 84971, 44959, 36964, 71096, 4072, 51993, 91402, 51013, 29969, 7689, 95736, 23656, 73737, 40245, 90521, 76750, 78368, 14963, 40348, 57035, 93214, 57814, 69653, 80301, 13377, 2729, 68806, 30959, 50635, 64372, 70684, 71835, 77461, 12895, 99736, 66663, 683, 78568, 88304, 44170, 57737, 79737, 77908, 10026, 7498, 7271, 77796, 69219, 12492, 43705, 89250, 90264, 45477, 23371, 26653, 85389, 40987, 78281, 66122, 95552, 75805, 99403, 95092, 5736, 25220, 49857, 55892, 40892, 32836, 3947, 39391, 44203, 25121, 96740, 77361, 4623, 43739, 46687, 92286, 12780, 35507, 35281, 77266, 28498, 59218, 86957, 92743, 71851, 95459, 23832, 63157, 76662, 82385, 37840, 78725, 90286, 61241, 46964, 2152, 61450, 25071, 32412, 80632, 5359, 52629, 15990, 77110, 42175, 56002, 6957, 43348, 99926, 62412, 33259, 56744, 44012, 93344, 7425, 45172, 35776, 36596, 45928, 38527, 14711, 56344, 11896, 7859, 63712, 31589, 79950, 21572, 41462, 281, 11307, 8460, 31365, 9831, 26827, 62641, 45340, 19078, 25219, 25829, 62157, 94470, 97336, 10747, 32645, 50002, 16684, 82120, 32194, 63908, 45025, 8701, 32723, 12271, 67026, 26809, 73389, 12172, 15957, 76618, 48554, 23381, 44140, 98952, 20314, 76529, 38308, 77648, 99571, 63060, 35950, 74674, 22637, 2971, 79109, 92291, 55005, 55637, 7245, 7513, 10500, 1943, 11563, 41737, 81920, 33212, 65263, 69946, 91939, 43823, 35062, 44494, 20894, 73773, 65608, 35998, 54951, 3630, 17002, 50158, 7446, 82609, 34094, 91457, 16214, 33735, 67509, 94263, 10409, 13705, 40802, 42077, 96271, 1454, 25532, 41752, 59692, 71068, 81405, 67034, 96807, 36501, 69889, 10870, 89291, 21342, 68855, 98978, 48002, 22342, 63395, 63521, 72285, 77871, 8475, 35998, 88951, 67773, 40900, 99354, 14977, 73964, 30948, 44026, 98470, 50396, 94705, 99632, 54498, 45600, 81271, 25682, 69597, 27340, 52248, 71041, 94868, 9000, 47686, 74442, 12836, 18397, 39262, 27196, 60362, 5488, 81550, 58382, 33491, 2149, 89603, 74503, 72104, 41008, 11156, 96824, 55546, 806, 88404, 31584, 62010, 25418, 55219, 84565, 55971, 33941, 2188, 35162, 82409, 28164, 37834, 63974, 61259, 46925, 30438, 46819, 49886, 10307, 4581, 81929, 6805, 45239, 80948, 95566, 8535, 4221, 87446, 63242, 91901, 14234, 15176, 8812, 76078, 78007, 79941, 35411, 34516, 30397, 97226, 68707, 19027, 31159, 64606, 55403, 69273, 30295, 43318, 79717, 75931, 74690, 61364, 10183, 57869, 67966, 30498, 6275, 15381, 3727, 3106, 63630, 17372, 90386, 7397, 10208, 44760, 33560, 24506, 73677, 73930, 85148, 54774, 68760, 60863, 22385, 54968, 86265, 50010, 38845, 56969, 2984, 87141, 60470, 16141, 58737, 83195, 12058, 71941, 28009, 773, 34080, 91303, 42348, 8601, 60648, 31248, 86129, 65893, 82113, 91129, 39538, 25725, 49966, 18967, 13630, 75350, 81850, 75917, 61588, 2958, 27479, 42878, 98603, 67983, 61030, 46704, 60559, 66706, 20401, 63879, 24709, 42060, 52672, 36949, 12741, 17500, 49560, 54837, 88225, 41882, 511, 55290, 52015, 6726, 83641, 34976, 76305, 52331, 58334, 37968, 54551, 55264, 50034, 79018, 54928, 76317, 42720, 20338, 53994, 877, 7058, 56080, 17653, 24695, 66568, 61681, 68078, 42674, 19152, 43950, 25484, 87141, 87416, 93667, 16465, 88262, 71785, 44851, 2512, 39509, 10345, 44864, 94797, 3807, 18337, 14990, 58981, 49065, 59817, 80671, 22270, 98450, 46185, 63797, 3647, 20162, 27814, 47440, 64069, 42020, 38824, 54483, 93200, 14780, 78590, 54542, 56997, 12412, 52925, 32847, 37990, 6820, 46625, 76156, 26602, 88906, 34085, 68765, 11979, 58098, 72271, 36628, 85764, 55764, 6799, 31697, 9008, 47293, 93754, 28466, 95669, 27401, 67746, 87452, 85384, 58133, 43626, 47024, 17906, 63850, 68370, 94198, 28151, 47860, 74883, 20934, 17868, 4309, 61998, 64543, 56420, 21329, 84295, 49784, 91209, 88990, 98605, 25155, 76970, 15406, 91, 21837, 32625, 13849, 11524, 38367, 61606, 90736, 23494, 17335, 27607, 79499, 30663, 75704, 21313, 45350, 4883, 44083, 37769, 63144, 83270, 59272, 29047, 53814, 77173, 36944, 50734, 26329, 91581, 51822, 83833, 90913, 73975, 42229, 74131, 85255, 13073, 22931, 72261, 56548, 29923, 30199, 65185, 75935, 19889, 51155, 54437, 92633, 66188, 23853, 64749, 25867, 47548, 35968, 44851, 11056, 21315, 60626, 4680, 8597, 93128, 96709, 95081, 14910, 47676, 30984, 28657, 51775, 27321, 6808, 73926, 77955, 98649, 10459, 1868, 42295, 38768, 33152, 82171, 31884, 37095, 74338, 60775, 60266, 53841, 3636, 98513, 35815, 13966, 55400, 2328, 63633, 10968, 50821, 84841, 47856, 85074, 31342, 80555, 47478, 69564, 96321, 90436, 51337, 46035, 13157, 88024, 7514, 86231, 72766, 79014, 20620, 61597, 8819, 75963, 1120, 43557, 74178, 80850, 50442, 63432, 44071, 61227, 51103, 95554, 86932, 44648, 59803, 52109, 34381, 75674, 17574, 56673, 92371, 97399, 18387, 61726, 98233, 27094, 59287, 17158, 48312, 30208, 85401, 55007, 37433, 15952, 61405, 68398, 9678, 39525, 28238, 41404, 31247, 8740, 59892, 68728, 38533, 33339, 21109, 72346, 51846, 44702, 74598, 77080, 39235, 81845, 38451, 44500, 74084, 4030, 92954, 77033, 41800, 37783, 60017, 23117, 65258, 27878, 38207, 87562, 10331, 65239, 56526, 57443, 18142, 95567, 48454, 52907, 73890, 62413, 50923, 40256, 75197, 1698, 21610, 17348, 57868, 96220, 92044, 1749, 92045, 63988, 99670, 26225, 8020, 77021, 48085, 81728, 16633, 12356, 31436, 69340, 77731, 44761, 8612, 32732, 95752, 20851, 84371, 22678, 43974, 79125, 80388, 5937, 6820, 55432, 93924, 57071, 5211, 95818, 79660, 56017, 42620, 50563, 43920, 38977, 61011, 8844, 62547, 88622, 20812, 20773, 21045, 6271, 42240, 98180, 54785, 20437, 82499, 74398, 19774, 34704, 51812, 85622, 50082, 67133, 12649, 86859, 22571, 79011, 74313, 61477, 150, 95132, 20959, 11124, 29295, 15917, 48746, 59729, 86963, 14857, 77551, 60274, 20719, 71935, 96548, 33823, 57456, 33831, 88592, 28727, 38139, 31450, 44310, 97225, 52129, 53374, 79293, 47110, 22722, 42042, 61754, 49977, 3469, 88541, 58371, 2186, 15263, 4329, 94264, 82521, 95273, 60694, 14697, 99148, 30110, 73632, 53581, 22102, 70593, 74756, 48093, 23755, 16329, 99091, 47110, 59161, 95324, 76745, 53598, 62202, 45854, 88619, 71732, 78064, 99831, 65946, 53089, 9617, 6478, 8343, 225, 77408, 52916, 92681, 44116, 29171, 69524, 30298, 13943, 64693, 92878, 60320, 72615, 65534, 36794, 45927, 21994, 31668, 6223, 977, 92899, 66390, 34008, 45567, 60040, 53159, 36424, 66351, 90053, 82035, 79695, 87457, 61725, 26108, 55539, 27672, 55382, 6900, 18723, 88483, 65814, 95031, 63814, 61295, 48103, 5795, 70486, 88290, 67272, 5062, 19172, 66862, 63360, 13195, 921, 14920, 98025, 66204, 87217, 16975, 6832, 39942, 54761, 59110, 30106, 92713, 54810, 6757, 6894, 84219, 31692, 60023, 25006, 57245, 94580, 56515, 25496, 98485, 28058, 9977, 74106, 87459, 12774, 63741, 34, 23296, 15788, 8923, 20859, 85456, 35042, 4481, 98996, 39193, 18029, 66931, 33055, 22212, 9129, 25769, 91324, 93428, 67817, 48954, 88731, 6985, 41209, 49788, 16213, 78402, 10686, 26055, 75332, 23100, 78914, 34542, 15778, 60976, 1674, 29370, 59958, 76224, 58699, 6662, 51963, 1801, 80020, 34600, 3667, 9943, 24793, 89004, 6338, 7456, 30399, 70655, 83989, 47482, 56311, 89042, 88675, 38299, 59412, 16315, 23043, 69061, 92988, 71059, 97595, 32728, 77506, 57318, 54158, 94963, 93238, 83212, 79726, 52805, 55222, 4614, 87064, 71871, 76051, 63599, 300, 29600, 66268, 24795, 77090, 94014, 10600, 75268, 63098, 42388, 77658, 31941, 69865, 37765, 61199, 27692, 33590, 84461, 36680, 93686, 39735, 9938, 58590, 97339, 90670, 33313, 63361, 69864, 12442, 31943, 25327, 6438, 39415, 83711, 28121, 93486, 5967, 48904, 42928, 64697, 59356, 64035, 10120, 82249, 87582, 18562, 15853, 72569, 84623, 46748, 79906, 88295, 78823, 70906, 71355, 35286, 53404, 56292, 52148, 87732, 14260, 94512, 56260, 53497, 94888, 8894, 17143, 65359, 36031, 99299, 55311, 95500, 56299, 21406, 45379, 60620, 79008, 3207, 53219, 17204, 11855, 61807, 85, 76166, 72631, 66492, 37113, 35443, 60055, 52939, 25795, 3297, 2201, 70501, 43452, 29080, 20685, 7397, 53680, 4862, 88594, 62746, 74354, 3059, 99603, 44144, 68634, 42062, 91396, 83641, 10755, 8187, 55650, 63697, 93186, 58964, 55249, 86511, 1982, 76252, 29923, 53233, 72039, 5759, 32655, 25760, 54051, 16752, 70892, 22480, 97404, 72488, 9511, 76054, 48091, 71575, 73640, 83236, 57687, 55973, 54425, 57090, 93820, 14188, 24020, 63344, 21957, 69806, 29860, 52862, 79156, 24514, 69201, 67917, 90207, 17663, 64068, 72555, 74387, 17654, 91306, 84493, 95021, 6780, 99211, 17453, 94610, 9233, 64345, 78804, 30237, 90731, 48597, 13280, 29920, 37998, 40723, 92154, 9054, 77738, 17591, 85465, 64247, 57017, 2902, 56293, 76490, 79057, 34615, 70341, 50823, 66080, 29577, 76018, 65338, 91147, 1378, 60098, 41625, 14168, 77325, 30178, 8038, 93606, 42324, 99360, 89032, 91309, 60123, 83304, 19843, 86415, 48856, 93398, 88512, 8630, 2849, 62036, 68649, 95042, 64188, 70699, 86284, 26412, 52447, 49539, 74577, 47744, 70499, 45046, 93622, 97522, 2636, 20083, 26701, 11924, 58058, 90328, 5055, 55254, 59539, 27487, 4955, 80902, 89884, 73862, 84004, 28176, 11921, 25693, 17096, 40323, 70579, 43565, 72784, 70384, 73857, 68685, 45448, 36640, 2847, 37945, 77967, 29255, 11948, 34296, 87032, 10358, 75181, 38659, 50420, 82669, 22275, 56107, 43781, 72436, 43367, 39040, 44260, 9709, 69679, 2546, 25619, 13530, 36733, 81892, 11460, 57313, 67787, 15800, 56803, 60621, 16104, 27520, 55890, 53932, 84977, 87278, 91000, 57610, 62993, 82463, 76864, 91898, 54506, 100, 3277, 96287, 88068, 5796, 81730, 46217, 96608, 27094, 68639, 26748, 47632, 76145, 33677, 75277, 44227, 84835, 2511, 22763, 85428, 79046, 55797, 53439, 41167, 78681, 65503, 90379, 47604, 4877, 24441, 13407, 41684, 33247, 38247, 86542, 98863, 59981, 20887, 96392, 13998, 38309, 28818, 18062, 22426, 85060, 51865, 7724, 77182, 88409, 87820, 97468, 19581, 44044, 64996, 91163, 81671, 67732, 56113, 25559, 23650, 69266, 31160, 76933, 66227, 49352, 72448, 52513, 91690, 23340, 2227, 59962, 84001, 28448, 2075, 65313, 49599, 66868, 10595, 40342, 51991, 94544, 2997, 51817, 62692, 14072, 31810, 81506, 25424, 61726, 38050, 42695, 63146, 94792, 12985, 14185, 31196, 67637, 61709, 16567, 97031, 66295, 75330, 18014, 85236, 48700, 40673, 41978, 96691, 11375, 72395, 85010, 54241, 14683, 42340, 9540, 64621, 30292, 80704, 47687, 79638, 31691, 75407, 90841, 9884, 69533, 26482, 45769, 58812, 37399, 95671, 26049, 8276, 89681, 6763, 78130, 2350, 41292, 37218, 88714, 53480, 62656, 93220, 75506, 9981, 37399, 79963, 92756, 15397, 32482, 36061, 3468, 38017, 24841, 98812, 82682, 83221, 34366, 84440, 23388, 33049, 20845, 64361, 21994, 20048, 57629, 66584, 80066, 99959, 70728, 87844, 91310, 49002, 41834, 55970, 53378, 17709, 47863, 28738, 37517, 61418, 5757, 24212, 76428, 63697, 42013, 95716, 58115, 79494, 80461, 74633, 36702, 52231, 84679, 85262, 21869, 14965, 726, 58658, 93204, 22255, 76272, 78986, 447, 21794, 77958, 45030, 40020, 17827, 74692, 54040, 40523, 23879, 89835, 47632, 21012, 73010, 18938, 40929, 80679, 24027, 67528, 87323, 51289, 46117, 84006, 41257, 18166, 55888, 52350, 46097, 86431, 99204, 11576, 60449, 13516, 24187, 69166, 3691, 99226, 61381, 76923, 58446, 4094, 54531, 15068, 64679, 40148, 88283, 38405, 86481, 72308, 10903, 1756, 75459, 20405, 61094, 42567, 1116, 20959, 1071, 48607, 71798, 10447, 11971, 85987, 51384, 56632, 40257, 50300, 42113, 72449, 27762, 85147, 8012, 20510, 69429, 95515, 73520, 16282, 93637, 72244, 74205, 51874, 55144, 82686, 64850, 82926, 95141, 45244, 12548, 29244, 51114, 43161, 87002, 4930, 29534, 58642, 68623, 93511, 52636, 97143, 57420, 99686, 41952, 59181, 96294, 95066, 8988, 63574, 2378, 98684, 73768, 6930, 46114, 61688, 38370, 20387, 5099, 22363, 68073, 42094, 97348, 66982, 2818, 72296, 60531, 84819, 45486, 87215, 78517, 23902, 30360, 7189, 28273, 91188, 91352, 57323, 26111, 99335, 10795, 97556, 52566, 20744, 65189, 34189, 85301, 80487, 94294, 69117, 50213, 14358, 46594, 81701, 81963, 85347, 89894, 84556, 4855, 12295, 16765, 76848, 50179, 56446, 90106, 57337, 42420, 44945, 11272, 10695, 5883, 85361, 58011, 24583, 4122, 51952, 91291, 86171, 29606, 58441, 78529, 85068, 13670, 37344, 74426, 43392, 82415, 10994, 63398, 90697, 84429, 95750, 96549, 45524, 98557, 44644, 95015, 70740, 5711, 92784, 61897, 79832, 88658, 58226, 1483, 53766, 5192, 58138, 55474, 24877, 2351, 59726, 46588, 95687, 10591, 81695, 28623, 99436, 14482, 21785, 46073, 10082, 88779, 77787, 1636, 81674, 76835, 85185, 32212, 49566, 87375, 19026, 3699, 16022, 13807, 79774, 9121, 5321, 70971, 5170, 82878, 95515, 3431, 55792, 80023, 56572, 71504, 98619, 90361, 32849, 2024, 33265, 90709, 59235, 51835, 43564, 41512, 59335, 48964, 35292, 81661, 93345, 44780, 70298, 824, 43537, 73282, 12304, 69110, 71945, 35631, 3423, 96868, 68316, 63167, 11120, 58732, 46697, 79006, 88959, 37539, 51434, 63373, 18321, 16521, 84214, 45727, 5602, 21885, 54671, 87222, 62427, 23295, 619, 47487, 3676, 22561, 27243, 48605, 83760, 54596, 17431, 46069, 22110, 86491, 24793, 83212, 19073, 91163, 15415, 14383, 33761, 52897, 25381, 26632, 79405, 46876, 93752, 27329, 40309, 57964, 72823, 84832, 81488, 32987, 3199, 73741, 5942, 75768, 485, 19642, 63972, 47408, 71950, 71335, 93844, 23361, 19924, 25977, 8364, 15044, 31720, 45162, 70667, 82597, 24101, 7232, 11577, 58639, 29422, 86030, 98933, 74083, 72710, 22536, 63036, 84600, 89492, 86138, 72083, 2216, 75487, 71988, 95056, 96400, 56275, 90422, 83254, 50148, 306, 3566, 48544, 7841, 96137, 3364, 15328, 49024, 62369, 69716, 29021, 13123, 3908, 57158, 47798, 547, 18385, 87893, 51496, 33486, 16338, 68670, 82354, 82532, 59334, 5654, 27223, 88569, 1504, 96739, 9372, 89737, 15859, 74408, 44548, 79929, 57203, 26776, 2366, 9544, 47365, 31750, 7203, 88785, 3696, 92032, 52324, 45073, 9164, 69508, 97951, 20683, 57891, 20431, 32148, 90354, 37956, 96010, 56113, 85105, 41663, 36214, 93515, 35462, 64787, 39570, 64335, 63509, 42817, 8857, 18841, 28942, 65682, 94856, 89642, 12174, 10123, 16308, 90350, 37611, 95082, 82587, 16623, 76085, 14209, 5881, 24713, 47106, 72536, 27001, 46022, 19873, 68526, 87581, 63533, 30313, 61281, 40722, 71490, 72160, 45731, 75776, 33407, 74999, 55650, 5582, 46372, 30073, 92538, 26688, 22288, 98212, 13653, 14454, 70489, 7947, 54975, 55026, 18437, 5000, 52413, 52306, 90634, 47429, 80899, 1821, 32196, 95900, 88888, 93550, 41585, 28334, 86476, 13455, 40356, 55480, 13771, 85238, 86242, 21871, 21094, 45828, 84089, 47642, 62018, 6896, 62407, 31569, 4036, 19522, 50380, 292, 24392, 57141, 78868, 91111, 64605, 3837, 78805, 58039, 26540, 76093, 87679, 51766, 71046, 83529, 2851, 25916, 38631, 65815, 66331, 78973, 1341, 36696, 42621, 44991, 60578, 24700, 84161, 97603, 10619, 49821, 12068, 45229, 51476, 54691, 86507, 53556, 57615, 75370, 30912, 3416, 14033, 82026, 61384, 43240, 33162, 68494, 95610, 70059, 93165, 98540, 64413, 14001, 50947, 82891, 11878, 18483, 80079, 44228, 57727, 49121, 77010, 50494, 76577, 50478, 46328, 92788, 25315, 95917, 44367, 23873, 20470, 25071, 95072, 52937, 71905, 6087, 84781, 22031, 27329, 89552, 24460, 83822, 65860, 12233, 19046, 34069, 48452, 94185, 10809, 55366, 88910, 53972, 29020, 50842, 97295, 49835, 60396, 57408, 20595, 86821, 11302, 72636, 2993, 72974, 62020, 48868, 90459, 87443, 74804, 90654, 56703, 34006, 15829, 46087, 10806, 98689, 814, 4681, 27248, 43449, 92653, 3314, 70291, 26049, 44074, 74354, 52021, 4155, 7224, 94628, 84504, 79342, 21355, 40581, 5607, 16186, 86356, 31642, 66367, 57386, 44302, 30090, 43474, 66347, 42259, 87536, 80412, 18158, 95860, 98126, 61318, 49701, 37366, 23933, 29201, 2408, 82965, 36393, 17085, 21711, 34900, 5364, 66354, 19675, 36378, 19631, 15235, 26707, 97456, 12883, 78980, 77429, 11439, 74374, 30390, 56620, 82069, 31916, 93858, 91218, 75385, 27029, 57215, 82069, 88514, 82501, 95170, 47892, 27458, 37006, 82495, 16736, 58679, 10109, 33214, 20917, 64873, 56934, 57785, 89428, 3277, 59062, 39795, 59133, 20760, 94820, 26480, 47904, 57710, 96988, 41977, 10731, 59434, 13343, 45667, 65794, 4756, 75660, 32875, 40468, 47554, 53265, 63697, 81661, 9894, 23445, 46206, 95115, 8518, 66959, 69074, 36757, 80950, 46610, 4066, 74353, 22364, 31261, 88954, 2519, 32128, 695, 35990, 80362, 64616, 93018, 14300, 56074, 11417, 89892, 90612, 42514, 19303, 48310, 75967, 197, 95532, 67292, 77960, 8635, 91316, 70147, 94582, 68204, 75002, 15865, 24910, 21695, 47842, 51807, 22204, 15999, 204, 94981, 68507, 70050, 40989, 63537, 66103, 2284, 34732, 2374, 86365, 60850, 73784, 21613, 89290, 70824, 96021, 77414, 51289, 56524, 627, 87663, 52450, 3179, 22133, 32661, 33553, 12462, 32945, 48291, 53322, 38611, 3588, 32820, 90708, 57676, 20794, 94444, 35817, 85126, 43217, 98095, 87134, 63968, 31944, 93937, 73618, 21301, 3771, 9989, 29991, 38256, 82918, 19381, 15292, 56930, 10934, 99489, 89359, 18357, 30453, 32675, 36405, 9466, 37078, 62966, 15454, 47892, 47901, 77298, 24466, 86479, 50663, 72457, 60199, 86371, 25943, 82029, 517, 41963, 82416, 89317, 34735, 95226, 12427, 82929, 20047, 48952, 1017, 74803, 5977, 57563, 80625, 21704, 63821, 88811, 73999, 66913, 35441, 54058, 53601, 68319, 36310, 65105, 19821, 2977, 44784, 68758, 23290, 6858, 42337, 52975, 64767, 12828, 47695, 71303, 30737, 2032, 38766, 99952, 10513, 66946, 21720, 7767, 41821, 98505, 71701, 91216, 71549, 8197, 94621, 88459, 30795, 48402, 18843, 16002, 62016, 79593, 68200, 93974, 79523, 67562, 73274, 47209, 17524, 12762, 10725, 82619, 76963, 51349, 62670, 72958, 792, 66318, 70274, 26998, 54376, 4269, 21059, 48247, 81097, 2562, 48490, 12094, 71690, 34360, 4672, 60927, 49867, 85483, 50376, 3128, 26843, 17329, 78508, 99734, 41911, 3819, 88532, 7651, 44107, 94912, 32949, 26476, 72913, 14121, 37688, 88370, 26994, 2837, 63175, 37238, 59074, 45701, 94422, 51314, 11692, 49964, 50264, 68492, 87784, 18017, 80175, 22920, 63078, 19838, 77079, 76355, 8461, 67636, 17809, 98637, 59396, 11203, 91036, 73205, 27191, 83318, 39044, 93133, 19193, 44891, 25645, 13365, 62709, 53792, 43997, 89038, 36569, 11844, 77166, 62842, 35682, 99923, 20307, 34548, 68684, 70148, 44603, 82677, 42932, 34165, 32911, 59164, 34533, 29576, 55779, 33963, 38828, 51643, 52804, 94681, 72436, 6650, 79138, 16608, 5479, 47562, 73529, 63606, 44907, 45405, 64678, 65553, 9061, 84847, 13068, 22696, 11267, 83938, 34555, 93652, 25958, 86479, 17464, 29044, 87972, 66853, 16696, 17182, 65153, 88352, 38262, 45333, 88140, 55534, 19393, 61734, 25054, 15170, 91273, 97269, 72640, 25044, 50913, 58165, 26080, 24752, 86294, 26, 83581, 47367, 71071, 75047, 25423, 83293, 74700, 80199, 39169, 10335, 45043, 4261, 68724, 21772, 40067, 77061, 65921, 76057, 86165, 68031, 9121, 55696, 62280, 74661, 35552, 43236, 66694, 54726, 68142, 77167, 59897, 92377, 69707, 39652, 11044, 65261, 38446, 34922, 36123, 54245, 77964, 76027, 82620, 75195, 36433, 91776, 16650, 30628, 18054, 17586, 68257, 26831, 15505, 77941, 19921, 80829, 86449, 20558, 88763, 75565, 41943, 41836, 65398, 98427, 41949, 93759, 93065, 20570, 26801, 99945, 77026, 47833, 38152, 95338, 90184, 70578, 70429, 23895, 19395, 79518, 82172, 25105, 9241, 79161, 76245, 160, 48783, 75672, 67132, 81166, 60860, 87636, 16214, 80120, 29104, 85761, 22488, 56798, 72061, 20941, 36044, 54702, 56903, 88696, 24187, 30643, 83689, 73015, 38298, 48666, 71872, 79879, 41696, 90082, 68248, 73208, 437, 19345, 11807, 56661, 53086, 34225, 77913, 56992, 1009, 47494, 20250, 12557, 14841, 40858, 9908, 33134, 86357, 47456, 25335, 40372, 56136, 76005, 23612, 91171, 61141, 21796, 25032, 46564, 83515, 25044, 81632, 51067, 81496, 69250, 5772, 26215, 29555, 19059, 50726, 94957, 45475, 22542, 9826, 70675, 19857, 31909, 8968, 79950, 87387, 510, 41293, 50780, 5467, 49365, 24348, 87593, 35560, 43868, 63461, 20180, 60504, 15280, 69117, 99007, 96660, 9210, 52661, 91384, 11031, 33476, 32248, 60748, 65493, 68654, 41228, 88837, 84374, 11813, 63504, 78119, 46438, 71605, 53076, 48519, 21219, 75450, 89906, 88228, 78355, 53076, 7913, 1155, 93569, 69512, 722, 90889, 24055, 38866, 3111, 92090, 26636, 47511, 36559, 53767, 6734, 40728, 5270, 42097, 13423, 52840, 42247, 41824, 98644, 50810, 67978, 97055, 65986, 16349, 42242, 59337, 64680, 60680, 14522, 2734, 7014, 4087, 18281, 20580, 78188, 59693, 64346, 69122, 91219, 80374, 37399, 48171, 14829, 44816, 42297, 14189, 6311, 9677, 43842, 68352, 40342, 36235, 80411, 52577, 90629, 15381, 41375, 95910, 64459, 3506, 48578, 87768, 22958, 33753, 58656, 38579, 62241, 11978, 13792, 6132, 75409, 97139, 41851, 35774, 41468, 3954, 89719, 83704, 81120, 99342, 48728, 39047, 67427, 89824, 60891, 3068, 40075, 90463, 96978, 90207, 99892, 42184, 10800, 63595, 25714, 73189, 33456, 23847, 98328, 49830, 93586, 87888, 33761, 47470, 26221, 64094, 74559, 84263, 77641, 79218, 66828, 70260, 84513, 57110, 15244, 48049, 74182, 38745, 13685, 91200, 72370, 43150, 59890, 39958, 61058, 95230, 30034, 41539, 66975, 68471, 53188, 93862, 91519, 2556, 30720, 46039, 61018, 77463, 52774, 51088, 4524, 62751, 37866, 83494, 24894, 23686, 38824, 29000, 52685, 5963, 94037, 32809, 90054, 26397, 48838, 62273, 3896, 7787, 84054, 34309, 96831, 99033, 89841, 22564, 1304, 65798, 32459, 91994, 83588, 41395, 71722, 29676, 19913, 66520, 84530, 26232, 49672, 67690, 14529, 75624, 66524, 90849, 67309, 98678, 68792, 62846, 467, 65147, 48309, 41855, 4470, 76100, 158, 66311, 3313, 35752, 26526, 52236, 40999, 96642, 24335, 15871, 29713, 52771, 6386, 35998, 24885, 95320, 72285, 53451, 95971, 7964, 95855, 25733, 85112, 77620, 64561, 91476, 8067, 84368, 64094, 80400, 70849, 93733, 44820, 46553, 33716, 80252, 48751, 77397, 76351, 34456, 29193, 95623, 69613, 79513, 45066, 88726, 27964, 27851, 63797, 68692, 48074, 36448, 14794, 69412, 6595, 18607, 37096, 9062, 54184, 89470, 18802, 88830, 23276, 60762, 14524, 42051, 17679, 81825, 7094, 76171, 98554, 96265, 27606, 39677, 85983, 98969, 77523, 66606, 66212, 21830, 44642, 22594, 23989, 70018, 76694, 41470, 64209, 84535, 10678, 23354, 62803, 21426, 89041, 25015, 39446, 59097, 63492, 40852, 69892, 16230, 30931, 69958, 96847, 40565, 52223, 10371, 20298, 52853, 58083, 60291, 94238, 28692, 40362, 18667, 2712, 29479, 67279, 54769, 2535, 30867, 34837, 56853, 30442, 25955, 93059, 91493, 23342, 36565, 18007, 85732, 63977, 16809, 96274, 98852, 16041, 90215, 19086, 38336, 11765, 65228, 63148, 19568, 89854, 44844, 83937, 96395, 54960, 28394, 22747, 59320, 99267, 88272, 22282, 49161, 44810, 29945, 90495, 9484, 54511, 67363, 51499, 4325, 15161, 65809, 17546, 84652, 17448, 96429, 43143, 776, 2583, 80428, 67223, 28306, 84991, 30787, 60598, 23120, 8511, 96283, 8897, 64672, 23374, 1171, 47177, 94572, 48580, 88118, 33703, 32026, 15922, 88771, 47232, 19415, 10342, 84469, 2011, 26725, 10337, 22556, 52702, 56663, 46953, 74963, 80749, 34469, 74673, 64498, 38452, 44975, 59811, 97411, 23060, 6302, 40858, 88912, 28949, 14765, 82337, 92476, 7328, 4533, 51001, 95866, 67877, 12716, 8700, 40138, 74279, 29962, 8906, 97567, 84439, 86448, 50131, 59944, 62983, 61253, 55397, 91153, 87273, 43460, 96063, 95188, 1012, 19401, 36150, 5435, 70714, 8032, 10589, 3500, 65271, 49690, 69694, 69884, 10235, 54519, 28885, 71096, 59726, 27505, 79223, 76587, 9130, 5294, 96519, 80247, 2707, 49476, 12385, 98683, 74783, 58180, 39400, 44923, 5290, 87706, 17593, 55624, 79192, 25555, 70173, 27431, 81790, 4216, 83191, 8044, 46859, 59537, 83217, 47894, 59512, 49345, 20565, 99103, 34918, 8530, 34270, 82302, 93972, 41872, 1072, 9712, 93709, 84677, 53794, 9788, 48952, 46063, 6805, 8701, 95950, 1730, 40712, 52533, 56746, 74816, 70168, 35137, 43587, 5467, 43192, 95457, 25776, 65440, 10540, 8216, 5118, 69882, 18391, 66803, 54540, 83295, 69975, 23381, 74850, 18307, 20783, 96763, 47907, 41141, 59877, 57219, 46179, 81596, 25893, 22909, 9288, 31468, 12258, 88615, 86240, 29485, 23630, 94543, 42445, 31083, 88646, 76336, 28317, 57082, 69196, 43663, 27580, 61818, 26751, 87331, 15188, 27127, 55144, 49284, 4353, 38837, 45462, 16148, 45920, 21554, 65742, 48937, 72348, 85300, 80606, 35250, 90721, 28110, 90666, 74310, 32011, 14794, 93865, 17510, 8959, 59907, 75047, 55404, 23696, 2226, 21626, 87176, 77614, 56298, 59431, 92588, 45816, 30063, 67847, 18992, 25681, 70423, 76171, 13179, 35350, 33923, 37064, 78775, 25711, 42601, 14461, 22384, 99103, 52931, 32594, 4522, 74171, 7365, 87728, 17461, 42769, 20659, 95758, 74938, 61577, 16697, 87667, 73949, 81736, 25417, 62911, 57787, 83509, 40095, 11116, 88506, 35697, 55405, 39430, 91889, 92197, 34982, 13748, 56878, 57885, 28319, 4278, 14970, 28594, 58324, 79756, 6405, 16166, 59401, 62580, 45100, 24851, 88498, 16124, 21010, 18404, 48719, 57032, 56039, 41134, 39363, 80960, 38598, 53092, 65907, 19878, 9687, 87667, 50456, 98557, 52290, 76887, 34166, 14865, 56925, 67649, 16613, 3148, 72599, 62869, 86645, 44302, 44193, 17021, 44819, 80469, 17342, 63946, 88962, 48678, 59518, 84181, 77508, 97634, 16274, 87175, 58310, 86549, 72975, 5654, 20659, 10052, 12638, 73506, 10195, 81663, 21300, 76501, 1981, 92454, 95135, 63458, 37270, 3868, 95735, 86840, 43846, 70024, 60651, 52083, 9454, 20155, 57026, 2386, 14274, 79506, 81054, 69373, 71848, 23425, 4527, 91498, 859, 43168, 89257, 85336, 65855, 55080, 6197, 63721, 71276, 11700, 46478, 53681, 65243, 15039, 62079, 44608, 30024, 82416, 44955, 61501, 98956, 45388, 27656, 51459, 17000, 53169, 71717, 86653, 72169, 33594, 19779, 32422, 44337, 30455, 89670, 32970, 10022, 14754, 84297, 68797, 10773, 20131, 93007, 27894, 71870, 44968, 25345, 2613, 37174, 79953, 53948, 28180, 59665, 53469, 85140, 6084, 69648, 79259, 94494, 88385, 53682, 23110, 44856, 7187, 66913, 19012, 66597, 72159, 8131, 96224, 60310, 60018, 36055, 19039, 18327, 60897, 11664, 80682, 54231, 98545, 62252, 88868, 59016, 42180, 76407, 51797, 99353, 41662, 12844, 9139, 71938, 44335, 60143, 88875, 39574, 27235, 10339, 77131, 25302, 27287, 56092, 60475, 73792, 69879, 84676, 22252, 58172, 29164, 41426, 52425, 47572, 59588, 29404, 3655, 12724, 17959, 73420, 85489, 64321, 73807, 26744, 37150, 33937, 10657, 51853, 58878, 20873, 40192, 27748, 69459, 64905, 91096, 91954, 26438, 28964, 25228, 565, 14131, 94201, 26026, 10965, 52550, 87858, 8889, 38667, 26728, 48406, 73852, 72250, 57381, 11233, 35411, 15202, 26158, 37189, 48440, 92710, 92342, 2632, 50522, 77756, 77047, 24119, 35828, 84057, 87201, 98322, 37912, 3493, 10034, 95547, 1679, 23440, 45403, 92496, 26317, 76705, 331, 70079, 191, 47527, 5443, 25552, 92717, 75552, 61831, 33225, 7824, 49015, 61973, 97401, 36392, 77996, 23754, 5277, 59732, 49958, 98229, 57328, 81624, 4512, 7520, 59763, 15112, 70372, 49006, 54671, 53248, 19597, 71790, 61067, 93794, 8500, 23823, 54276, 11817, 63538, 37056, 6629, 75776, 14779, 94873, 29725, 44088, 50096, 92906, 54567, 42702, 68145, 87710, 55973, 87496, 53565, 59446, 67166, 19979, 80577, 38741, 98310, 87593, 89695, 45400, 74602, 4525, 43102, 92140, 10309, 63556, 75412, 81876, 75120, 53396, 26320, 75421, 20993, 1223, 76835, 52512, 84388, 49030, 25507, 35513, 87094, 89037, 47536, 65097, 60972, 33211, 99855, 84774, 66683, 11644, 3811, 34990, 16818, 75685, 14218, 68963, 99372, 29653, 17076, 80247, 44730, 51587, 17621, 13769, 15680, 59072, 27101, 42537, 82470, 37573, 87477, 35801, 38053, 82506, 92960, 11906, 86171, 59829, 47107, 66079, 73945, 7949, 57506, 77326, 77311, 43177, 54332, 12536, 49389, 47231, 7683, 39445, 35637, 98749, 23279, 59647, 4874, 4169, 53136, 50959, 85482, 30137, 18601, 92782, 36005, 43700, 51355, 63173, 30061, 38481, 91928, 28153, 26289, 2184, 825, 48144, 21130, 76584, 98653, 85768, 60604, 1417, 62986, 9331, 31669, 61231, 40798, 14914, 132, 46395, 70462, 38329, 94801, 50847, 1288, 96515, 21417, 76351, 19374, 73705, 63970, 92525, 45050, 57245, 43526, 50004, 79236, 75796, 15163, 16308, 88054, 62677, 65147, 72447, 96329, 64230, 82347, 76826, 40314, 58493, 21963, 32399, 42446, 61795, 63607, 71391, 52701, 93604, 16927, 66275, 1968, 67563, 58308, 13606, 62873, 2121, 67502, 3063, 92758, 15025, 27393, 39559, 23788, 9469, 76780, 79425, 33139, 38928, 79555, 92250, 39331, 49738, 31654, 37711, 47223, 20303, 94952, 39702, 48877, 7382, 78860, 63518, 68047, 27344, 96979, 66246, 32109, 2190, 83344, 2090, 74134, 93535, 79235, 29691, 64005, 16859, 86755, 90762, 94796, 7416, 37479, 61313, 68637, 4336, 99275, 26720, 10682, 14615, 28794, 69748, 19162, 20822, 21452, 23500, 57805, 69696, 94788, 16593, 87297, 89831, 52036, 22261, 30558, 51811, 60232, 55682, 49647, 25022, 55629, 35733, 64441, 96991, 57521, 82332, 6401, 30115, 97831, 71997, 15053, 22432, 65733, 11902, 28433, 17183, 16319, 892, 5291, 76295, 24896, 55098, 17478, 55838, 19734, 93516, 97345, 49769, 60859, 95383, 5769, 49392, 12752, 34531, 29897, 27831, 40936, 59011, 82562, 10481, 24808, 20599, 65190, 76344, 76878, 83609, 93298, 62016, 44268, 57841, 47310, 3100, 10387, 8844, 20425, 48181, 41261, 96572, 62319, 14707, 83202, 89416, 65249, 18114, 42208, 25747, 61369, 5453, 72671, 84501, 17255, 31770, 75508, 86492, 62377, 59758, 61396, 25750, 90048, 23671, 28684, 18634, 4269, 72880, 83093, 70770, 76087, 55060, 48983, 55464, 62057, 34186, 18460, 88677, 37203, 1247, 38482, 11115, 43416, 87272, 93604, 59040, 86527, 65784, 16532, 91477, 77013, 75187, 17596, 31848, 34474, 76675, 22184, 15672, 64837, 32948, 73815, 17744, 12693, 16516, 42876, 20681, 82850, 4565, 10753, 51688, 30760, 8604, 14714, 96139, 98923, 52429, 49811, 45189, 15690, 48130, 94338, 22449, 52637, 87896, 98463, 68282, 7413, 8365, 1166, 76823, 73641, 28798, 92684, 56244, 7562, 43198, 55630, 25486, 44682, 21159, 57448, 31768, 19029, 87750, 27293, 835, 38516, 24516, 44228, 16268, 88304, 73722, 8104, 87344, 54057, 50278, 67515, 96662, 76812, 16862, 17688, 88201, 22940, 5230, 25075, 72881, 73572, 23538, 33911, 23449, 42916, 90276, 99590, 880, 25092, 66165, 45996, 77326, 84356, 7865, 52690, 8167, 81088, 25937, 19923, 69142, 47224, 42788, 23212, 70996, 72326, 6773, 56922, 76046, 11587, 18394, 22009, 67005, 90117, 15838, 41425, 83972, 85466, 20044, 46723, 37638, 2163, 79560, 90520, 47458, 86680, 80354, 55779, 51826, 60569, 36723, 5697, 47490, 3348, 3402, 90978, 90763, 23791, 91483, 51152, 24852, 97624, 5937, 83639, 91054, 82567, 37360, 91278, 19646, 96265, 7432, 32860, 57722, 63253, 34704, 78940, 7330, 3492, 74768, 27653, 88786, 83836, 72361, 99873, 70617, 30210, 89505, 6822, 61907, 98619, 44195, 72523, 59221, 28344, 31093, 28248, 72232, 14950, 75919, 60978, 79872, 74807, 13051, 98843, 68586, 43774, 12505, 66888, 79974, 80013, 58631, 29485, 76331, 30329, 10804, 52051, 80141, 83970, 32094, 53083, 74584, 78849, 61374, 82750, 86393, 27153, 480, 58010, 24309, 10307, 71023, 19560, 21093, 41306, 51220, 90477, 1719, 70697, 42745, 5068, 54685, 78377, 54958, 16591, 7447, 34588, 51363, 92721, 47955, 82842, 99817, 7081, 42979, 5904, 48020, 56893, 96248, 38217, 69832, 3208, 43334, 93782, 33302, 10273, 37829, 69527, 39593, 64660, 68474, 6988, 47387, 10900, 68892, 33277, 18857, 51553, 72606, 89457, 61732, 6190, 69382, 50379, 87094, 51728, 56107, 61094, 59199, 23555, 14312, 31921, 56486, 74732, 64816, 73966, 34430, 36357, 9598, 96981, 86493, 60022, 24750, 28806, 17077, 79413, 37728, 37154, 46077, 14774, 60817, 69271, 44215, 71564, 46710, 85989, 78476, 22816, 18433, 94308, 67465, 95263, 24490, 23992, 27277, 2474, 28836, 50835, 99909, 72915, 55810, 5574, 59847, 78721, 84179, 61331, 14324, 92519, 49927, 1203, 75874, 50506, 3910, 54595, 48537, 16706, 94903, 70789, 24103, 21480, 15769, 81503, 80835, 98784, 64176, 80527, 2839, 3508, 95125, 25558, 59567, 7793, 77127, 32402, 94097, 30686, 97619, 44845, 95575, 19400, 69863, 77488, 34243, 27263, 20252, 19948, 45179, 61987, 22627, 32588, 68720, 70865, 7011, 24851, 92898, 37375, 52875, 76690, 44551, 52726, 48443, 88866, 90334, 1803, 80139, 49264, 58017, 85415, 1507, 18570, 85834, 24341, 17069, 64156, 56608, 87077, 64612, 22099, 85536, 34499, 8314, 17983, 99685, 32757, 44744, 7441, 13935, 74341, 37651, 24784, 7929, 55576, 13387, 89623, 47902, 47855, 76798, 64634, 63951, 68582, 74621, 88961, 82868, 9626, 65356, 29188, 98300, 33610, 85536, 66035, 20563, 83213, 51771, 22122, 2659, 53776, 5479, 46160, 50697, 58226, 39944, 71168, 83949, 85071, 31387, 75879, 99439, 64623, 77164, 95823, 83227, 54775, 72607, 42053, 84114, 47049, 52361, 14611, 85765, 22049, 64439, 93874, 61681, 82316, 67699, 87858, 45234, 96294, 30562, 69714, 30082, 23101, 36716, 94345, 34663, 39421, 32759, 22577, 70139, 90064, 47275, 76173, 9570, 17431, 43598, 46928, 23007, 40284, 73952, 99686, 87874, 93315, 21548, 13473, 7790, 80824, 25432, 63711, 28872, 41968, 93508, 55303, 72155, 34698, 70673, 80200, 11157, 59244, 59512, 60936, 63603, 79417, 71729, 86169, 46740, 21676, 33639, 72853, 48366, 93896, 57836, 4993, 84781, 92073, 47453, 69658, 45529, 39725, 71334, 71061, 83298, 31836, 66922, 45316, 58825, 4391, 77863, 31098, 54696, 48551, 48703, 53161, 25365, 3708, 44288, 34831, 2537, 24138, 36868, 60863, 18703, 23480, 78041, 17166, 71240, 94232, 66056, 90031, 80013, 83245, 22231, 86729, 80275, 70145, 14754, 41729, 83188, 93993, 95830, 53572, 82394, 10233, 65215, 91878, 71573, 3335, 71251, 13283, 52549, 56098, 80093, 22737, 98428, 49104, 33311, 9138, 41650, 76561, 38750, 95588, 74721, 35402, 92104, 67381, 4774, 37894, 57986, 34556, 56023, 76111, 65560, 6925, 17690, 71492, 72023, 54655, 90403, 95906, 4242, 97536, 36723, 24250, 53840, 96299, 44116, 45421, 11579, 23165, 35680, 42367, 87457, 11110, 16751, 80922, 93177, 33746, 70093, 83205, 96723, 13971, 65492, 74148, 40168, 41823, 83449, 26570, 21325, 51102, 1020, 15232, 66723, 46141, 18238, 26634, 74534, 60119, 65572, 29715, 38536, 93786, 2744, 5167, 89758, 28961, 16961, 99610, 10174, 63772, 54452, 84421, 57052, 22471, 91237, 99810, 44523, 14749, 25891, 58296, 63895, 54196, 67428, 15046, 27614, 29023, 83390, 3687, 16245, 17436, 48865, 15814, 37435, 39534, 25973, 71077, 59517, 85057, 45093, 43398, 55110, 72832, 71683, 69176, 69424, 19175, 83039, 79229, 57434, 65239, 78771, 66109, 58483, 94789, 41629, 25063, 81909, 83112, 53240, 84007, 69525, 31603, 72200, 98477, 70991, 42503, 61380, 49193, 76864, 26506, 11183, 80947, 91100, 30871, 29983, 37215, 8965, 9832, 68726, 95752, 20487, 56140, 95595, 10917, 73156, 21550, 96906, 51724, 69773, 78108, 75608, 70316, 6662, 68354, 64859, 61755, 49834, 69657, 58309, 34588, 31008, 13292, 70613, 13834, 84350, 22992, 28229, 70489, 2056, 58042, 75627, 35220, 63658, 71485, 53196, 29853, 50199, 97349, 85027, 7467, 90420, 21627, 78022, 32444, 49847, 62305, 89058, 5823, 12654, 33416, 3036, 90599, 55709, 71167, 9094, 12095, 58219, 2188, 25321, 25939, 42557, 31139, 82663, 74872, 78815, 24229, 27686, 51730, 29081, 2999, 58488, 19160, 12785, 17215, 16256, 29188, 26307, 22990, 67151, 12009, 66602, 95615, 43726, 3898, 25290, 88312, 58026, 28842, 9716, 93855, 28561, 63712, 79205, 15082, 96836, 34348, 44169, 30420, 80171, 57256, 92276, 3005, 65435, 9100, 83805, 81111, 25117, 91398, 19192, 72775, 80770, 37074, 33210, 46925, 7829, 55782, 35503, 67429, 67870, 41398, 91526, 14961, 97359, 71115, 97294, 61332, 2287, 82825, 13948, 23528, 21555, 21325, 86627, 89293, 70188, 95863, 10387, 62009, 37526, 6553, 98881, 66136, 95575, 72125, 56744, 9791, 31952, 82419, 22917, 80940, 67646, 15069, 13382, 50650, 28437, 72625, 62770, 57609, 47837, 6272, 9240, 99621, 13167, 61654, 16666, 34411, 30174, 98820, 99468, 42572, 86015, 28072, 59949, 86238, 67218, 22961, 82299, 75317, 97843, 67587, 32811, 37646, 20566, 35584, 12002, 22681, 92205, 64400, 45583, 61259, 7207, 28547, 5919, 14164, 27681, 29084, 11782, 10500, 42047, 58403, 91157, 43845, 43491, 48636, 90875, 56768, 89060, 49778, 85179, 74866, 45355, 86148, 77417, 61078, 40143, 99909, 5099, 11573, 67443, 4871, 64367, 79928, 33560, 92398, 78878, 36173, 36422, 4740, 52828, 71388, 21243, 61982, 21940, 17940, 9727, 10968, 27660, 34659, 97269, 53567, 44991, 38715, 5630, 16474, 65367, 42420, 18736, 73206, 6420, 96726, 73015, 88414, 64930, 10140, 7595, 34926, 58189, 67679, 58655, 82979, 675, 37443, 19243, 44069, 65345, 82980, 68879, 80374, 48243, 14806, 60249, 77275, 21984, 65109, 20166, 59097, 35501, 68884, 49073, 25759, 1560, 95071, 99396, 3605, 3767, 56176, 6995, 25730, 43399, 33023, 84298, 11053, 31420, 41840, 74013, 25374, 27396, 31232, 53083, 26342, 13009, 59779, 25829, 85012, 63885, 50428, 82538, 81580, 93934, 31369, 49755, 39863, 90438, 89626, 27964, 16153, 22958, 99772, 44835, 60145, 10958, 75087, 87806, 40343, 30045, 66357, 92008, 49150, 85493, 20770, 72212, 85322, 39004, 56448, 89500, 39776, 96013, 49917, 30846, 53906, 42105, 54871, 88680, 19794, 65937, 63598, 99139, 70561, 19133, 58789, 95048, 60207, 51223, 27599, 85485, 14543, 6922, 51759, 96737, 96491, 36554, 45603, 76993, 28343, 39269, 92769, 12721, 50819, 57009, 35538, 42005, 79069, 75289, 21571, 63741, 47067, 77073, 83938, 94495, 19013, 4984, 45689, 87880, 95446, 78478, 79448, 31967, 10727, 81669, 17477, 22309, 50934, 7389, 80449, 6589, 45306, 67710, 98393, 16211, 25149, 56209, 45761, 68177, 32643, 41280, 18841, 68395, 68469, 21699, 27169, 58523, 46307, 16867, 35318, 70066, 76232, 65639, 51792, 68998, 74886, 91576, 71792, 57459, 18316, 21664, 62908, 24666, 85997, 92938, 34472, 8051, 63877, 76984, 17087, 4573, 82551, 49216, 71471, 38426, 25237, 40449, 98110, 49026, 3419, 25496, 29008, 92399, 87720, 8663, 80802, 13488, 49432, 31321, 38104, 24380, 90366, 3729, 21462, 11059, 22743, 49494, 54756, 26865, 51012, 88425, 34667, 75605, 20317, 98173, 49435, 53432, 70782, 20204, 73673, 65787, 23288, 13156, 97115, 97751, 19319, 94526, 48098, 22739, 4013, 7675, 46571, 69270, 15923, 34421, 18253, 27357, 60887, 11119, 8774, 16232, 57376, 98179, 38633, 99792, 63324, 91376, 66652, 33290, 8405, 52511, 99456, 81939, 4314, 64671, 81378, 75219, 80136, 6809, 48987, 48300, 22400, 77721, 87128, 76859, 52331, 59762, 65332, 17372, 69416, 47864, 41639, 92599, 205, 44506, 30867, 29809, 10846, 97290, 65392, 15471, 99920, 2718, 10393, 35769, 96168, 47221, 65522, 57981, 24548, 21229, 35384, 94886, 54586, 3695, 56663, 13135, 869, 10776, 75317, 94191, 89057, 81345, 72136, 89452, 74362, 67217, 95380, 46584, 81028, 6879, 80700, 98164, 27852, 14662, 34851, 48843, 50696, 63085, 73359, 58304, 43185, 92256, 14889, 86046, 94392, 72243, 37649, 49673, 3788, 85245, 3960, 53119, 78373, 15887, 43687, 40234, 45363, 4502, 41113, 27924, 90428, 42988, 55075, 72520, 54662, 94638, 36108, 29387, 69518, 30215, 62826, 38320, 80177, 77675, 74645, 85784, 12443, 71811, 6068, 81805, 94919, 89474, 32944, 20409, 44440, 98852, 84519, 58120, 56762, 90485, 18385, 36781, 41651, 53858, 83354, 13309, 60151, 9398, 66926, 11600, 11054, 68273, 67658, 10731, 94867, 48919, 16805, 92345, 64710, 74947, 99823, 79239, 21836, 87728, 76790, 12823, 238, 13275, 7714, 62910, 58102, 27169, 94385, 34673, 87963, 86951, 1954, 15675, 13595, 39514, 68826, 57908, 8535, 51511, 56610, 75173, 47349, 64084, 83200, 93221, 64524, 89293, 80783, 53944, 82507, 66639, 29144, 75407, 4755, 96333, 15428, 25517, 67807, 62331, 77412, 55127, 88021, 69716, 81932, 23169, 24393, 71381, 24610, 27507, 18476, 23636, 54612, 88503, 36609, 57374, 99517, 71667, 33749, 19726, 11860, 78210, 95858, 67296, 1262, 99971, 78888, 40280, 22277, 94130, 89571, 6863, 11061, 61749, 88903, 88208, 96653, 8129, 25583, 53271, 10848, 38919, 2624, 33410, 65185, 18890, 65522, 94622, 16279, 55904, 78305, 76886, 88286, 90847, 40001, 14344, 41045, 20593, 64187, 62396, 46027, 33469, 92020, 65535, 71144, 97551, 52375, 53432, 34461, 11537, 84219, 43137, 72669, 38829, 79569, 2408, 2087, 28914, 13791, 97482, 51107, 87611, 31519, 32074, 80110, 79835, 38988, 5571, 39123, 53002, 16186, 45954, 3525, 91709, 33627, 84451, 14024, 43108, 16680, 87107, 75220, 25304, 54711, 45486, 81579, 20080, 73553, 56286, 70948, 54582, 81090, 52130, 84627, 40532, 97376, 24746, 35230, 15779, 96651, 18647, 97083, 24928, 43996, 80917, 79609, 26065, 51784, 59364, 48881, 88244, 63878, 68284, 16483, 65963, 77816, 89455, 27369, 78048, 66422, 71852, 89087, 73332, 76304, 94914, 69047, 3686, 20977, 58607, 57754, 77958, 98381, 64469, 19353, 15648, 51501, 46073, 20724, 19140, 62520, 31994, 33334, 24274, 27163, 3009, 26905, 21175, 48823, 75543, 60663, 15814, 76586, 81524, 63640, 73770, 83523, 45125, 35262, 17521, 24094, 53972, 63342, 83484, 3174, 10412, 9807, 66575, 58984, 99294, 24094, 64080, 84497, 65047, 68273, 30924, 39987, 65599, 47494, 35193, 89896, 23350, 23136, 388, 61687, 86785, 46567, 6266, 41758, 16092, 60832, 93515, 57343, 97572, 48672, 89057, 63191, 54117, 98985, 50965, 98102, 36459, 98036, 43183, 99767, 69184, 19345, 83476, 8250, 3541, 46394, 31919, 63549, 96496, 26797, 30314, 35997, 25740, 26280, 10957, 61096, 65528, 26566, 91525, 29240, 98053, 86674, 95968, 58812, 22925, 8639, 98181, 24247, 7736, 4111, 52193, 54990, 56352, 91125, 98524, 54356, 3043, 49710, 97820, 48497, 22929, 83722, 98645, 82903, 79893, 3599, 97085, 57223, 60764, 84237, 89277, 16213, 13826, 48144, 81433, 17380, 85233, 23260, 65147, 49885, 50612, 90702, 2826, 48360, 83871, 50978, 90996, 41505, 83869, 38870, 21125, 35310, 77487, 14661, 66581, 64643, 93317, 51481, 71644, 59460, 37225, 51779, 5802, 69470, 45224, 91761, 35890, 96002, 53797, 68238, 5993, 65882, 82772, 32148, 70978, 18852, 55692, 7313, 77037, 82781, 92772, 81861, 31503, 94693, 63466, 26745, 19222, 48348, 28194, 7420, 8238, 3440, 8600, 13601, 44984, 62600, 42055, 47520, 14000, 93605, 47411, 20827, 97885, 77278, 57609, 82538, 63744, 90766, 11690, 87524, 4678, 16691, 52250, 94467, 74734, 4802, 42538, 4696, 17128, 234, 67665, 43673, 15266, 28310, 86458, 64431, 44781, 20524, 25537, 3540, 78408, 29890, 76437, 85277, 59224, 36973, 58178, 98037, 86453, 22324, 40429, 24655, 76470, 63963, 30301, 1835, 39881, 25815, 40661, 33679, 28814, 82988, 19105, 13034, 58582, 32806, 10731, 44204, 58322, 52386, 9472, 931, 35366, 17015, 97253, 47725, 67589, 13552, 85126, 45633, 41626, 63072, 51996, 75212, 66476, 28712, 30462, 18288, 64171, 52725, 45910, 29596, 21753, 30000, 15311, 93616, 65186, 4879, 79634, 31901, 94636, 55583, 34176, 44742, 41570, 6450, 61728, 98114, 16815, 84982, 52375, 26285, 24644, 89613, 86739, 89704, 84868, 67225, 34467, 66850, 75178, 49091, 71922, 74625, 40519, 33460, 75720, 1878, 91008, 43587, 73813, 31544, 62563, 61099, 48697, 10962, 14691, 61805, 85660, 2694, 98224, 86089, 33458, 78266, 75356, 82508, 40658, 91558, 43208, 49570, 5317, 18376, 80435, 8748, 8132, 32434, 87075, 24777, 10893, 56601, 92580, 84442, 6235, 36059, 2641, 31037, 41948, 74503, 36691, 17838, 82433, 19287, 22640, 11460, 73319, 85318, 90589, 41655, 32215, 5999, 45504, 28496, 63904, 66276, 18766, 99938, 52649, 89836, 5954, 70892, 95005, 22558, 9237, 16140, 33601, 53675, 43364, 25368, 78630, 81814, 81057, 87121, 52267, 94825, 77365, 34531, 6127, 92180, 28663, 54346, 79660, 20267, 35344, 87794, 75611, 50125, 20615, 50596, 14211, 71421, 33907, 45240, 63581, 18775, 87607, 69998, 80496, 36160, 5471, 22001, 81795, 61754, 91938, 7606, 40158, 56618, 33638, 86460, 45971, 80096, 66936, 37126, 74590, 41761, 12102, 86940, 78196, 72337, 58707, 55753, 64911, 36544, 9759, 54067, 85913, 16093, 19368, 58493, 3247, 7699, 92994, 75240, 85107, 58513, 81982, 95894, 39617, 45907, 91308, 34977, 89770, 27621, 92361, 52431, 12467, 30147, 69362, 75003, 99019, 31916, 51373, 88553, 81198, 35882, 78854, 83100, 32657, 41931, 74212, 93069, 16659, 71085, 77962, 73883, 39691, 92516, 46008, 61131, 67451, 57765, 98436, 74416, 79241, 38005, 96409, 35390, 72057, 42747, 57848, 67911, 78383, 17012, 30701, 71854, 77594, 19359, 29912, 47204, 81888, 78451, 65826, 73665, 73114, 52803, 35026, 44468, 66349, 61631, 89942, 27662, 40739, 86654, 59120, 61444, 79099, 79753, 37681, 82598, 27427, 52141, 49182, 28329, 67517, 88551, 17398, 79360, 68465, 66289, 62906, 31323, 98237, 56492, 19806, 56521, 43907, 38085, 98313, 25847, 58703, 73289, 32292, 50995, 44568, 97089, 8266, 27537, 21607, 32495, 30311, 96508, 71455, 93423, 50195, 45208, 93663, 7643, 2998, 49157, 67961, 60715, 55122, 58024, 45673, 40708, 65046, 76848, 14886, 11681, 8212, 51488, 89027, 38644, 63966, 47874, 48377, 13493, 22854, 30773, 2125, 92958, 8659, 70437, 43527, 54851, 29513, 46569, 32105, 92733, 23023, 15362, 80869, 56781, 9695, 30684, 18782, 68130, 93111, 57242, 76180, 40203, 72974, 89161, 52023, 17618, 74828, 68013, 16672, 91393, 35504, 3459, 16322, 83365, 77621, 17356, 69178, 49962, 89058, 18637, 11937, 4440, 88358, 26394, 89474, 38845, 89251, 79860, 76598, 66562, 14324, 30176, 40309, 76212, 62955, 75144, 62213, 44645, 47658, 32802, 80609, 34234, 81293, 81520, 73321, 91957, 7988, 17323, 73234, 18338, 31549, 29838, 67203, 12856, 55837, 77938, 72105, 65979, 13693, 92035, 8074, 26950, 42942, 4409, 74863, 37333, 10264, 91251, 36287, 88713, 95094, 29761, 62718, 80109, 58626, 35206, 32120, 16900, 87158, 94918, 94320, 84806, 62521, 22554, 32600, 53620, 98662, 93215, 71837, 671, 12437, 4991, 60910, 17041, 1075, 22106, 64654, 82435, 77092, 88161, 78018, 57719, 9265, 7765, 18824, 1407, 9683, 90108, 84376, 14868, 82824, 17181, 20136, 68375, 23245, 1472, 73905, 96730, 23563, 33659, 29246, 16635, 65576, 37266, 65379, 23534, 2271, 41002, 72268, 97739, 40832, 1140, 85432, 89836, 6498, 45869, 68656, 52330, 60756, 50764, 89857, 263, 62878, 31870, 74007, 59009, 30249, 87073, 697, 55023, 50380, 46311, 6445, 17721, 17825, 7601, 10779, 72314, 75902, 16618, 60836, 41345, 9062, 3522, 27298, 87317, 9822, 70719, 13184, 15239, 55760, 2346, 65714, 22391, 30269, 36020, 71717, 34434, 29927, 88525, 49955, 93628, 57258, 7353, 55244, 49548, 34166, 48908, 52357, 43514, 54778, 10670, 15835, 55359, 68497, 8292, 40749, 26458, 20601, 49682, 10654, 90335, 63973, 5010, 61704, 92421, 49478, 33632, 17599, 20059, 6689, 77558, 97968, 84117, 2132, 31266, 43952, 60368, 52516, 71973, 62983, 32668, 63851, 93022, 17421, 46961, 76078, 58932, 56115, 82455, 118, 5425, 70282, 26403, 43955, 10307, 59333, 2544, 90942, 21005, 66968, 57964, 42192, 10780, 38654, 78083, 22309, 12571, 57162, 28889, 39191, 32062, 64765, 75204, 54386, 49205, 52357, 88206, 99953, 59168, 13601, 45806, 42317, 63487, 53383, 31915, 25917, 94843, 31652, 92012, 87468, 63484, 87368, 64718, 92326, 25516, 33073, 5129, 32578, 55360, 53506, 58421, 50916, 33322, 68246, 15787, 28652, 71684, 75705, 63059, 64321, 68448, 30143, 24294, 36660, 71182, 44207, 53664, 63574, 72753, 61504, 88796, 16149, 77850, 25135, 74017, 70530, 66235, 67252, 97122, 75654, 34996, 743, 86770, 97714, 74430, 87667, 6071, 6188, 35736, 44870, 79760, 77015, 56341, 37464, 85044, 24621, 98544, 33568, 95742, 72606, 26322, 12512, 78812, 11720, 2349, 4408, 11335, 63325, 72041, 7652, 93033, 42765, 66598, 3855, 90492, 24095, 90979, 31035, 11111, 76014, 62403, 54178, 44895, 67120, 60995, 83839, 67461, 41037, 38266, 80737, 61867, 24224, 5019, 33748, 41313, 74026, 19458, 7606, 1582, 38437, 65534, 42666, 28237, 83628, 44916, 75992, 81994, 68135, 25583, 72263, 28989, 23158, 3095, 45551, 60411, 86149, 48633, 62567, 78130, 14205, 98002, 68246, 37586, 54022, 97945, 9436, 26310, 69408, 8372, 284, 36000, 26434, 43900, 19303, 19536, 81555, 97664, 88888, 10706, 47263, 36129, 66351, 60848, 94592, 40783, 13083, 71507, 83530, 61478, 6046, 59048, 93538, 40197, 25704, 11513, 34051, 8209, 72668, 80825, 67618, 54594, 41673, 28125, 23946, 55205, 4511, 90775, 70178, 41020, 23824, 85708, 65235, 20856, 81694, 2658, 18260, 41821, 93802, 59772, 34894, 12613, 49759, 21922, 96552, 83526, 86342, 11182, 33524, 8020, 37621, 29189, 66089, 69873, 8104, 86666, 16905, 53780, 92912, 75045, 310, 17353, 89027, 54158, 914, 33169, 36444, 17508, 99687, 47316, 52872, 55927, 43121, 70936, 68184, 31029, 63920, 20518, 46604, 74502, 79660, 29938, 9621, 15534, 79964, 76119, 40763, 50370, 42628, 80921, 38649, 16817, 56582, 8440, 94283, 62252, 45296, 84492, 45096, 52384, 35751, 22891, 67794, 8683, 31448, 65214, 58746, 40780, 48518, 51950, 53837, 56121, 78469, 92783, 16919, 89471, 38018, 10019, 80400, 47070, 16087, 88338, 2225, 81097, 45110, 50010, 67417, 49238, 29577, 60008, 19259, 41082, 9416, 53205, 99036, 62558, 3799, 77399, 60571, 88450, 61973, 29354, 87416, 93370, 79302, 3992, 37232, 6643, 76070, 97733, 74989, 51761, 31538, 48748, 52760, 24677, 50229, 94777, 64979, 93114, 27236, 98448, 97260, 52550, 62095, 51190, 613, 94180, 42897, 27056, 22728, 1169, 1545, 93021, 20784, 84687, 40743, 83201, 64975, 17704, 59210, 67660, 98512, 25256, 97589, 24164, 63677, 8246, 4465, 22875, 37795, 17093, 80189, 3125, 74296, 54700, 35471, 86522, 39428, 14850, 91216, 92125, 80701, 35929, 29332, 98264, 45944, 60171, 48544, 95140, 98776, 35976, 690, 52289, 7325, 64402, 21964, 47000, 45677, 91574, 61493, 37617, 71535, 39770, 85309, 37356, 21399, 42733, 4701, 5683, 3624, 93595, 3279, 61376, 44549, 20924, 13887, 60303, 20856, 48248, 70704, 74186, 87436, 31104, 74759, 84211, 28813, 52443, 22547, 16593, 50122, 4737, 37024, 51351, 54595, 79441, 90224, 58021, 77416, 77189, 58771, 57073, 59163, 68582, 9384, 26269, 61189, 78710, 44899, 67539, 62541, 4374, 75768, 75503, 17378, 17782, 63188, 86237, 17312, 85960, 51098, 1028, 82706, 52373, 41230, 64343, 98413, 7756, 59205, 46842, 88710, 18112, 21140, 32366, 71347, 83269, 43923, 3067, 30585, 48698, 33985, 27501, 85402, 36559, 86606, 46643, 61998, 66744, 42634, 76733, 72229, 60151, 2002, 33898, 2023, 61456, 11978, 8279, 6942, 1749, 7038, 50538, 23304, 84764, 42096, 56322, 8912, 96375, 72688, 412, 63621, 96369, 48456, 41339, 35353, 71191, 87338, 44161, 98861, 47572, 44751, 17583, 31104, 6760, 40729, 48551, 6977, 41489, 49528, 26404, 25253, 13574, 57832, 22431, 83504, 17492, 99905, 81363, 89875, 33946, 80783, 93035, 81522, 84981, 27761, 13201, 63632, 82867, 97361, 14418, 35001, 11256, 47716, 77436, 34084, 10771, 3991, 18842, 62171, 61697, 43043, 51161, 61798, 17781, 86365, 58231, 47620, 52798, 58015, 19562, 13907, 20685, 47728, 93947, 87161, 22525, 68384, 42980, 74447, 79482, 69581, 31444, 71752, 57143, 45580, 28989, 46237, 30003, 65715, 24775, 20952, 25621, 1027, 3742, 70846, 67698, 95260, 96199, 1624, 9846, 36800, 64863, 35684, 19464, 46073, 8712, 86868, 63049, 57139, 23105, 58756, 11594, 59815, 48764, 58859, 92339, 10052, 3693, 30957, 56031, 46826, 52481, 76052, 74615, 49684, 94616, 47814, 4853, 3491, 22336, 68093, 72331, 71344, 42396, 82518, 97945, 6730, 3138, 38492, 807, 79830, 39478, 97980, 83410, 19858, 1672, 16136, 81624, 24118, 78886, 98745, 67530, 7172, 4003, 89184, 44766, 5946, 18591, 67804, 95295, 61874, 62239, 57576, 14147, 96423, 46150, 22324, 61492, 25895, 5090, 80283, 80182, 46022, 42737, 94319, 22253, 90605, 99611, 32501, 0, 86408, 68682, 31208, 63579, 21258, 30167, 19908, 54832, 38027, 49844, 21642, 22539, 51220, 3759, 6664, 26460, 12803, 32025, 36059, 13580, 68685, 1797, 83435, 93416, 7991, 79304, 41993, 42455, 27864, 79197, 25537, 27868, 28045, 86879, 79555, 79540, 18274, 84498, 50215, 67727, 60989, 31647, 85439, 61546, 94536, 92484, 16392, 34619, 89974, 14695, 20381, 17885, 75791, 85845, 97894, 67003, 59082, 74384, 55660, 82933, 13915, 87037, 98965, 54648, 24126, 79772, 8022, 60260, 59476, 80260, 25034, 18596, 1948, 67348, 42713, 84139, 12736, 71212, 87625, 31345, 8806, 18564, 62375, 86608, 49649, 56935, 62741, 50319, 38901, 83246, 38796, 62710, 83606, 23709, 73161, 85854, 87700, 1339, 37957, 36056, 64681, 63173, 30979, 71230, 18115, 65472, 30312, 72273, 8601, 12620, 71711, 65709, 5219, 15483, 40698, 57549, 76706, 94496, 82558, 36759, 48202, 80095, 54947, 88543, 19099, 63229, 64246, 21465, 43694, 93936, 78631, 84927, 73219, 28787, 51840, 29401, 58518, 83148, 58114, 94949, 76742, 24572, 33784, 51844, 96060, 88344, 16275, 65413, 40505, 9798, 73791, 9005, 7255, 63851, 18305, 5777, 15674, 56316, 85500, 45776, 40377, 58750, 52087, 34363, 86621, 11892, 80818, 91793, 27357, 45601, 37065, 1647, 26976, 95419, 6387, 5373, 42328, 12659, 34067, 2712, 12312, 4316, 40827, 54202, 47066, 12992, 73913, 21679, 3298, 5080, 34588, 43652, 47333, 22918, 75934, 42247, 69145, 65356, 25952, 22440, 32793, 14773, 35363, 12288, 63859, 84090, 96842, 78679, 20245, 5239, 26365, 83427, 44113, 77242, 39379, 63037, 93171, 36816, 34624, 97504, 75683, 84271, 33256, 86837, 11178, 43182, 65549, 43446, 36551, 42958, 22188, 39851, 14918, 97375, 90007, 29032, 64959, 52884, 38910, 13611, 95842, 49177, 47285, 28899, 83203, 36641, 5196, 93178, 12784, 65000, 85238, 88817, 9982, 21135, 77938, 82065, 4387, 38340, 20810, 14328, 63237, 51128, 78536, 88851, 2279, 53449, 27729, 99994, 72486, 74011, 48930, 90921, 55636, 86027, 14274, 56957, 16222, 27480, 58460, 27786, 17975, 24951, 28481, 147, 770, 44932, 2851, 47053, 67707, 32150, 56019, 93276, 38862, 50191, 65746, 14984, 35796, 13362, 17876, 49507, 77330, 14133, 88939, 81821, 3545, 8578, 67904, 40534, 94484, 38230, 98313, 26596, 50470, 82219, 78467, 69587, 91974, 38825, 54637, 20346, 75455, 12701, 17522, 72726, 34872, 98335, 56807, 48907, 88436, 61149, 21662, 79878, 1766, 43296, 5812, 20502, 92757, 14531, 81937, 91802, 79889, 71356, 70060, 1727, 6783, 67051, 869, 68269, 50185, 11493, 81685, 25905, 77679, 46826, 61139, 62957, 15425, 68810, 90235, 53954, 1310, 6429, 71891, 71423, 93512, 21350, 36281, 98267, 84796, 10211, 45364, 94375, 63483, 44825, 69246, 66640, 14791, 44611, 90022, 27104, 4368, 70619, 59015, 69605, 32415, 38951, 8704, 78456, 91650, 948, 70955, 45472, 24840, 44032, 99396, 31938, 99318, 16076, 80835, 74287, 67614, 98236, 59609, 25168, 8120, 45346, 19982, 84703, 60698, 57679, 63365, 55732, 26636, 34345, 53084, 72512, 60380, 67741, 51561, 51490, 80514, 48496, 98362, 28108, 1041, 49243, 45277, 62490, 34891, 92422, 97088, 84705, 45793, 49471, 79770, 85690, 3217, 90908, 73726, 23669, 54, 81415, 20667, 42581, 35835, 11662, 3426, 76465, 53255, 78544, 71029, 5926, 11049, 23960, 18749, 12348, 39042, 81308, 64910, 83321, 39585, 40191, 43863, 56175, 97113, 45537, 83957, 51181, 25949, 57460, 93205, 1250, 4227, 84050, 87572, 6968, 32622, 7801, 98667, 67773, 15827, 93780, 13741, 52804, 48274, 5630, 20770, 89675, 37336, 55143, 60153, 18563, 13588, 97589, 40080, 97959, 73141, 73498, 13705, 4653, 99903, 94038, 38040, 59646, 18707, 50177, 45070, 47224, 17766, 68270, 82892, 82538, 12385, 28559, 42984, 75118, 7406, 3603, 91097, 52632, 19343, 64239, 73032, 89253, 67596, 15466, 72328, 8514, 25431, 87364, 9165, 40431, 75417, 92782, 46508, 94885, 47002, 75463, 96347, 17543, 66166, 87742, 27103, 73623, 41072, 54962, 55916, 2130, 46272, 21836, 74734, 17606, 41436, 24027, 65647, 11814, 56199, 25308, 81668, 48873, 50907, 71230, 37348, 16533, 12349, 57380, 61384, 68695, 44021, 43163, 37851, 51759, 83554, 44652, 12581, 60281, 35566, 89664, 11462, 3821, 43093, 88621, 6158, 73878, 95284, 62025, 43017, 68039, 12238, 34622, 66251, 83546, 46067, 69730, 2125, 8278, 18370, 91017, 81679, 92406, 86971, 78089, 78221, 52085, 69660, 5388, 2690, 27682, 20683, 55345, 26468, 54245, 47198, 76241, 18298, 89550, 9521, 50155, 91214, 75331, 30522, 42365, 9591, 8424, 62073, 8407, 99447, 20975, 84807, 23983, 55533, 28124, 47150, 66605, 89604, 4251, 93692, 65643, 70865, 69645, 15325, 75206, 11255, 35975, 91389, 83102, 98529, 72398, 29754, 55596, 76444, 39897, 86376, 82930, 77147, 66179, 39340, 20604, 59679, 83172, 82430, 35928, 24650, 30163, 37804, 18785, 29199, 92199, 67711, 5028, 84916, 26262, 78641, 17699, 76089, 78212, 28720, 3484, 54500, 99554, 98111, 29645, 83443, 24693, 24736, 84563, 40892, 96760, 70058, 17653, 49257, 50012, 32894, 56997, 13592, 5240, 61071, 57862, 82020, 56013, 63080, 55147, 96337, 32827, 61501, 64152, 48219, 71398, 97315, 16305, 59706, 47383, 51702, 35045, 4159, 25354, 61432, 17278, 80942, 71424, 68027, 39016, 16713, 57686, 37892, 90369, 83970, 3573, 33887, 96749, 931, 46889, 82461, 93539, 96238, 77411, 13891, 14784, 96586, 45726, 88122, 60414, 12020, 11980, 18532, 86061, 4031, 79150, 25107, 76656, 27099, 86537, 72429, 80444, 86951, 911, 53184, 74119, 29531, 31013, 43932, 94375, 41470, 34624, 82099, 87160, 25704, 90634, 23982, 77108, 7963, 5516, 70895, 72554, 97792, 17204, 40517, 74408, 42030, 5007, 63983, 31575, 65437, 70052, 52487, 6333, 82810, 20867, 36029, 52650, 44488, 82930, 6134, 44303, 7230, 10715, 17103, 99278, 98307, 40512, 62884, 58357, 34571, 23557, 83654, 63769, 39216, 22240, 39835, 36509, 45153, 76245, 12757, 94219, 89790, 20976, 66521, 47548, 44302, 16255, 91076, 61192, 5299, 22258, 28817, 23779, 64919, 50764, 35441, 68728, 95403, 66925, 88462, 5597, 19195, 65037, 66025, 82254, 37988, 44214, 50539, 44780, 63337, 84097, 8300, 39171, 45441, 68619, 80296, 66294, 7798, 15996, 12082, 25016, 68476, 68575, 63286, 85027, 10776, 68440, 74373, 26041, 43595, 88628, 30111, 45871, 36224, 47263, 25693, 9085, 96745, 83693, 23500, 74202, 28065, 17017, 80930, 577, 84393, 99111, 36976, 29154, 45429, 36929, 82004, 35089, 26093, 59025, 26145, 6326, 77493, 21768, 83300, 43375, 16192, 79379, 43789, 73580, 19875, 28651, 57403, 87350, 28294, 15020, 72359, 50249, 87780, 88061, 33278, 5604, 94335, 90851, 44701, 73300, 20349, 39952, 25641, 3714, 23311, 71746, 99226, 29644, 41639, 4151, 69882, 31101, 98567, 21937, 95655, 67022, 30689, 66986, 51385, 7810, 56717, 66556, 45444, 34242, 64508, 80006, 80675, 87298, 33658, 14904, 54194, 98814, 44398, 79154, 22800, 45240, 89331, 12767, 1900, 73310, 49386, 78586, 27935, 99601, 81651, 43379, 64752, 26703, 62012, 62231, 53615, 96942, 51760, 23571, 91966, 65206, 95618, 84999, 92131, 94509, 55810, 10794, 43895, 50022, 18970, 58301, 95479, 256, 14530, 654, 99896, 76903, 2572, 46197, 97863, 11062, 2324, 12018, 43561, 93031, 47656, 8069, 21458, 27985, 48432, 24187, 95661, 79553, 46833, 30994, 27820, 53327, 40581, 71482, 74184, 54569, 8639, 87853, 35238, 51822, 76163, 38483, 79986, 34742, 28422, 52148, 98600, 12009, 46431, 95959, 31718, 33669, 66889, 56518, 44461, 53547, 7628, 44469, 32405, 20184, 20949, 6339, 68259, 35392, 30697, 96527, 21724, 51551, 4748, 40044, 76546, 11490, 20291, 91773, 67129, 65590, 14380, 71730, 56164, 25464, 27569, 77363, 19731, 33478, 18094, 382, 63918, 27815, 53195, 38969, 47894, 75076, 93896, 81166, 59351, 43530, 60116, 64445, 45277, 8791, 11764, 48677, 3902, 93691, 57714, 94228, 58615, 43819, 76127, 19025, 79794, 78659, 86468, 84153, 56006, 51452, 22310, 31241, 54068, 11099, 48967, 10468, 12695, 66483, 33581, 4974, 1493, 22884, 60625, 51610, 31876, 49580, 2931, 1849, 71774, 33743, 19127, 75604, 40988, 25756, 46766, 1168, 66985, 14701, 55528, 99092, 10160, 35560, 99881, 70368, 44394, 41336, 64310, 81583, 84080, 3351, 75024, 52232, 90816, 95596, 9648, 13106, 11891, 18046, 7410, 9522, 37875, 23430, 18040, 94374, 61268, 36500, 28183, 51983, 51261, 49506, 60275, 95406, 99771, 99974, 78321, 54092, 49401, 44056, 49453, 95771, 34034, 9737, 1194, 5097, 11868, 69602, 19177, 87890, 56727, 42263, 57275, 24660, 33473, 51744, 76965, 61297, 65839, 83160, 99377, 41322, 64992, 88298, 71444, 38276, 42747, 75802, 38648, 61714, 83722, 34056, 91929, 83306, 20702, 64399, 48113, 62361, 16616, 89428, 80265, 26521, 43047, 73019, 20315, 23298, 46114, 68200, 56156, 95245, 15508, 77476, 10264, 34934, 87926, 29967, 51221, 87659, 72846, 23809, 75647, 2032, 19821, 69212, 14281, 15334, 49257, 59107, 92227, 55029, 23899, 90298, 39140, 1661, 16840, 80058, 16760, 51159, 26742, 98607, 12946, 89062, 8111, 73273, 66437, 44418, 33965, 48416, 38587, 41680, 62998, 71558, 69429, 67330, 31108, 54850, 78690, 23147, 95096, 87323, 5261, 70497, 55106, 39247, 3368, 29048, 46384, 64125, 1546, 79219, 50500, 38809, 87856, 68744, 49032, 82256, 73063, 56685, 70152, 10903, 41438, 27661, 89625, 43566, 75348, 50858, 45805, 92852, 58035, 47251, 50301, 28695, 1632, 45834, 10374, 90396, 25169, 35889, 27609, 93297, 46115, 47822, 13585, 8737, 71555, 8406, 7785, 1082, 13033, 21589, 39086, 210, 91698, 71054, 35371, 11864, 84001, 99248, 91254, 26166, 26827, 5903, 15289, 44525, 70310, 84892, 89719, 4921, 48685, 12109, 16908, 98994, 36453, 99646, 48986, 64556, 64991, 67987, 40671, 14341, 89660, 31450, 6435, 54069, 35445, 15523, 97745, 24152, 69258, 88835, 5901, 60196, 90104, 27315, 6666, 45019, 15208, 24592, 17479, 1373, 67362, 5871, 76409, 15545, 39447, 90523, 24424, 29772, 95091, 70866, 73740, 17971, 37981, 54617, 52909, 92400, 43123, 79514, 70098, 26702, 64356, 96690, 34440, 95531, 69338, 86572, 27974, 4586, 54119, 2946, 69886, 41653, 23024, 41289, 48342, 31805, 81704, 26334, 75475, 27267, 89943, 63299, 95440, 91963, 98928, 73057, 48829, 25236, 48946, 47550, 82422, 69273, 44458, 58617, 61083, 95194, 49923, 2553, 88421, 26152, 33409, 97166, 76390, 53689, 75648, 34564, 76369, 88058, 45012, 8273, 34841, 23614, 32566, 69940, 17094, 45799, 31898, 26171, 41335, 35076, 22936, 45863, 86217, 7076, 30154, 72399, 33122, 44657, 87762, 48593, 96953, 63295, 65438, 72489, 79788, 81863, 17404, 60435, 41724, 49521, 4293, 80975, 70371, 89046, 62366, 82223, 96862, 3751, 34071, 74481, 45500, 108, 6415, 48729, 49882, 55410, 98286, 73641, 7822, 11335, 29240, 65126, 95388, 48172, 7778, 64741, 14739, 23134, 95726, 99697, 2085, 9249, 68913, 43433]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<point> main[index]))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))))))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<point> opposite[index])))))))))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<point> main[index]))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<point> main[index])))))))))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<point> main[index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}))))))))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<point> main[index]))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})))))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :})))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})))) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))))))) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :})))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))))) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})))))) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :})))) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})))) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))))))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))))) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))))))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})))))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))))) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})))) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))))))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})))) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :})))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :})))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}))))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})))))))))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))))))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<point> main[index]))))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})))) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))))) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))))))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})))))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}))))))))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})))) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})))))))) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})))))) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<point> main[index]))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<point> main[index]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))))))) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))))) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})))) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))))) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})))))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))))) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})))) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})))) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :})))) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))))))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 1000) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 1000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))))) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 1.0) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})))))))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9061192468619247, 0.5047972769454645]