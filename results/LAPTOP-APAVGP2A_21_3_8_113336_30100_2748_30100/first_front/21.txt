Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 49
  n = 17
  b = 31
  c = main[b] + main[b]
  if opposite[b] < opposite[b] + 8:
    x = (x - 0.5)
  index = 0
  n = 7
  b = 15
  c = sum(main[:-index])
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 50:
    x = (x + 0.4)
  index = 5
  n = 49
  b = 17
  c = main[b]
  if opposite[40] < opposite[b] + 1:
    x = (x - 0.2)
  index = 27
  n = 19
  b = 43
  c = main[b]
  if c < main[b]:
    x = (x + 0.9)
  index = 25
  n = 32
  b = 11
  c = opposite[b]
  if main[23] < main[13] + 7:
    x = (x / 0.2)
  index = 7
  n = 39
  b = 22
  c = main[b]
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 100:
    x = 0.8
  index = 50
  n = 48
  b = 37
  c = opposite[b]
  if main[b] > opposite[42] + 1:
    x = (x / 0.2)
  index = 45
  n = 45
  b = 24
  c = opposite[b]
  if c < opposite[b]:
    x = 0.2
  index = 5
  n = 34
  b = 16
  c = main[b]
  if main[50] > opposite[b] + 3:
    x = (x - 0.1)
  index = 13
  n = 50
  b = 33
  c = sum(main[:-index])
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x / 0.5)
  index = 33
  n = 8
  b = 35
  c = opposite[b]
  if opposite[31] > opposite[9] + 5:
    x = (x + 0.7)
  index = 19
  n = 8
  b = 1
  c = opposite[b]
  if main[48] < main[b] + 5:
    x = (x + 0.8)
  index = 33
  n = 7
  b = 1
  c = opposite[b]
  if main[b] < opposite[b]:
    x = (x + 0.8)
  return x
XXX_output_XXX = p()

Genotype:
[72085, 70448, 89244, 50451, 90743, 66881, 44169, 79354, 34542, 68035, 30222, 77368, 46779, 7481, 86634, 11068, 74228, 44274, 77060, 52317, 61455, 26929, 65734, 37077, 78488, 41049, 74317, 2215, 20109, 88786, 6995, 22228, 11176, 36934, 25063, 24727, 62586, 68016, 91766, 73758, 897, 42659, 1691, 13165, 88441, 38358, 4797, 14524, 97472, 44225, 54565, 33116, 54483, 29967, 26476, 90126, 65245, 97729, 29369, 61686, 77583, 35885, 68293, 51082, 16147, 69100, 23919, 1380, 43136, 98877, 63382, 69018, 3022, 36087, 11565, 91733, 91625, 71645, 91885, 51591, 18316, 87296, 51577, 72823, 80064, 36221, 87316, 62527, 49720, 17096, 71037, 32433, 40110, 21066, 23718, 48540, 26577, 46010, 13621, 43755, 92585, 53859, 61136, 23869, 93358, 41693, 92526, 83691, 22143, 35250, 67937, 62194, 12500, 86186, 95214, 79552, 35707, 25209, 79299, 19654, 2689, 73345, 98544, 58426, 38041, 24667, 4954, 67879, 6394, 87753, 22249, 92873, 39230, 10953, 37781, 48497, 36568, 30188, 95682, 63211, 80937, 73275, 22626, 70601, 49213, 12392, 12095, 9055, 27319, 13276, 48353, 25390, 40168, 78399, 80020, 10754, 43781, 67982, 35127, 2291, 48105, 53681, 90218, 93556, 44162, 20335, 6484, 69994, 62086, 79608, 7006, 24874, 97637, 82041, 67223, 29214, 81221, 75377, 38192, 78581, 6791, 52533, 29687, 50242, 24481, 95512, 66953, 65020, 63397, 30720, 27296, 53548, 73361, 25669, 47315, 65453, 80559, 18681, 44152, 19369, 73789, 31207, 64888, 69922, 66350, 59122, 25041, 61788, 11936, 77416, 26413, 18657, 82917, 75752, 18997, 32084, 78781, 30281, 29467, 49107, 87861, 84865, 63322, 63146, 42750, 86688, 39389, 14070, 96523, 11417, 71675, 99384, 28252, 3932, 34243, 45951, 53750, 74968, 17430, 16479, 17355, 55599, 78046, 24489, 52047, 77244, 96390, 46855, 73454, 57136, 36632, 51749, 64795, 87276, 51289, 51764, 37689, 66702, 66349, 72851, 89356, 50642, 57988, 70189, 89830, 45532, 422, 45477, 85735, 45815, 25475, 23986, 90128, 16315, 97961, 75173, 65009, 8177, 51929, 25629, 92412, 72230, 58681, 98325, 93386, 79603, 3125, 31060, 55165, 34196, 746, 9581, 88150, 40645, 31257, 43438, 68026, 38119, 27649, 54601, 97218, 11564, 99849, 32597, 90016, 85195, 88445, 40777, 67974, 27945, 41428, 69065, 77646, 95497, 68241, 15525, 51856, 720, 43175, 90791, 78699, 47944, 55580, 71300, 54904, 42354, 55290, 22645, 1039, 15830, 9477, 85160, 67844, 44997, 26259, 8451, 99509, 11804, 42457, 99425, 16531, 23683, 25301]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 49)) {::} (<a> n =  (<n> 17)) {::} (<b> b =  (<n> 31)) {::} (<c> c =  (<data> (<combo> (<data> (<point> main[b]))   (<combine> +)   (<data> (<point> main[b]))))) {::} (<if> if  (<point> opposite[b])  <  (<point> opposite[b])  +  (<d> 8) :{:x =  (<expr> (x -  (<const> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<a> n =  (<n> 7)) {::} (<b> b =  (<n> 15)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<const> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<a> n =  (<n> 49)) {::} (<b> b =  (<n> 17)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> opposite[ (<n> 40) ])  <  (<point> opposite[b])  +  (<d> 1) :{:x =  (<expr> (x -  (<const> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<a> n =  (<n> 19)) {::} (<b> b =  (<n> 43)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> main[b])) :{:x =  (<expr> (x +  (<const> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<a> n =  (<n> 32)) {::} (<b> b =  (<n> 11)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[ (<n> 23) ])  <  (<point> main[ (<n> 13) ])  +  (<d> 7) :{:x =  (<expr> (x /  (<const> 0.2) )) :}))) {::} (<code> (<index> index =  (<n> 7)) {::} (<a> n =  (<n> 39)) {::} (<b> b =  (<n> 22)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (<const> 0.8)) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<a> n =  (<n> 48)) {::} (<b> b =  (<n> 37)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[b])  >  (<point> opposite[ (<n> 42) ])  +  (<d> 1) :{:x =  (<expr> (x /  (<const> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 45)) {::} (<a> n =  (<n> 45)) {::} (<b> b =  (<n> 24)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if c  (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (<const> 0.2)) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<a> n =  (<n> 34)) {::} (<b> b =  (<n> 16)) {::} (<c> c =  (<data> (<point> main[b]))) {::} (<if> if  (<point> main[ (<n> 50) ])  >  (<point> opposite[b])  +  (<d> 3) :{:x =  (<expr> (x -  (<const> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 13)) {::} (<a> n =  (<n> 50)) {::} (<b> b =  (<n> 33)) {::} (<c> c =  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x /  (<const> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<a> n =  (<n> 8)) {::} (<b> b =  (<n> 35)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> opposite[ (<n> 31) ])  >  (<point> opposite[ (<n> 9) ])  +  (<d> 5) :{:x =  (<expr> (x +  (<const> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<a> n =  (<n> 8)) {::} (<b> b =  (<n> 1)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<point> main[ (<n> 48) ])  <  (<point> main[b])  +  (<d> 5) :{:x =  (<expr> (x +  (<const> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 33)) {::} (<a> n =  (<n> 7)) {::} (<b> b =  (<n> 1)) {::} (<c> c =  (<data> (<point> opposite[b]))) {::} (<if> if  (<data> (<point> main[b]))   (<eval> <)   (<data> (<point> opposite[b])) :{:x =  (<expr> (x +  (<const> 0.8) )) :})))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.3651685393258427, 0.47269157141638907]