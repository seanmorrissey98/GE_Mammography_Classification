Generation:
1

Phenotype:
def p():
  x = 0.0
  index = 6
  if sum(opposite[:-index]) + main[index] < opposite[index] - sum(opposite[-index:]) - sum(main[:-index]) - sum(opposite[:-index]) + main[index] - sum(main[-index:]):
    x = (x - 0.0001)
  index = 10
  if sum(opposite[:-index]) - main[index] - opposite[index] + main[index] - opposite[index] + main[index] - opposite[index] + main[index] - opposite[index] > sum(main[:-index]) + sum(opposite[-index:]) - sum(main[:-index]) - opposite[index] - main[index] + opposite[index] - opposite[index] + sum(main[-index:]) + sum(opposite[-index:]):
    x = (x - 0.7)
  index = 1
  if opposite[index] > main[index]:
    x = (x - 0.000001)
  index = 9
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.001:
      x = (x + 0.4)
  else:
    if opposite[index] > main[index] + 6:
      x = (x + 1.0)
    else:
      x = (x - 0.6)
  index = 9
  if main[index] < 1:
    if opposite[index] < main[index] + 0.01:
      x = (x + 0.1)
  else:
    if main[index] < opposite[index] + 2:
      x = (x + 0.4)
    else:
      x = (x - 0.5)
  index = 10
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.0001:
      x = (x - 1.0)
  else:
    if main[index] > opposite[index] + 4:
      x = (x - 0.9)
    else:
      x = (x + 0.6)
  index = 16
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x + 0.4)
  index = 39
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.6)
  index = 41
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.1)
  index = 5
  if sum(opposite[:-index]) > main[index]:
    x = (x + 0.9)
  index = 22
  if main[index] < 1:
    if main[index] > main[index] + 0.6:
      x = (x + 0.3)
  else:
    if opposite[index] > opposite[index] + 8:
      x = (x - 0.7)
    else:
      x = (x - 0.4)
  index = 6
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.01:
      x = (x - 0.0001)
  else:
    if opposite[index] < opposite[index] + 9:
      x = (x - 0.01)
    else:
      x = (x - 0.0000001)
  index = 44
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.2:
      x = (x + 0.9)
  else:
    if main[index] < main[index] + 1:
      x = (x + 0.5)
    else:
      x = (x + 0.001)
  index = 21
  if sum(opposite[-index:]) > opposite[index]:
    x = (x + 0.7)
  index = 20
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.001)
  index = 7
  if main[index] < main[index]:
    x = (x - 0.7)
  index = 37
  if main[index] < main[index]:
    x = (x - 0.9)
  index = 12
  if opposite[index] > opposite[index]:
    x = (x - 0.00001)
  index = 5
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.8)
  index = 0
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.0001)
  index = 47
  if opposite[index] < opposite[index]:
    x = (x + 0.1)
  index = 10
  if opposite[index] > opposite[index]:
    x = (x - 0.5)
  index = 48
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.0000001)
  index = 19
  if main[index] + sum(opposite[:-index]) + sum(main[-index:]) > opposite[index] - opposite[index]:
    x = (x - 0.2)
  index = 25
  if main[index] < 1:
    if opposite[index] < main[index] + 0.8:
      x = (x - 0.6)
  else:
    if main[index] < opposite[index] + 8:
      x = (x + 0.0000001)
    else:
      x = (x - 0.0000001)
  index = 39
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 100:
    x = (x + 0.8)
  index = 14
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x - 0.000001)
  index = 9
  if main[index] < 1:
    if opposite[index] < main[index] + 0.4:
      x = (x - 0.01)
  else:
    if main[index] < main[index] + 3:
      x = (x - 0.0001)
    else:
      x = (x + 0.5)
  index = 6
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 1.0)
  index = 7
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.001)
  index = 50
  if opposite[index] < opposite[index]:
    x = (x + 0.8)
  index = 45
  if main[index] < 1:
    if main[index] < opposite[index] + 0.000001:
      x = (x + 0.0001)
  else:
    if opposite[index] < opposite[index] + 8:
      x = (x + 0.8)
    else:
      x = (x + 0.7)
  index = 47
  if opposite[index] > main[index]:
    x = (x - 0.000001)
  index = 26
  if opposite[index] - sum(main[-index:]) < sum(main[:-index]):
    x = (x - 0.00001)
  index = 10
  if opposite[index] < main[index]:
    x = (x - 0.1)
  index = 50
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.001:
      x = (x - 0.6)
  else:
    if opposite[index] > main[index] + 6:
      x = (x + 0.5)
    else:
      x = (x - 0.0000001)
  index = 35
  if main[index] < opposite[index]:
    x = (x - 0.001)
  index = 20
  if opposite[index] + sum(main[-index:]) < sum(main[-index:]):
    x = (x - 0.0000001)
  index = 12
  if main[index] + opposite[index] < sum(main[:-index]):
    x = (x + 0.0001)
  index = 11
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x - 0.000001)
  index = 9
  if main[index] > main[index]:
    x = (x + 1.0)
  index = 31
  if opposite[index] > main[index]:
    x = (x - 0.5)
  index = 46
  if sum(main[:-index]) < main[index]:
    x = (x - 0.000001)
  index = 45
  if main[index] < main[index]:
    x = (x + 0.1)
  index = 22
  if main[index] - sum(main[-index:]) > sum(opposite[:-index]) - opposite[index]:
    x = (x + 0.9)
  index = 11
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.5:
      x = (x - 0.3)
  else:
    if main[index] > main[index] + 8:
      x = (x - 0.1)
    else:
      x = (x + 0.5)
  index = 35
  if sum(opposite[:-index]) > sum(main[:-index]):
    x = (x + 0.3)
  index = 5
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 5000:
    x = (x + 0.7)
  index = 27
  if opposite[index] < opposite[index]:
    x = (x + 0.0001)
  index = 43
  if main[index] < 1:
    if main[index] > main[index] + 0.9:
      x = (x + 0.001)
  else:
    if main[index] > main[index] + 7:
      x = (x + 0.000001)
    else:
      x = (x - 0.0000001)
  index = 34
  if main[index] > opposite[index]:
    x = (x - 0.0000001)
  index = 11
  if main[index] < 1:
    if opposite[index] > main[index] + 0.4:
      x = (x + 0.6)
  else:
    if opposite[index] > opposite[index] + 9:
      x = (x - 0.01)
    else:
      x = (x - 0.2)
  index = 42
  if main[index] < opposite[index]:
    x = (x - 0.0000001)
  index = 28
  if opposite[index] < opposite[index]:
    x = (x + 0.01)
  index = 42
  if opposite[index] > opposite[index]:
    x = (x - 0.3)
  index = 13
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.001:
      x = (x - 0.1)
  else:
    if opposite[index] < main[index] + 8:
      x = (x + 0.0001)
    else:
      x = (x - 0.9)
  index = 33
  if main[index] > main[index]:
    x = (x - 0.4)
  index = 15
  if opposite[index] < opposite[index]:
    x = (x + 0.3)
  index = 4
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.01)
  index = 3
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.7)
  index = 36
  if main[index] < 1:
    if main[index] < opposite[index] + 0.5:
      x = (x + 0.00001)
  else:
    if main[index] < opposite[index] + 5:
      x = (x + 0.2)
    else:
      x = (x - 0.7)
  index = 28
  if main[index] < 1:
    if main[index] > opposite[index] + 0.7:
      x = (x - 0.001)
  else:
    if opposite[index] < main[index] + 0:
      x = (x + 0.2)
    else:
      x = (x - 0.9)
  index = 19
  if main[index] < 1:
    if main[index] < opposite[index] + 0.6:
      x = (x - 1.0)
  else:
    if main[index] < main[index] + 5:
      x = (x - 1.0)
    else:
      x = (x + 0.3)
  index = 11
  if main[index] < 1:
    if main[index] < main[index] + 0.001:
      x = (x - 1.0)
  else:
    if opposite[index] > main[index] + 8:
      x = (x + 0.0001)
    else:
      x = (x + 0.6)
  index = 11
  if main[index] > sum(opposite[:-index]):
    x = (x - 0.01)
  index = 43
  if main[index] > main[index]:
    x = (x - 0.6)
  index = 34
  if opposite[index] > main[index]:
    x = (x + 0.4)
  index = 7
  if main[index] < opposite[index]:
    x = (x - 0.001)
  index = 11
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.00001)
  index = 8
  if main[index] < 1:
    if main[index] < main[index] + 0.01:
      x = (x + 0.001)
  else:
    if main[index] > main[index] + 1:
      x = (x - 0.001)
    else:
      x = (x - 0.7)
  index = 33
  if main[index] < main[index]:
    x = (x + 0.001)
  index = 16
  if main[index] > main[index]:
    x = (x + 0.000001)
  index = 35
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.5)
  index = 17
  if sum(opposite[:-index]) + sum(opposite[-index:]) < sum(main[:-index]) + sum(main[:-index]):
    x = (x - 0.2)
  index = 44
  if main[index] - main[index] > opposite[index] + opposite[index]:
    x = (x - 0.8)
  index = 0
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 50:
    x = (x + 0.1)
  index = 9
  if opposite[index] > opposite[index]:
    x = (x - 0.2)
  index = 46
  if main[index] < main[index]:
    x = (x + 1.0)
  index = 10
  if main[index] > main[index]:
    x = (x - 0.0001)
  index = 40
  if opposite[index] - opposite[index] > sum(main[-index:]):
    x = (x - 0.0001)
  index = 38
  if sum(main[:-index]) < sum(main[:-index]):
    x = (x + 1.0)
  index = 2
  if opposite[index] < opposite[index]:
    x = (x + 0.00001)
  index = 3
  if main[index] > opposite[index]:
    x = (x - 0.0001)
  index = 24
  if main[index] < main[index]:
    x = (x - 0.6)
  index = 28
  if main[index] < 1:
    if opposite[index] < main[index] + 0.001:
      x = (x - 0.4)
  else:
    if opposite[index] > opposite[index] + 8:
      x = (x + 0.1)
    else:
      x = (x - 0.7)
  index = 17
  if opposite[index] < main[index]:
    x = (x + 0.0001)
  index = 25
  if opposite[index] < opposite[index]:
    x = (x + 0.001)
  index = 26
  if opposite[index] > opposite[index]:
    x = (x - 0.1)
  index = 48
  if main[index] < 1:
    if main[index] < opposite[index] + 0.000001:
      x = (x - 0.2)
  else:
    if opposite[index] < main[index] + 4:
      x = (x - 0.2)
    else:
      x = (x + 0.4)
  index = 26
  if opposite[index] < main[index]:
    x = (x + 0.2)
  index = 18
  if opposite[index] > main[index]:
    x = (x - 0.2)
  index = 32
  if opposite[index] > main[index]:
    x = (x - 0.2)
  index = 10
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.2:
      x = (x + 0.0001)
  else:
    if main[index] < main[index] + 2:
      x = (x - 0.2)
    else:
      x = (x + 0.7)
  index = 12
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 50:
    x = (x + 1.0)
  index = 49
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.7)
  index = 24
  if opposite[index] > main[index]:
    x = (x + 0.2)
  index = 18
  if opposite[index] > opposite[index]:
    x = (x + 0.001)
  index = 16
  if main[index] < opposite[index]:
    x = (x - 0.0001)
  index = 6
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 5000:
    x = (x + 0.1)
  index = 30
  if opposite[index] > main[index]:
    x = (x - 0.5)
  index = 8
  if main[index] < opposite[index]:
    x = (x + 0.3)
  index = 2
  if main[index] < opposite[index]:
    x = (x - 0.3)
  index = 7
  if sum(opposite[-index:]) < sum(main[:-index]):
    x = (x + 0.000001)
  index = 1
  if main[index] < 1:
    if main[index] < main[index] + 0.8:
      x = (x - 0.01)
  else:
    if main[index] < opposite[index] + 5:
      x = (x - 0.4)
    else:
      x = (x - 0.5)
  index = 13
  if main[index] < 1:
    if main[index] < opposite[index] + 0.5:
      x = (x + 1.0)
  else:
    if main[index] > opposite[index] + 3:
      x = (x + 0.0001)
    else:
      x = (x + 0.9)
  index = 39
  if main[index] < opposite[index]:
    x = (x + 0.001)
  index = 5
  if main[index] < opposite[index]:
    x = (x - 0.3)
  index = 45
  if main[index] > opposite[index]:
    x = (x - 1.0)
  index = 35
  if main[index] > main[index]:
    x = (x + 0.000001)
  index = 41
  if opposite[index] > main[index]:
    x = (x - 0.3)
  index = 25
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x - 0.1)
  index = 14
  if main[index] < 1:
    if main[index] < main[index] + 0.6:
      x = (x - 0.001)
  else:
    if main[index] > opposite[index] + 6:
      x = (x + 0.001)
    else:
      x = (x - 0.2)
  index = 4
  if opposite[index] > main[index]:
    x = (x + 1.0)
  index = 23
  if main[index] > main[index]:
    x = (x + 0.0000001)
  index = 4
  if main[index] > opposite[index]:
    x = (x + 0.9)
  index = 44
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.001)
  index = 40
  if opposite[index] > opposite[index]:
    x = (x - 0.001)
  index = 20
  if opposite[index] < opposite[index]:
    x = (x + 0.3)
  index = 43
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.1:
      x = (x + 0.9)
  else:
    if main[index] < main[index] + 9:
      x = (x + 0.001)
    else:
      x = (x - 0.2)
  index = 45
  if opposite[index] + opposite[index] < opposite[index]:
    x = (x - 0.0000001)
  index = 32
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.7)
  index = 29
  if opposite[index] < main[index]:
    x = (x - 0.4)
  index = 14
  if opposite[index] > opposite[index]:
    x = (x + 0.0000001)
  index = 29
  if opposite[index] < opposite[index]:
    x = (x + 0.000001)
  index = 48
  if sum(opposite[:-index]) < sum(opposite[:-index]):
    x = (x - 0.4)
  index = 28
  if opposite[index] < main[index]:
    x = (x - 0.01)
  index = 26
  if main[index] < opposite[index]:
    x = (x - 0.00001)
  index = 1
  if sum(opposite[:-index]) > sum(main[-index:]):
    x = (x + 1.0)
  index = 34
  if main[index] > opposite[index]:
    x = (x - 0.00001)
  index = 15
  if opposite[index] > main[index]:
    x = (x + 0.2)
  index = 18
  if opposite[index] < main[index]:
    x = (x - 0.3)
  index = 11
  if main[index] < 1:
    if main[index] > main[index] + 0.3:
      x = (x - 0.000001)
  else:
    if main[index] < main[index] + 2:
      x = (x + 0.8)
    else:
      x = (x - 0.2)
  index = 23
  if opposite[index] + main[index] < opposite[index]:
    x = (x + 0.5)
  index = 35
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.2)
  index = 14
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.001)
  index = 2
  if main[index] < 1:
    if opposite[index] > main[index] + 0.4:
      x = (x + 0.8)
  else:
    if opposite[index] > main[index] + 5:
      x = (x - 1.0)
    else:
      x = (x - 0.4)
  index = 12
  if opposite[index] - opposite[index] < sum(opposite[:-index]):
    x = (x + 0.2)
  index = 22
  if main[index] < 1:
    if opposite[index] > main[index] + 0.0000001:
      x = (x - 0.00001)
  else:
    if main[index] > main[index] + 1:
      x = (x + 1.0)
    else:
      x = (x + 0.00001)
  index = 4
  if main[index] < main[index]:
    x = (x - 0.4)
  index = 39
  if main[index] > main[index]:
    x = (x - 0.7)
  index = 19
  if main[index] < 1:
    if main[index] > opposite[index] + 0.5:
      x = (x - 0.01)
  else:
    if main[index] < main[index] + 3:
      x = (x + 0.3)
    else:
      x = (x - 0.0000001)
  index = 19
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.7:
      x = (x - 0.01)
  else:
    if main[index] < main[index] + 3:
      x = (x + 0.9)
    else:
      x = (x - 0.8)
  index = 37
  if opposite[index] + opposite[index] - main[index] > opposite[index] - sum(main[-index:]) + sum(main[-index:]) - main[index] + sum(main[:-index]) - sum(main[:-index]):
    x = (x - 0.00001)
  index = 11
  if main[index] - opposite[index] + sum(main[-index:]) + opposite[index] + opposite[index] + main[index] + main[index] - opposite[index] - opposite[index] + sum(main[:-index]) < sum(opposite[-index:]) - sum(opposite[-index:]) - opposite[index] - main[index] + main[index] + opposite[index] - opposite[index] + opposite[index] - opposite[index] - opposite[index] - opposite[index]:
    x = (x + 0.01)
  index = 39
  if opposite[index] + sum(opposite[-index:]) < sum(opposite[-index:]) + main[index]:
    x = (x - 0.01)
  index = 12
  if main[index] + main[index] - main[index] - opposite[index] - sum(opposite[:-index]) - sum(main[:-index]) + main[index] - sum(opposite[:-index]) > sum(main[:-index]) - opposite[index] - opposite[index] - sum(main[:-index]):
    x = (x + 0.7)
  return x
XXX_output_XXX = p()

Genotype:
[54209, 70709, 87354, 59975, 68133, 57484, 92515, 1340, 20953, 52844, 49172, 54917, 51756, 22239, 72561, 10093, 33463, 19128, 6991, 36431, 48824, 49021, 54215, 38734, 70365, 37456, 36428, 72791, 60616, 23386, 94783, 55759, 30916, 6232, 61892, 80283, 5279, 77315, 45070, 25044, 45641, 67985, 92732, 95432, 35405, 65255, 95911, 5787, 61804, 75434, 61619, 71679, 72056, 58538, 44911, 95408, 36371, 57181, 98435, 97943, 16286, 61854, 62626, 20246, 55384, 25989, 66704, 42555, 42851, 67651, 9218, 64391, 5765, 39520, 60097, 44243, 40754, 3857, 19931, 76085, 5953, 35161, 94919, 17767, 67826, 37764, 82326, 31454, 46079, 83398, 49811, 70731, 71503, 98778, 79118, 6346, 3686, 96501, 74390, 70491, 1457, 47914, 54379, 70659, 38320, 87216, 4397, 10046, 99413, 87903, 20632, 67851, 64309, 83359, 14204, 11806, 95203, 89303, 33490, 63677, 61398, 51048, 27889, 56648, 8017, 17480, 7908, 15856, 64569, 45849, 70371, 19628, 56246, 64958, 86171, 60123, 70734, 39449, 23335, 3530, 21567, 83226, 20082, 30661, 80927, 61715, 31950, 59305, 16395, 7757, 18377, 38446, 54594, 2964, 41912, 7439, 84212, 64948, 46553, 48533, 63290, 74745, 64697, 99073, 58289, 236, 23148, 49535, 8627, 83042, 33971, 61003, 32379, 83398, 33195, 70125, 92280, 30287, 72010, 87402, 11780, 6758, 30025, 97539, 56105, 6317, 12402, 78649, 92896, 10644, 64436, 69565, 33463, 59179, 8606, 38636, 79847, 91144, 70965, 4304, 86480, 24052, 58229, 14437, 61479, 22100, 22385, 63949, 33724, 58416, 24656, 65797, 88267, 39244, 83927, 8199, 62212, 9841, 87911, 83237, 68065, 75008, 20703, 17241, 3581, 99626, 93345, 91338, 73969, 5562, 38233, 83386, 42112, 12678, 50779, 21321, 92479, 13501, 11733, 66500, 72407, 34904, 64860, 66204, 68814, 42372, 26533, 10527, 58286, 22837, 68430, 81078, 88704, 90103, 55556, 41071, 23582, 73804, 87583, 37446, 80745, 72978, 88094, 2758, 99329, 2426, 47227, 46410, 3037, 69301, 28331, 27043, 54096, 91867, 34744, 30384, 14893, 14098, 51156, 13686, 73627, 46586, 99653, 85791, 14726, 41833, 5309, 59327, 41504, 30825, 88396, 89946, 54605, 64096, 82807, 69694, 14895, 74736, 53313, 17277, 52844, 91133, 62053, 71276, 76778, 34033, 37092, 69769, 51452, 76161, 20288, 61623, 49850, 14624, 40681, 47347, 69218, 62506, 23069, 6737, 83326, 48111, 61994, 20140, 96628, 40025, 31785, 76307, 58627, 22104, 80453, 97984, 83902, 16184, 39626, 4527, 51592, 97378, 25717, 66217, 59279, 91156, 13469, 85333, 84211, 53672, 256, 56093, 41689, 86844, 76523, 12931, 31375, 17698, 48566, 80293, 36433, 49068, 95041, 13925, 96264, 9980, 19528, 31258, 49303, 69118, 16724, 55423, 56084, 62464, 97292, 31491, 44532, 7948, 9777, 3650, 89772, 53477, 72578, 1817, 18916, 13427, 80119, 91264, 74066, 3972, 3949, 29102, 89046, 72237, 78724, 46828, 16947, 96509, 40254, 5547, 77088, 1096, 99899, 5112, 2088, 74715, 64533, 80321, 85208, 17700, 80901, 41073, 66978, 17842, 60375, 43093, 91912, 1711, 78907, 28669, 75092, 68812, 26863, 33946, 66025, 11743, 63575, 11532, 67187, 40418, 66449, 56648, 47005, 57494, 87623, 54254, 71934, 70509, 79030, 91159, 9029, 81962, 47720, 56265, 59839, 9478, 97415, 63961, 53917, 96897, 44277, 35598, 20396, 44904, 57487, 4167, 67752, 97827, 3313, 55159, 19513, 24055, 20486, 60495, 61117, 26115, 15646, 69321, 82656, 97945, 30496, 81248, 5095, 64168, 78961, 26177, 35108, 66869, 77213, 8991, 22457, 79628, 16588, 83212, 89785, 67242, 77225, 22066, 23199, 39308, 36889, 62197, 80063, 98715, 54796, 11891, 35568, 53239, 22318, 63350, 44758, 94981, 33711, 1311, 8579, 59510, 35256, 10766, 79079, 77298, 63021, 3588, 7426, 56809, 35325, 35841, 22649, 12960, 18455, 63001, 68864, 82344, 92087, 89254, 73799, 37287, 41196, 72048, 91328, 1033, 7630, 91474, 73504, 71361, 10652, 17729, 46397, 23896, 40980, 91292, 98794, 89997, 35502, 86271, 15410, 10299, 62663, 52639, 36351, 53241, 79851, 38729, 24717, 30254, 59803, 43868, 89694, 13392, 47663, 80632, 28507, 5744, 15294, 41276, 48558, 85606, 25238, 82640, 52320, 88995, 33340, 96005, 76087, 22230, 97113, 33234, 38195, 40446, 13609, 95007, 83392, 41331, 17210, 50291, 88092, 18677, 38032, 81232, 74262, 80150, 39379, 26156, 97518, 7160, 56102, 14863, 37921, 28320, 64027, 70615, 9634, 9864, 30066, 16153, 44445, 12584, 5405, 43760, 44710, 37600, 14921, 52870, 39711, 19074, 29104, 39383, 1226, 55424, 15297, 89724, 3367, 64107, 33505, 32839, 51141, 31591, 95826, 43582, 11066, 26180, 91356, 13029, 14212, 90455, 55523, 68243, 4264, 97443, 73000, 63633, 67570, 93336, 18705, 28249, 35283, 24065, 24973, 71979, 57623, 99369, 749, 85801, 91885, 85663, 49263, 40831, 19329, 19064, 91602, 1052, 79068, 27656, 79104, 55908, 91516, 51520, 95906, 85579, 2249, 6927, 56791, 30273, 57981, 43582, 33403, 55092, 10254, 45816, 99480, 99726, 59636, 16479, 94379, 67520, 86252, 41582, 89559, 43667, 50150, 11596, 39442, 62152, 27475, 9346, 34464, 35220, 95679, 78508, 41283, 52033, 8699, 28864, 91394, 88671, 33861, 60177, 69659, 60201, 81693, 22265, 21157, 57853, 64660, 50804, 22797, 2934, 72934, 25336, 18900, 66119, 75052, 63906, 99074, 36183, 63536, 80220, 47370, 9049, 26253, 86577, 39144, 18522, 16768, 89953, 99598, 75776, 90585, 61656, 5116, 80914, 52223, 44626, 87308, 24673, 79064, 66448, 48944, 35473, 54722, 49654, 74, 96877, 86265, 3832, 30812, 61782, 27641, 8407, 51889, 96794, 63742, 66932, 77077, 7456, 95192, 38637, 6119, 43338, 69459, 60930, 68743, 60351, 51968, 99212, 91335, 75667, 15366, 36679, 4390, 72733, 11321, 48512, 21616, 71584, 89187, 59221, 35491, 3533, 18028, 68921, 17778, 52314, 1805, 96139, 41972, 45161, 30637, 50722, 30958, 658, 18867, 80543, 35532, 40136, 92336, 67470, 35131, 49382, 31038, 55897, 26052, 25236, 33268, 79491, 65101, 16955, 86836, 37732, 77636, 98233, 88549, 16489, 35148, 63105, 38191, 78718, 73719, 35288, 99040, 35374, 94339, 37020, 50664, 468, 20697, 10224, 30982, 84533, 45361, 28048, 36404, 57564, 66454, 96619, 46753, 18970, 4693, 54118, 66169, 36634, 34974, 27205, 19612, 10452, 21755, 91153, 82648, 73975, 89941, 5208, 9288, 18315, 81658, 18667, 21906, 2296, 61531, 45652, 21168, 56677, 63136, 15489, 25452, 14087, 90857, 79256, 12532, 56068, 14395, 44148, 60017, 73819, 56985, 34213, 22126, 46329, 98123, 41821, 27279, 8056, 67010, 2080, 21779, 10306, 9547, 86510, 79917, 36996, 36089, 31939, 30968, 44169, 41275, 46887, 44513, 18070, 87954, 40306, 89652, 6664, 91003, 7699, 39833, 35768, 41901, 90942, 9250, 26077, 45766, 59019, 24081, 10464, 7691, 24962, 31666, 79707, 44758, 25111, 19208, 58086, 59170, 26078, 47656, 63540, 9592, 77945, 64053, 84224, 319, 27787, 59325, 16600, 94590, 94844, 87753, 6775, 80450, 63686, 22187, 56223, 62899, 92549, 68396, 72834, 3747, 65432, 32807, 17467, 60916, 14126, 93015, 90703, 27983, 37325, 78040, 73844, 29596, 9292, 90433, 57744, 53827, 98061, 54265, 81150, 89471, 19834, 20520, 96044, 33968, 66781, 94330, 97764, 80688, 37344, 71167, 20271, 93685, 87494, 39693, 83863, 16723, 6200, 47476, 49972, 92486, 60843, 12655, 58721, 30171, 60004, 50959, 43999, 55913, 27835, 96733, 94302, 23846, 19186, 44248, 12436, 72172, 87760, 57680, 7143, 60198, 35482, 28219, 46408, 23408, 41575, 67913, 30860, 35143, 91573, 89766, 23808, 25615, 97101, 71228, 78123, 2971, 20843, 42918, 88233, 27802, 13247, 32272, 41949, 41990, 11988, 83018, 59532, 61972, 40252, 21666, 81984, 6295, 13272, 11068, 88563, 58210, 3286, 96667, 7099, 51661, 65150, 19871, 29003, 26013, 36295, 47514, 65861, 25178, 87904, 97203, 18789, 7444, 21080, 6252, 62376, 38979, 88708, 8010, 13110, 59942, 35784, 35971, 16173, 93181, 36351, 89102, 21400, 35672, 32377, 26477, 66610, 95716, 7963, 91880, 74044, 84615, 27962, 62216, 85868, 91134, 83157, 41501, 68728, 29872, 90347, 68963, 59282, 22558, 53047, 57085, 38201, 55745, 95203, 36615, 4516, 11876, 21851, 90123, 43741, 30644, 65657, 61108, 72088, 62009, 35021, 15563, 47530, 80272, 57358, 12669, 29599, 18367, 48061, 69763, 88396, 12979, 72190, 29560, 92240, 84881, 37980, 77919, 15851, 96481, 34542, 20611, 53590, 54472, 86121, 86502, 75800, 88171, 72771, 83003, 46649, 85120, 31628, 48484, 85777, 3660, 59470, 34921, 5436, 42584, 21409, 89512, 5401, 42016, 68589, 97793, 45946, 53581, 24100, 5644, 99098, 20905, 75423, 61549, 24440, 4654, 10749, 75359, 66661, 4792, 49541, 26167, 38791, 62772, 44186, 74479, 39932, 42264, 44265, 52085, 24991, 65043, 47679, 12222, 10296, 96402, 84890, 83437, 74694, 66323, 37471, 81045, 11208, 73984, 20623, 91937, 78974, 30954, 22060, 62374, 44989, 8583, 74355, 56451, 15214, 37633, 65790, 68177, 37697, 28100, 72361, 34309, 34814, 22911, 7796, 3214, 91161, 1175, 64000, 15152, 88586, 94450, 78562, 10694, 33040, 6602, 5095, 62205, 78746, 20191, 92823, 5500, 52630, 44691, 29868, 79832, 39259, 34122, 49758, 1721, 62025, 22523, 37114, 98939, 14235, 89012, 45102, 54907, 45111, 92583, 64014, 98498, 92737, 51231, 90841, 18, 72974, 31181, 6726, 7179, 33768, 96896, 55855, 58822, 88781, 25120, 42990, 88503, 12535, 19763, 27115, 76631, 4610, 46139, 7513, 62886, 11271, 92831, 24154, 15757, 90643, 48304, 25915, 17218, 37555, 25081, 99960, 45726, 23325, 95773, 99449, 60094, 51866, 68045, 70717, 27052, 9224, 23806, 25219, 71353, 2132, 27379, 35822, 65158, 19795, 46909, 59203, 2760, 91333, 85954, 36623, 14233, 16916, 55006, 134, 68273, 3481, 31528, 28903, 29018, 59410, 2378, 4608, 33773, 51504, 57482, 35295, 93884, 30257, 45974, 98941, 55868, 97973, 70396, 89813, 53405, 28845, 65044, 75055, 98033, 25611, 82913, 40724, 33923, 3796, 89327, 19476, 31920, 39689, 22744, 17736, 45348, 80980, 63964, 58886, 57166, 46784, 81143, 74026, 4041, 1145, 43754, 78493, 81351, 61619, 55030, 53500, 44840, 2701, 79020, 4013, 64942, 10166, 71935, 12714, 2215, 48051, 26573, 9168, 64372, 17569, 67757, 41694, 17824, 93191, 67529, 23279, 75172, 90085, 16252, 11221, 74839, 42031, 1165, 7674, 21998, 89621, 12607, 13559, 50428, 83497, 1084, 99823, 83357, 92174, 24809, 937, 18533, 12031, 74475, 11759, 4735, 29620, 79284, 35505, 16213, 31615, 35228, 79117, 6672, 29403, 67108, 61372, 33415, 29184, 49183, 74325, 9199, 99260, 14884, 7593, 55940, 96888, 43908, 73977, 14409, 29189, 80128, 7525, 2953, 79558, 73098, 97354, 13140, 96184, 72388, 9339, 87179, 19465, 89003, 74458, 2707, 2369, 79835, 65503, 19053, 82810, 89070, 20708, 95430, 29890, 97945, 54258, 48812, 8459, 57380, 416, 93031, 58274, 96894, 94870, 95749, 75102, 38818, 44620, 60736, 46953, 44130, 86398, 37632, 37983, 12706, 16768, 60791, 85697, 20857, 63633, 624, 12016, 99383, 62338, 80143, 30448, 34051, 77244, 76042, 99293, 79946, 72123, 47692, 54586, 44883, 60730, 31870, 47719, 8496, 81441, 59851, 96999, 75976, 89951, 46243, 78175, 96891, 15167, 46381, 19465, 10341, 79006, 29925, 71201, 49090, 78271, 84427, 86858, 50808, 89444, 55189, 60595, 90828, 95134, 38297, 75158, 43069, 1336, 69546, 38855, 57036, 19519, 78847, 56331, 76148, 3425, 85075, 7953, 12802, 93913, 84256, 64476, 71388, 30032, 33622, 7679, 28420, 94603, 57828, 67021, 68338, 85629, 26945, 33777, 66073, 35467, 43483, 86417, 99703, 38167, 92492, 11204, 13129, 94889, 61183, 81739, 41381, 57244, 88258, 98028, 33862, 16950, 43639, 31197, 2181, 14339, 15778, 95860, 32916, 25405, 87978, 85004, 65127, 1647, 93310, 24929, 61762, 48442, 93823, 34764, 45429, 49122, 74094, 8579, 20509, 13218, 74085, 91788, 64988, 26023, 76483, 55684, 22110, 67673, 29374, 3975, 7401, 35069, 9888, 51678, 59654, 72787, 14928, 97944, 19787, 32279, 25386, 98060, 61332, 95481, 7045, 88257, 57763, 2969, 79595, 62423, 93779, 54317, 28435, 91310, 49580, 83689, 50811, 33914, 85015, 35605, 59139, 35971, 24096, 26299, 53176, 35668, 42952, 44433, 36807, 71494, 64417, 76819, 14494, 95420, 36267, 35399, 47302, 78838, 82879, 28487, 7476, 49402, 62580, 58292, 76325, 2531, 91569, 77725, 93636, 44908, 9731, 79370, 94596, 80775, 97873, 39848, 90319, 28466, 35516, 68043, 59837, 84600, 37762, 81178, 44879, 2330, 56174, 93490, 28837, 47448, 49692, 77663, 76202, 21613, 23851, 59916, 64793, 21589, 99188, 77519, 31882, 26920, 6940, 62098, 39982, 41539, 1798, 70330, 80703, 25858, 70653, 62635, 613, 68994, 21668, 19074, 77566, 84161, 84841, 33036, 28817, 86306, 59182, 21994, 22858, 78488, 70053, 68899, 35180, 49702, 79065, 13967, 49196, 67088, 46033, 62834, 49225, 99351, 62945, 94385, 5074, 78680, 44136, 87887, 23626, 68691, 21116, 12624, 1225, 89904, 67949, 24076, 43854, 38003, 59515, 50895, 8670, 68182, 35155, 64885, 75469, 36387, 90663, 52948, 98875, 19005, 64630, 27929, 14640, 5416, 52672, 48634, 29899, 29872, 29186, 15540, 18346, 1537, 20774, 80082, 77019, 45298, 15241, 4867, 73045, 29664, 6928, 41534, 70005, 62155, 38144, 46774, 14036, 5673, 4039, 62419, 7412, 41091, 41758, 66781, 77446, 27559, 34690, 47071, 8399, 68101, 43011, 21539, 87516, 18634, 27507, 46865, 37766, 81068, 3675, 67155, 41347, 81107, 92029, 96539, 568, 16306, 54845, 95263, 97013, 10396, 20056, 81537, 4776, 94983, 37898, 6833, 63838, 71162, 73876, 2478, 82535, 73145, 82849, 26967, 54994, 40480, 6899, 34562, 74014, 50365, 23758, 59503, 97852, 12026, 3847, 2108, 85144, 20551, 54835, 14572, 18212, 78526, 61020, 89562, 18771, 88242, 9219, 13203, 57619, 11755, 82753, 66156, 67796, 9162, 66966, 13684, 22346, 79675, 37281, 90799, 12847, 26821, 4128, 83196, 36594, 55507, 65024, 89631, 93855, 3630, 498, 84379, 76565, 48081, 76612, 5981, 93826, 62139, 25790, 86471, 74373, 20171, 27175, 22142, 820, 12085, 67513, 53269, 30124, 31773, 7593, 75607, 38881, 99527, 64088, 39901, 11370, 34765, 91681, 29986, 50605, 11314, 73990, 90478, 61987, 49184, 92009, 50062, 77586, 41115, 41014, 73871, 90225, 95969, 7018, 72982, 20627, 72911, 73340, 70132, 45544, 37450, 41194, 95932, 84724, 91420, 39449, 26153, 13169, 2037, 52326, 46940, 680, 6519, 41891, 41849, 81326, 91853, 64518, 46045, 10442, 2295, 97032, 98968, 78928, 74277, 75222, 93109, 53174, 88221, 9785, 60393, 66653, 54594, 65890, 29443, 88741, 46617, 54026, 42233, 19295, 72986, 28012, 96812, 61133, 36223, 45271, 69063, 92266, 60968, 11559, 67625, 47109, 88007, 12588, 7366, 70984, 17944, 83300, 49699, 89441, 14376, 77655, 86761, 64542, 75144, 80581, 80348, 54474, 91007, 58668, 20820, 45670, 48113, 2536, 74578, 97426, 31166, 19162, 52519, 76201, 88239, 57919, 42241, 23580, 82762, 36854, 80942, 93594, 68660, 8703, 63895, 2662, 83277, 71653, 1601, 32231, 27837, 15639, 98084, 72233, 72238, 49745, 54971, 27875, 41356, 23009, 68782, 71809, 93613, 32279, 40045, 16846, 21649, 98275, 10684, 67320, 40617, 91908, 94116, 41959, 59147, 63082, 48327, 34584, 55336, 74124, 93526, 30342, 24826, 51753, 46044, 14721, 1840, 47972, 14681, 32507, 18529, 34901, 43113, 55879, 17686, 1119, 84308, 42556, 51376, 56359, 16590, 93680, 23457, 58024, 9747, 39421, 9911, 84723, 91723, 68418, 28140, 6274, 93672, 69259, 33467, 79091, 49246, 5870, 50618, 75381, 55044, 99351, 92976, 11369, 39278, 50945, 77742, 88289, 78039, 5422, 59581, 28363, 71835, 28671, 29110, 81410, 36218, 7372, 10231, 35141, 44503, 79984, 5544, 19689, 11144, 89646, 68354, 25244, 41105, 16465, 589, 84034, 88890, 16702, 89992, 90974, 15828, 39230, 94533, 35765, 45492, 95380, 66938, 33648, 87954, 8227, 5847, 34498, 66672, 33364, 46903, 75570, 77874, 81606, 89232, 77131, 25115, 11387, 63231, 81784, 50992, 78271, 4952, 60786, 46037, 59918, 30384, 21335, 51637, 7194, 33315, 45577, 38123, 56600, 99250, 65650, 46719, 96803, 98604, 98344, 67659, 66255, 75905, 31897, 17327, 24114, 24948, 83032, 60110, 83337, 69732, 46595, 77387, 38190, 44708, 49283, 43363, 58460, 67387, 935, 7393, 84420, 50859, 53808, 37849, 38769, 24672, 48577, 40408, 49157, 78810, 15541, 92281, 2760, 31985, 95361, 69523, 22335, 89529, 18015, 37823, 13714, 18301, 48466, 72562, 26823, 8685, 91072, 70990, 50562, 83874, 37907, 80524, 82948, 55029, 74275, 52771, 40341, 14684, 22069, 91696, 72268, 30169, 33884, 93154, 15682, 8916, 43800, 57123, 19063, 33954, 2363, 13490, 5337, 72645, 66204, 53684, 62550, 88066, 22066, 48227, 35785, 26079, 89642, 56425, 70523, 26283, 37509, 34153, 96918, 63804, 56282, 87611, 13114, 57595, 98833, 74195, 61541, 55200, 96997, 71346, 76948, 26520, 26595, 24507, 24252, 61996, 88646, 92075, 10104, 95119, 69136, 59626, 67712, 21609, 87149, 57015, 94992, 86393, 35926, 27212, 64768, 63948, 29778, 66543, 63383, 82308, 8898, 55136, 19096, 38033, 65833, 66766, 56118, 19240, 75574, 21966, 47984, 97701, 67331, 47224, 48718, 79083, 7069, 26625, 63530, 36616, 60707, 67032, 84997, 15809, 43993, 76344, 58463, 90554, 85508, 38800, 40531, 61505, 39868, 64540, 18386, 3606, 8954, 98659, 56066, 51250, 71778, 13824, 73338, 37749, 35646, 76619, 80731, 17581, 61032, 43200, 63491, 18697, 47149, 77425, 21283, 19919, 69451, 870, 53454, 96041, 86479, 48562, 10774, 15021, 99825, 67386, 55770, 80127, 12495, 63554, 42652, 68958, 31081, 36499, 70968, 80092, 86884, 58770, 75272, 33421, 93519, 61871, 84082, 92003, 1775, 777, 8805, 3576, 88199, 66495, 10494, 92026, 24893, 30, 46627, 9482, 13373, 47178, 58621, 6389, 29379, 59126, 78002, 70943, 36224, 46557, 57527, 46268, 46879, 70406, 90576, 15072, 65274, 42514, 95600, 443, 59788, 96042, 64168, 73452, 43474, 4057, 23071, 38868, 34451, 80970, 72996, 52955, 93985, 30609, 10766, 73403, 91052, 9735, 66660, 31178, 68746, 4155, 59184, 69433, 14405, 16960, 5825, 17369, 11121, 90603, 45362, 35375, 37081, 87371, 65059, 78554, 50711, 64873, 82033, 3543, 82579, 41105, 21808, 22347, 46363, 33001, 44393, 50188, 59804, 13001, 9506, 74408, 82250, 21814, 93996, 89482, 22119, 88271, 16808, 78929, 21986, 47921, 25594, 32725, 45839, 88187, 42508, 21987, 35986, 96044, 32812, 13723, 84648, 39160, 50485, 41610, 20906, 96339, 19091, 50084, 95565, 32095, 62404, 17952, 1155, 62520, 88454, 90890, 84735, 9007, 40252, 3335, 9893, 77468, 46700, 92847, 84321, 92129, 33112, 61410, 29506, 82195, 47983, 33935, 50250, 70466, 32149, 22794, 24360, 44823, 46426, 13938, 59103, 68965, 41066, 48176, 21347, 37920, 81747, 33809, 95337, 91215, 93870, 91895, 2481, 93458, 41845, 32963, 62320, 87220, 11847, 39522, 44801, 52264, 51239, 2925, 39208, 44428, 76722, 893, 8205, 95071, 62836, 50634, 37435, 94305, 41287, 15418, 59779, 14143, 2984, 40830, 31600, 89074, 20492, 13697, 57292, 45211, 379, 57539, 55327, 29942, 66334, 35072, 31807, 76561, 32878, 63108, 16313, 92965, 18902, 49164, 81109, 33338, 36360, 63663, 62342, 22687, 17599, 83210, 14148, 50990, 62588, 2, 52894, 90223, 85735, 5259, 16043, 32124, 61792, 33378, 49796, 13015, 42815, 19999, 43722, 61846, 44490, 17816, 430, 31352, 33952, 52956, 82743, 29038, 41467, 64086, 92056, 78652, 63109, 45421, 59240, 57227, 26832, 78138, 21549, 55907, 17149, 49512, 94879, 41368, 74375, 13114, 8063, 6151, 6329, 25499, 58730, 84926, 52512, 79412, 987, 3272, 293, 64281, 57688, 86640, 65848, 36244, 67679, 91773, 87122, 75808, 75194, 64261, 76955, 87200, 92727, 28238, 16533, 88067, 53136, 70994, 61629, 7773, 43712, 68436, 12454, 6171, 35971, 69854, 17468, 92420, 16113, 12027, 40603, 34793, 52088, 54320, 64713, 81202, 69983, 45242, 50776, 33387, 31650, 99770, 18913, 82735, 32896, 83916, 79271, 8585, 66321, 50935, 66024, 69305, 46074, 77907, 40113, 66647, 6824, 19900, 51167, 20485, 39049, 6832, 46212, 34729, 70908, 56758, 19669, 6674, 73508, 47299, 63436, 2924, 68762, 27135, 79993, 92606, 13142, 28152, 81264, 91219, 18065, 91312, 12539, 95474, 3116, 26899, 46089, 32870, 33811, 99443, 37946, 69987, 55265, 38425, 77322, 14760, 48398, 42821, 31917, 64757, 70012, 19547, 84908, 43957, 71657, 25025, 39631, 70542, 74737, 39096, 29061, 95366, 98195, 54679, 54562, 41440, 43483, 83931, 52633, 68848, 25194, 59026, 50296, 23013, 26478, 18898, 98670, 11445, 93267, 4857, 85350, 57368, 62774, 46255, 53219, 51464, 76682, 65245, 58430, 11204, 92381, 514, 61769, 38246, 2222, 53718, 83431, 6690, 24509, 61133, 45435, 11592, 88787, 43395, 34284, 55016, 58303, 17331, 34935, 31792, 75928, 48254, 28441, 75606, 82294, 30364, 6802, 70054, 6657, 66327, 48663, 19479, 81288, 87939, 79741, 97360, 27630, 52419, 42443, 70086, 56360, 73812, 5605, 20245, 4046, 80685, 31764, 74085, 12318, 39104, 93759, 49361, 49167, 68791, 99891, 47274, 96579, 77547, 49188, 83449, 60465, 14579, 84828, 54487, 1561, 82601, 8922, 9997, 50724, 48406, 74167, 32329, 74674, 92079, 28863, 99480, 53108, 92704, 16321, 26672, 62213, 25266, 48010, 99437, 59075, 75125, 34302, 34596, 61858, 89523, 85667, 91135, 36206, 32171, 80971, 78562, 80417, 15874, 24901, 82424, 53256, 63124, 50581, 11690, 34603, 85323, 54372, 54518, 30405, 43696, 13178, 51281, 27666, 96615, 52788, 23696, 95173, 24199, 77176, 55874, 55022, 70792, 8620, 53764, 83797, 19004, 88267, 51784, 19919, 62247, 62503, 39837, 72448, 92104, 24895, 76455, 57321, 96971, 70513, 68249, 24023, 73669, 81971, 20306, 19247, 31866, 48032, 59243, 96701, 19487, 18757, 36086, 12930, 80541, 67566, 97179, 74955, 2251, 18005, 19471, 22199, 4451, 7156, 65187, 26171, 70772, 6326, 32566, 13542, 22861, 87562, 94514, 93549, 93786, 93504, 46970, 26913, 96107, 66689, 92161, 43218, 3584, 12490, 57361, 30776, 29680, 68973, 23160, 48235, 4507, 51359, 85145, 28057, 28829, 40311, 30630, 61266, 81334, 46446, 20232, 63342, 49024, 51400, 80230, 65051, 89653, 84391, 93680, 49981, 55096, 88232, 50655, 19719, 90508, 8428, 85872, 88276, 72849, 12884, 51639, 71152, 30681, 23821, 21651, 55688, 49193, 78101, 38247, 45344, 8633, 20454, 51583, 64292, 2023, 33912, 12401, 62070, 49255, 7928, 71135, 17428, 37329, 84446, 48823, 41572, 5729, 9905, 68737, 15562, 48012, 60934, 24600, 17954, 90166, 43192, 89412, 68988, 29391, 41941, 60684, 38411, 26955, 23862, 70839, 15982, 27490, 5633, 79038, 42103, 29120, 46680, 81538, 35516, 77996, 64998, 72249, 58186, 64567, 58257, 89740, 62612, 13594, 45242, 39798, 90685, 79120, 79533, 59326, 29710, 17426, 25720, 3523, 23820, 45053, 58989, 9312, 54296, 46681, 58145, 47557, 1439, 99532, 3766, 74498, 65895, 25686, 36354, 2248, 36016, 20812, 6669, 63935, 60974, 90232, 7463, 96143, 18221, 94734, 16145, 98543, 40547, 8981, 57537, 32182, 49444, 27214, 83623, 92147, 8516, 71712, 50604, 63227, 78772, 12293, 631, 64814, 45789, 67981, 78412, 12304, 99641, 60913, 86571, 40457, 59128, 27224, 12211, 99013, 19697, 85114, 75135, 34823, 19483, 15598, 21228, 87745, 4695, 87492, 9190, 85932, 68134, 54436, 37863, 19722, 71275, 52061, 24455, 61079, 93001, 73272, 27339, 19620, 44904, 25188, 44883, 7348, 16942, 83288, 48578, 85359, 15239, 75723, 3797, 82227, 62580, 65610, 45336, 59692, 64056, 4477, 35231, 78635, 48936, 92061, 90448, 50053, 12050, 88630, 2953, 81624, 26463, 45832, 70934, 3433, 28648, 2888, 59982, 25858, 92717, 28754, 38090, 1481, 52479, 54813, 53609, 30076, 38096, 80468, 63768, 68731, 49396, 55813, 41139, 78768, 29727, 46760, 2374, 22848, 45159, 49547, 38977, 39748, 73572, 57044, 20538, 72113, 59021, 7398, 17481, 23768, 13546, 53324, 2935, 41460, 85901, 63415, 36211, 44947, 11976, 4568, 22857, 84083, 8821, 1338, 59575, 87723, 10092, 78275, 66130, 83666, 87823, 25058, 25851, 72302, 13352, 97828, 94495, 19909, 63250, 51788, 9464, 80147, 22601, 25593, 72424, 51152, 72842, 76563, 98682, 42431, 7710, 46660, 51462, 42234, 26190, 7099, 74049, 50537, 65712, 43877, 59233]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<point> main[index]))))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<point> opposite[index]))))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})))) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})))))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}))))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))))))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}))))))))) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.9) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})))) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})))))) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})))) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}))))) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}))) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}))) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}))))) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.1) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}))))) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 5) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :}) {::} (<code> (<index> index =  (<n> 4)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :})))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :})))))) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))))) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))))))))) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> +)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))))))   (<eval> >)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.016853932584269662, 0.5005756184774266]