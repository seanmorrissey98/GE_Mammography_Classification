Generation:
6

Phenotype:
def p():
  x = 0.0
  index = 3
  if opposite[index] - main[index] + main[index] < sum(opposite[:-index]) - sum(opposite[:-index]) - sum(opposite[:-index]) + sum(main[-index:]) + main[index] - main[index] + main[index] + opposite[index] + sum(opposite[:-index]):
    x = (x + 0.5)
  index = 6
  if sum(main[-index:]) - sum(opposite[-index:]) - opposite[index] + opposite[index] + sum(opposite[:-index]) + sum(opposite[:-index]) - opposite[index] + sum(main[-index:]) + sum(main[:-index]) < sum(opposite[-index:]) + sum(main[-index:]) + sum(main[:-index]) - opposite[index] - opposite[index]:
    x = (x - 0.0000001)
  index = 7
  if sum(main[-index:]) - opposite[index] < main[index] + sum(main[-index:]) + opposite[index] - main[index] - main[index] + main[index] + opposite[index]:
    x = (x - 0.1)
  index = 25
  if main[index] - opposite[index] - main[index] - main[index] > opposite[index]:
    x = (x - 0.5)
  index = 34
  if main[index] - opposite[index] - opposite[index] - opposite[index] < sum(main[:-index]) - main[index] - opposite[index] - main[index]:
    x = (x - 0.2)
  index = 5
  if sum(main[:-index]) - sum(main[-index:]) + sum(opposite[-index:]) < main[index]:
    x = (x + 0.2)
  index = 30
  if main[index] < 1:
    if opposite[index] < main[index] + 0.2:
      x = (x + 0.6)
  else:
    if main[index] > main[index] + 6:
      x = (x - 0.6)
    else:
      x = (x - 0.1)
  index = 9
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 500:
    x = (x + 0.9)
  index = 16
  if main[index] < 1:
    if main[index] < opposite[index] + 0.001:
      x = (x + 0.0000001)
  else:
    if main[index] > opposite[index] + 9:
      x = (x + 0.5)
    else:
      x = (x - 0.8)
  index = 47
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 1.0)
  index = 16
  if opposite[index] - opposite[index] < opposite[index] - opposite[index]:
    x = (x - 0.1)
  index = 17
  if main[index] < 1:
    if opposite[index] > main[index] + 0.4:
      x = (x - 0.00001)
  else:
    if opposite[index] < opposite[index] + 6:
      x = (x - 1.0)
    else:
      x = (x - 0.8)
  index = 40
  if main[index] > main[index]:
    x = (x + 0.01)
  index = 7
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.0001)
  index = 39
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.0000001)
  index = 49
  if main[index] < 1:
    if main[index] > opposite[index] + 0.8:
      x = (x + 0.2)
  else:
    if opposite[index] < main[index] + 7:
      x = (x - 0.0000001)
    else:
      x = (x + 0.6)
  index = 14
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.01)
  index = 7
  if opposite[index] > opposite[index]:
    x = (x - 0.9)
  index = 21
  if opposite[index] < sum(main[:-index]):
    x = (x - 0.001)
  index = 13
  if main[index] < 1:
    if opposite[index] < main[index] + 0.001:
      x = (x + 0.01)
  else:
    if main[index] < opposite[index] + 4:
      x = (x - 0.01)
    else:
      x = (x - 0.6)
  index = 35
  if opposite[index] - sum(main[-index:]) < sum(main[-index:]):
    x = (x - 0.2)
  index = 16
  if main[index] < 1:
    if opposite[index] > main[index] + 0.00001:
      x = (x + 1.0)
  else:
    if opposite[index] < opposite[index] + 3:
      x = (x - 0.2)
    else:
      x = (x - 0.9)
  index = 20
  if main[index] < 1:
    if main[index] < main[index] + 0.2:
      x = (x + 0.9)
  else:
    if opposite[index] < main[index] + 3:
      x = (x - 0.1)
    else:
      x = (x + 0.2)
  index = 48
  if opposite[index] > main[index]:
    x = (x - 0.8)
  index = 36
  if opposite[index] < opposite[index]:
    x = (x + 0.000001)
  index = 18
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.01)
  index = 41
  if main[index] > main[index]:
    x = (x - 0.7)
  index = 50
  if sum(opposite[-index:]) < main[index]:
    x = (x - 0.6)
  index = 21
  if main[index] < 1:
    if main[index] > opposite[index] + 0.0001:
      x = (x - 0.000001)
  else:
    if main[index] > main[index] + 0:
      x = (x - 0.3)
    else:
      x = (x - 0.5)
  index = 5
  if main[index] < main[index]:
    x = (x + 0.4)
  index = 13
  if main[index] < main[index]:
    x = (x - 0.001)
  index = 2
  if main[index] < opposite[index]:
    x = (x + 0.0001)
  index = 42
  if main[index] < 1:
    if main[index] > main[index] + 0.01:
      x = (x - 0.000001)
  else:
    if opposite[index] < main[index] + 8:
      x = (x + 0.00001)
    else:
      x = (x - 0.8)
  index = 49
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x - 0.000001)
  index = 47
  if main[index] < 1:
    if main[index] > main[index] + 0.0001:
      x = (x + 0.2)
  else:
    if main[index] < main[index] + 1:
      x = (x - 0.4)
    else:
      x = (x + 0.1)
  index = 34
  if sum(opposite[:-index]) < main[index]:
    x = (x - 0.00001)
  index = 18
  if main[index] > opposite[index]:
    x = (x - 0.000001)
  index = 11
  if opposite[index] < main[index]:
    x = (x - 0.00001)
  index = 23
  if main[index] > main[index]:
    x = (x + 0.7)
  index = 19
  if main[index] < 1:
    if opposite[index] > main[index] + 0.5:
      x = (x + 0.7)
  else:
    if opposite[index] < main[index] + 6:
      x = (x + 0.2)
    else:
      x = (x - 0.5)
  index = 47
  if opposite[index] < opposite[index]:
    x = (x - 0.7)
  index = 20
  if opposite[index] > opposite[index]:
    x = (x - 0.1)
  index = 46
  if opposite[index] > opposite[index]:
    x = (x + 0.0001)
  index = 31
  if main[index] < main[index]:
    x = (x - 0.8)
  index = 46
  if opposite[index] - opposite[index] < opposite[index] - main[index]:
    x = (x - 0.1)
  index = 10
  if opposite[index] > opposite[index]:
    x = (x + 0.6)
  index = 42
  if main[index] > opposite[index]:
    x = (x + 0.7)
  index = 47
  if main[index] < opposite[index]:
    x = (x - 0.00001)
  index = 45
  if main[index] < 1:
    if main[index] < opposite[index] + 0.0000001:
      x = (x + 0.0001)
  else:
    if main[index] > main[index] + 2:
      x = (x + 1.0)
    else:
      x = (x - 0.7)
  index = 48
  if opposite[index] - opposite[index] < main[index] - opposite[index]:
    x = (x + 1.0)
  index = 23
  if main[index] < 1:
    if main[index] > main[index] + 0.6:
      x = (x + 0.7)
  else:
    if opposite[index] > main[index] + 6:
      x = (x + 0.8)
    else:
      x = (x + 0.00001)
  index = 40
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.000001:
      x = (x - 0.001)
  else:
    if opposite[index] > main[index] + 8:
      x = (x - 0.0001)
    else:
      x = (x - 0.8)
  index = 8
  if main[index] < main[index]:
    x = (x - 0.01)
  index = 39
  if main[index] < 1:
    if main[index] > main[index] + 0.001:
      x = (x + 0.7)
  else:
    if main[index] < opposite[index] + 7:
      x = (x + 0.0001)
    else:
      x = (x - 0.0000001)
  index = 2
  if opposite[index] > main[index]:
    x = (x + 0.9)
  index = 29
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 5000:
    x = (x + 1.0)
  index = 28
  if sum(main[:-index]) < sum(main[:-index]):
    x = (x - 0.01)
  index = 43
  if main[index] < opposite[index]:
    x = (x + 0.4)
  index = 11
  if sum(main[:-index]) > sum(main[:-index]):
    x = (x - 0.0000001)
  index = 18
  if opposite[index] < opposite[index] + main[index]:
    x = (x + 0.3)
  index = 12
  if sum(opposite[-index:]) > main[index]:
    x = (x - 0.00001)
  index = 8
  if opposite[index] < opposite[index]:
    x = (x + 0.3)
  index = 41
  if main[index] < opposite[index]:
    x = (x - 0.8)
  index = 19
  if sum(main[-index:]) + main[index] - main[index] + sum(main[:-index]) > sum(opposite[:-index]) - sum(opposite[:-index]) + sum(opposite[-index:]):
    x = (x - 0.1)
  index = 8
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.8:
      x = (x + 0.0001)
  else:
    if main[index] < opposite[index] + 2:
      x = (x + 0.7)
    else:
      x = (x - 0.00001)
  index = 33
  if opposite[index] - sum(main[:-index]) > main[index] - main[index] + sum(opposite[-index:]) - sum(main[:-index]):
    x = (x - 0.7)
  index = 39
  if opposite[index] + opposite[index] - opposite[index] + opposite[index] - sum(opposite[-index:]) < opposite[index] + sum(main[-index:]) + main[index]:
    x = (x + 0.4)
  index = 6
  if sum(opposite[:-index]) > sum(opposite[-index:]) - opposite[index]:
    x = (x - 0.0000001)
  index = 11
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.2)
  index = 38
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.001)
  index = 40
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x - 0.1)
  index = 44
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.7:
      x = (x - 0.0001)
  else:
    if opposite[index] < opposite[index] + 2:
      x = (x + 0.2)
    else:
      x = (x - 0.1)
  index = 24
  if main[index] > opposite[index]:
    x = (x - 0.1)
  index = 29
  if opposite[index] < opposite[index]:
    x = (x - 0.01)
  index = 34
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 50:
    x = (x - 0.6)
  index = 36
  if opposite[index] > opposite[index]:
    x = (x - 0.4)
  index = 22
  if main[index] < main[index]:
    x = (x + 0.0000001)
  index = 17
  if main[index] < opposite[index]:
    x = (x - 0.1)
  index = 45
  if main[index] < 1:
    if main[index] > main[index] + 0.8:
      x = (x + 0.01)
  else:
    if opposite[index] < main[index] + 1:
      x = (x + 0.4)
    else:
      x = (x + 0.1)
  index = 43
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x - 0.8)
  index = 46
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 5000:
    x = (x - 0.0001)
  index = 49
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.001:
      x = (x - 0.00001)
  else:
    if opposite[index] > opposite[index] + 4:
      x = (x + 0.5)
    else:
      x = (x - 0.000001)
  index = 49
  if opposite[index] > opposite[index]:
    x = (x + 0.6)
  index = 37
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.00001)
  index = 20
  if opposite[index] < main[index]:
    x = (x + 0.6)
  index = 21
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x - 0.3)
  index = 37
  if opposite[index] > opposite[index]:
    x = (x + 0.1)
  index = 27
  if main[index] > main[index]:
    x = (x + 0.0001)
  index = 32
  if main[index] > main[index]:
    x = (x + 0.2)
  index = 20
  if main[index] + opposite[index] > main[index]:
    x = (x - 0.2)
  index = 16
  if main[index] < 1:
    if opposite[index] > opposite[index] + 0.5:
      x = (x - 0.3)
  else:
    if opposite[index] > main[index] + 6:
      x = (x + 0.2)
    else:
      x = (x + 0.8)
  index = 0
  if main[index] < opposite[index]:
    x = (x - 1.0)
  index = 10
  if main[index] > main[index]:
    x = (x - 0.4)
  index = 28
  if sum(main[-index:]) < opposite[index] + main[index]:
    x = (x - 0.001)
  index = 43
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.0000001)
  index = 1
  if sum(opposite[:-index]) > opposite[index]:
    x = (x - 0.1)
  index = 49
  if main[index] < 1:
    if main[index] > main[index] + 0.001:
      x = (x + 0.6)
  else:
    if opposite[index] > opposite[index] + 2:
      x = (x - 0.7)
    else:
      x = (x - 0.2)
  index = 37
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 50:
    x = (x - 0.000001)
  index = 49
  if abs(sum(main) - sum(opposite)) > 5000:
    x = (x + 0.5)
  index = 16
  if sum(opposite[:-index]) < sum(opposite[:-index]):
    x = (x - 0.9)
  index = 43
  if abs(sum(main[:-index]) - sum(opposite[-index:])) > 50:
    x = (x + 0.3)
  index = 36
  if main[index] < main[index]:
    x = (x + 0.0001)
  index = 15
  if main[index] > main[index]:
    x = (x + 0.0000001)
  index = 28
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.4)
  index = 22
  if abs(sum(main[:-index]) - sum(opposite[:-index])) > 500:
    x = (x + 0.6)
  index = 19
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 100:
    x = (x + 0.0001)
  index = 2
  if sum(main[:-index]) < main[index]:
    x = (x + 0.001)
  index = 34
  if main[index] > main[index]:
    x = (x + 0.4)
  index = 46
  if abs(sum(main[-index:]) - sum(opposite[-index:])) > 50:
    x = (x + 0.01)
  index = 1
  if abs(sum(main) - sum(opposite)) > 10000:
    x = (x + 0.01)
  index = 29
  if main[index] - sum(opposite[-index:]) < main[index] + opposite[index] + sum(main[-index:]):
    x = (x + 0.7)
  index = 33
  if main[index] < sum(opposite[-index:]):
    x = (x + 0.00001)
  index = 35
  if main[index] < 1:
    if opposite[index] < opposite[index] + 0.3:
      x = (x - 0.4)
  else:
    if opposite[index] < main[index] + 2:
      x = (x - 0.000001)
    else:
      x = (x - 0.7)
  index = 20
  if abs(sum(main) - sum(opposite)) > 1000:
    x = (x + 0.5)
  index = 32
  if abs(sum(main[-index:]) - sum(opposite[:-index])) > 500:
    x = (x - 1.0)
  index = 26
  if sum(main[:-index]) < main[index]:
    x = (x - 0.6)
  return x
XXX_output_XXX = p()

Genotype:
[21473, 58998, 75245, 15226, 18355, 16119, 45773, 1681, 43027, 37484, 56708, 32939, 82855, 88193, 27433, 562, 3106, 79261, 469, 50053, 29105, 69818, 3872, 44174, 69386, 69999, 78106, 90313, 27734, 92508, 39268, 39767, 52918, 87449, 4642, 98741, 5389, 63754, 89638, 60412, 96044, 46948, 69227, 7873, 37486, 98512, 56291, 52417, 51120, 62060, 71336, 96341, 57792, 64943, 81692, 40832, 68396, 89141, 15251, 63814, 31603, 8139, 78089, 67097, 2569, 56414, 87126, 86708, 4561, 99395, 75043, 64975, 13787, 53981, 36400, 62801, 27905, 64668, 57950, 98600, 91187, 9037, 32568, 94808, 87936, 88219, 25745, 49102, 86045, 26675, 1409, 81379, 82268, 57374, 9065, 5623, 16169, 64157, 11348, 281, 70870, 23185, 75994, 7190, 94468, 60222, 27237, 20614, 79100, 41855, 7585, 68719, 29128, 71746, 42415, 99278, 75186, 31718, 70953, 89858, 25904, 81429, 73540, 70807, 8195, 80011, 91466, 69101, 71365, 87461, 71832, 58591, 59293, 99918, 57578, 70939, 95325, 65487, 78809, 64797, 5908, 25090, 80520, 14990, 50772, 71537, 25391, 86351, 15530, 6852, 19192, 97088, 66659, 91992, 92415, 81221, 15049, 30346, 64885, 70155, 54776, 16762, 14764, 2480, 5478, 31627, 18715, 27372, 78659, 42944, 4093, 81710, 59839, 3319, 73971, 78162, 46161, 69745, 25115, 47485, 25352, 83291, 88804, 27162, 67164, 61484, 85929, 7917, 12993, 7426, 17468, 62404, 51231, 59717, 83398, 98229, 40528, 79262, 20303, 19449, 55494, 72457, 71454, 8350, 77084, 61201, 32399, 50717, 4050, 35884, 67286, 51618, 97290, 47609, 65331, 33214, 98563, 97298, 82456, 27031, 85189, 40788, 13778, 23359, 58822, 75067, 48213, 3612, 786, 55598, 71967, 82469, 98785, 66321, 33856, 75888, 67207, 99091, 27479, 86905, 59737, 47297, 75448, 10464, 73555, 650, 33565, 6951, 99686, 356, 49756, 15885, 78769, 53833, 52693, 46422, 72827, 58002, 47264, 6721, 78305, 85863, 98808, 82324, 34582, 24527, 36142, 15660, 63066, 22666, 51054, 77493, 8299, 3098, 52069, 88023, 40572, 4899, 22902, 37667, 69704, 83947, 44245, 8037, 62890, 46410, 31086, 49585, 92683, 44772, 55928, 61306, 36357, 18949, 46354, 45948, 26578, 3500, 41504, 94318, 17229, 47041, 41475, 50626, 35778, 47644, 42606, 26708, 77737, 3254, 30883, 18824, 66804, 84250, 84930, 51586, 38410, 14578, 10831, 54588, 24497, 87261, 63763, 78802, 89446, 92867, 14930, 17706, 16767, 60117, 96105, 60509, 92109, 16537, 23395, 19619, 20791, 92252, 86537, 64486, 99759, 50182, 60759, 19867, 52474, 50285, 16397, 42599, 2582, 7577, 47512, 39725, 26125, 14140, 5115, 77469, 84385, 39060, 59347, 69929, 81904, 9527, 18685, 15397, 30987, 62836, 75536, 97983, 1956, 33144, 95297, 20652, 29118, 57865, 74963, 7239, 24075, 22834, 65481, 83709, 48526, 78694, 20228, 78492, 74285, 92198, 70644, 7734, 95778, 51553, 83832, 1769, 87176, 24811, 94249, 14486, 48734, 67292, 83082, 25271, 80293, 80394, 73601, 85468, 87513, 48391, 48167, 70106, 27482, 46207, 10102, 97036, 95738, 34576, 81831, 77888, 9827, 35933, 48373, 43878, 52633, 1729, 70248, 66583, 7448, 83563, 26751, 4122, 16558, 1952, 9068, 46085, 6641, 37853, 56947, 80714, 20929, 65902, 17318, 60046, 84285, 4515, 43878, 44429, 75819, 45175, 81141, 85610, 745, 10606, 63361, 1562, 91508, 78031, 20081, 71597, 33445, 84205, 6016, 95403, 3157, 8417, 31491, 18490, 17875, 24381, 71434, 26973, 42533, 32271, 15747, 77581, 33847, 17715, 70384, 30684, 36357, 57594, 21809, 39689, 12976, 95715, 75131, 48970, 22231, 25489, 64442, 56317, 34048, 49651, 43854, 32893, 94336, 1768, 61248, 88556, 36837, 26745, 3541, 87919, 56836, 78471, 95309, 90780, 98934, 23264, 77731, 31085, 3445, 39955, 67606, 7511, 90426, 55768, 96520, 86683, 4866, 46503, 92000, 25165, 35011, 9790, 31489, 10112, 83195, 76495, 117, 22459, 75255, 19265, 13436, 52118, 49174, 98928, 49278, 772, 42156, 92306, 68875, 45291, 76395, 51060, 22789, 89069, 78295, 60164, 82534, 45527, 24213, 79666, 25691, 7645, 36630, 24553, 33133, 60889, 30948, 22017, 49796, 59268, 38997, 64309, 31893, 25665, 52122, 71660, 34614, 48995, 55323, 28447, 498, 19427, 80099, 88997, 84241, 78509, 90664, 11536, 74237, 38658, 21310, 42964, 74978, 79736, 20328, 90088, 60943, 58972, 42126, 68206, 86380, 26750, 64343, 36118, 27353, 74204, 88956, 64582, 40717, 39157, 66877, 84434, 3820, 36220, 66059, 75890, 85892, 34517, 56161, 28383, 19553, 10705, 39217, 70795, 38215, 4036, 51472, 81774, 88661, 93783, 4110, 26354, 63769, 84559, 37050, 7954, 75900, 97655, 99885, 10946, 17395, 42032, 26593, 9619, 29475, 9022, 62340, 58191, 78914, 93782, 99578, 57595, 15005, 82060, 85074, 82963, 59347, 38879, 35006, 41432, 56974, 4592, 54081, 2196, 71492, 40977, 50094, 23761, 17595, 41401, 75088, 53180, 48430, 69970, 67142, 32100, 2869, 87162, 57523, 41283, 48197, 33332, 22378, 62302, 54368, 3149, 88222, 95760, 15652, 29605, 72916, 92508, 26795, 2618, 65887, 84156, 58391, 15903, 97295, 37620, 41985, 5325, 12931, 2401, 75894, 838, 71455, 87810, 67963, 75710, 9423, 10789, 91774, 90841, 66912, 38718, 11188, 78311, 28197, 35365, 71444, 30050, 89781, 63103, 99249, 53397, 11076, 77749, 98299, 77288, 47901, 32430, 2284, 91478, 79605, 66706, 36376, 65631, 42389, 70997, 96000, 75007, 1388, 88861, 16075, 98839, 37968, 76783, 35424, 96718, 14875, 30460, 44057, 72944, 23722, 7099, 6595, 41712, 89475, 26529, 75153, 49244, 2609, 4464, 99652, 87388, 74539, 3885, 19173, 10330, 78258, 59751, 9339, 40252, 79289, 68150, 60491, 52388, 74937, 4769, 73974, 5622, 89005, 86446, 65326, 97766, 41197, 45728, 4456, 52632, 31071, 65431, 59908, 5173, 57571, 43542, 86259, 67434, 67317, 82695, 81384, 91846, 29505, 19782, 83370, 4001, 73880, 6809, 66480, 59348, 98000, 92535, 17216, 64104, 47784, 53770, 82710, 77820, 25436, 64872, 14058, 45714, 1758, 72457, 22126, 34615, 61091, 27842, 69778, 23073, 7577, 73992, 87569, 18944, 83166, 33248, 34480, 56752, 64475, 74350, 16821, 22096, 69821, 44474, 12915, 40817, 28830, 40777, 33186, 91272, 41659, 30055, 26017, 62647, 31737, 47506, 38330, 50695, 714, 17187, 15536, 36092, 51956, 39837, 73876, 33513, 50506, 95442, 57323, 19625, 61783, 95126, 91255, 83932, 91204, 97356, 67223, 44443, 92944, 47524, 46378, 44779, 89637, 69100, 12791, 47732, 55757, 31406, 42828, 8694, 68483, 17052, 76625, 403, 7997, 26257, 32770, 45678, 77779, 8747, 13814, 80197, 84207, 73230, 26689, 51491, 26180, 5719, 67499, 63381, 41716, 60796, 64848, 15561, 90724, 78355, 90043, 60031, 22754, 62658, 73844, 49128, 73325, 98431, 963, 93805, 75684, 13044, 92879, 1593, 86990, 85187, 4183, 66717, 77945, 35547, 92311, 87820, 40792, 23944, 40484, 85154, 79521, 74776, 78990, 24948, 2521, 62047, 32672, 30309, 74866, 56207, 78448, 91528, 89742, 58695, 44730, 31680, 77591, 93540, 11852, 64200, 60233, 13587, 65939, 30395, 57719, 67778, 47028, 11789, 34447, 63599, 36749, 83530, 49895, 28789, 78932, 67051, 60485, 57246, 9306, 62542, 93225, 62259, 91315, 62501, 78585, 64101, 14603, 84552, 55903, 80540, 13064, 84790, 69583, 61388, 8716, 84180, 27015, 37396, 62092, 46109, 11051, 63936, 8757, 84257, 69504, 78993, 32718, 33599, 1975, 96351, 46540, 47049, 18673, 82154, 92671, 68296, 22626, 94487, 8824, 98821, 90535, 80789, 88285, 74538, 36834, 96790, 26124, 84449, 87208, 59767, 52002, 49581, 15111, 32967, 7165, 84853, 93056, 56106, 75424, 60675, 85692, 51810, 81252, 25696, 70702, 70354, 84396, 98799, 8732, 68596, 38778, 42361, 5181, 86473, 93358, 19773, 5244, 55398, 76034, 63995, 68963, 43457, 95632, 28019, 62048, 66468, 27865, 95115, 26496, 84460, 8981, 97852, 7141, 15142, 38161, 26387, 13378, 30058, 44538, 44334, 37198, 50889, 58372, 7910, 66840, 79649, 79631, 76363, 55923, 7875, 525, 15906, 49109, 99374, 63592, 24232, 71950, 69346, 3087, 74114, 57802, 78511, 9949, 59974, 51984, 45832, 23564, 9287, 72700, 71926, 94397, 23470, 78510, 56627, 34971, 4832, 32131, 60589, 88672, 61687, 83752, 71038, 77161, 29669, 16240, 11079, 24674, 14503, 87174, 83667, 36093, 96404, 58941, 4026, 96709, 42271, 70918, 73508, 78746, 17847, 92751, 2409, 68632, 79165, 19180, 94813, 24388, 50095, 22129, 43410, 97292, 31534, 29388, 3622, 30263, 70205, 62146, 28819, 62610, 25236, 4181, 68785, 22460, 40415, 23193, 43897, 73129, 1634, 15019, 46983, 67356, 28811, 69902, 55118, 2605, 71642, 65160, 83708, 15041, 52098, 34829, 11147, 43365, 15301, 11216, 53238, 17252, 18778, 1198, 83427, 7844, 34487, 65005, 8847, 38651, 18999, 45795, 24625, 88048, 27509, 51706, 88524, 83454, 66615, 54137, 90282, 17864, 86520, 39747, 12460, 69582, 31504, 32768, 28957, 14224, 82458, 68066, 84701, 83259, 24884, 8563, 44244, 16589, 73347, 5268, 59397, 97652, 45407, 49894, 62075, 11200, 73679, 54325, 94090, 29659, 44178, 87231, 9163, 82614, 24832, 65133, 85746, 35424, 60624, 64729, 24570, 44624, 99167, 99571, 80059, 44708, 66579, 76141, 91698, 47876, 56094, 81121, 41059, 30502, 72265, 43000, 84879, 96823, 33663, 32493, 69977, 11293, 68570, 42829, 80317, 30139, 85434, 90413, 20590, 54901, 66345, 91637, 34720, 12855, 5736, 76832, 91939, 64122, 80806, 21301, 86768, 58891, 35431, 49000, 70261, 53025, 59902, 3519, 58213, 45391, 4498, 32699, 71024, 82115, 64024, 1788, 6812, 67507, 51886, 69805, 30095, 65518, 19902, 47200, 76306, 72663, 46565, 51342, 50053, 1320, 279, 78347, 5058, 2621, 73436, 31284, 55959, 50977, 35583, 46136, 70067, 99793, 16150, 69794, 14700, 66787, 43620, 49133, 21400, 25835, 46840, 54566, 74668, 93649, 59254, 92657, 85914, 68160, 33949, 85008, 98622, 58223, 73853, 99308, 99298, 94793, 59787, 80556, 85128, 98433, 37852, 62449, 17653, 69716, 66697, 87425, 37984, 21727, 90700, 66601, 96883, 18611, 30192, 19491, 45491, 83080, 38432, 63544, 29213, 45971, 65569, 77562, 94648, 90272, 44764, 47366, 25216, 68884, 34990, 15730, 80381, 56887, 25502, 19712, 11058, 43912, 23073, 20587, 5317, 43386, 20753, 90601, 736, 58815, 54973, 36405, 67012, 21614, 97041, 56092, 21573, 63036, 51868, 85114, 34874, 50908, 28739, 479, 79511, 59792, 29226, 60734, 75882, 88314, 67408, 90605, 13992, 55512, 60590, 79645, 97392, 70790, 6871, 98585, 54097, 2293, 74268, 18688, 84168, 84709, 23102, 57005, 5272, 68812, 7000, 35609, 75794, 26224, 27334, 47265, 79543, 56298, 67631, 67144, 88427, 69010, 8575, 97034, 51719, 78991, 16984, 90826, 86317, 16698, 21374, 53368, 27524, 8216, 49800, 92134, 73046, 41298, 69775, 30538, 66573, 35407, 72757, 44173, 36728, 60833, 25423, 47937, 17217, 60622, 15526, 26788, 22513, 31975, 65853, 85275, 53120, 16253, 72628, 63323, 28861, 15982, 72295, 69139, 48682, 37971, 18343, 23486, 60724, 5879, 99205, 17004, 34274, 67626, 20690, 66438, 14520, 9402, 44737, 12923, 17773, 55447, 40471, 8110, 25557, 23866, 84608, 54762, 90784, 37687, 82291, 76092, 86941, 50256, 24098, 78617, 88241, 78189, 90846, 97573, 56951, 55782, 4687, 53968, 99693, 25465, 37979, 2448, 49762, 6390, 28495, 71599, 33299, 14668, 90442, 67938, 6743, 97535, 49867, 54105, 78832, 89394, 19365, 65328, 30653, 37042, 64972, 622, 95638, 61936, 93605, 83148, 34440, 28745, 9094, 79027, 45788, 96425, 16092, 68459, 27641, 60745, 25977, 45358, 89317, 57625, 23809, 30142, 33356, 31560, 45385, 32051, 35409, 83293, 95462, 70072, 34568, 60830, 10557, 33403, 68794, 3748, 48759, 65445, 93274, 21242, 95383, 61587, 40834, 87122, 87241, 77776, 46693, 87472, 60057, 46340, 35042, 83164, 63857, 44600, 37342, 16823, 57690, 94240, 95075, 1065, 46636, 68803, 12417, 65090, 84799, 36799, 80717, 7795, 20850, 26564, 35625, 16627, 58208, 98579, 84712, 97785, 77512, 89861, 95945, 97781, 35880, 24772, 11588, 65042, 64921, 82252, 38848, 5936, 39108, 97745, 29256, 69809, 31366, 37787, 20839, 19467, 4909, 56001, 67298, 64805, 14071, 60200, 88639, 18031, 56223, 11948, 50491, 88888, 27613, 47411, 48730, 92689, 22884, 92565, 79961, 50241, 36812, 34717, 2575, 4169, 33971, 15743, 94967, 13493, 90953, 98606, 39592, 49039, 51590, 75258, 97226, 89692, 53890, 23791, 26064, 88683, 57567, 60030, 50646, 98077, 79089, 46637, 68628, 73085, 28705, 64927, 32227, 35946, 47595, 18025, 81095, 3235, 94144, 70440, 4828, 88700, 1228, 4006, 88690, 25893, 88195, 33444, 46858, 89010, 15164, 7141, 5362, 64959, 87115, 5508, 5327, 93670, 9805, 18706, 3325, 97375, 28856, 74221, 80186, 49045, 2333, 73231, 73446, 82978, 59216, 49574, 92404, 64656, 44491, 70057, 87885, 74657, 35920, 86630, 39042, 13274, 3463, 78298, 72669, 53004, 39877, 33539, 64063, 52927, 28548, 79213, 10005, 67829, 71532, 19290, 65161, 22957, 92860, 82719, 30281, 953, 91952, 75763, 60272, 73719, 89300, 60081, 86296, 84773, 19637, 77242, 22190, 92694, 88954, 68521, 47336, 14188, 95734, 29980, 99519, 70573, 84246, 75607, 43002, 93881, 88998, 99852, 85277, 18102, 81978, 84655, 64594, 27444, 33928, 59563, 27025, 62238, 13639, 14694, 5157, 9983, 15933, 71622, 46770, 33209, 18914, 71700, 8257, 23243, 17514, 36750, 39396, 39571, 74052, 80648, 22211, 34282, 9572, 98791, 53997, 30556, 89975, 86084, 63642, 94994, 81829, 40775, 55042, 30956, 50210, 50890, 19862, 74765, 94164, 76186, 88168, 8455, 26142, 78641, 74486, 42568, 65839, 72508, 17655, 50627, 34365, 74617, 7952, 74234, 28191, 49934, 13391, 84711, 29468, 83031, 60877, 35715, 24755, 65806, 39041, 87092, 78106, 2836, 66816, 64362, 93134, 31720, 99781, 99427, 38090, 34875, 75123, 91541, 77641, 59631, 5660, 57111, 21965, 60882, 68666, 40317, 15539, 28062, 26467, 52342, 8722, 39027, 61344, 87833, 29996, 91684, 39148, 22112, 6082, 40112, 79560, 77143, 64785, 53913, 14783, 73633, 88129, 40391, 85003, 85257, 55401, 3657, 6649, 92219, 68056, 73724, 40249, 56957, 61540, 74394, 41852, 4333, 23439, 9108, 90875, 98952, 74581, 61799, 72835, 33919, 61356, 56448, 67371, 82906, 77191, 25176, 41287, 90269, 22047, 12486, 38761, 23057, 80467, 58483, 4854, 72289, 3244, 19001, 52812, 49003, 72996, 53066, 22858, 435, 97204, 5005, 11161, 71736, 48247, 49408, 35084, 32524, 23450, 16001, 5621, 12320, 15922, 32459, 74205, 3324, 85353, 73645, 83104, 99296, 13006, 4377, 59856, 19346, 50953, 84407, 58533, 76503, 16060, 57495, 23096, 16334, 95192, 4276, 7692, 81906, 96980, 84014, 71084, 82479, 41923, 35983, 83520, 52034, 10420, 61784, 40504, 15198, 88888, 65448, 9644, 912, 81775, 91326, 88066, 519, 23032, 33834, 54180, 41544, 69981, 97051, 37039, 54844, 27706, 57041, 96371, 49464, 43636, 14143, 74899, 41340, 59440, 84652, 83014, 46340, 38856, 53057, 59334, 1531, 66893, 54240, 1665, 48696, 91787, 59139, 99290, 41094, 17862, 34171, 31261, 27492, 87641, 31774, 49816, 59216, 45227, 90114, 57945, 9260, 17340, 84423, 64111, 81115, 13267, 8304, 30432, 94891, 45441, 98492, 79672, 55992, 94420, 3415, 18273, 70592, 5, 69250, 13179, 45483, 832, 90546, 89784, 57995, 54114, 25705, 22444, 1693, 39543, 48126, 97456, 8071, 32579, 30321, 25430, 7071, 66701, 33946, 71496, 46135, 95409, 60408, 4585, 82930, 17777, 84174, 92938, 85270, 42909, 55878, 36572, 35491, 70908, 25071, 79061, 1914, 14350, 78896, 79858, 41120, 32379, 68825, 31072, 97119, 48725, 40471, 58770, 78506, 7765, 28379, 94573, 28234, 5479, 99567, 80624, 36787, 84400, 4737, 59215, 45106, 79963, 11201, 16277, 294, 98438, 74591, 25701, 81697, 59873, 75239, 88653, 24893, 2362, 46313, 54559, 75271, 93794, 22122, 21273, 56354, 5144, 44634, 10261, 38170, 28264, 91521, 14886, 66434, 67345, 90533, 71211, 59166, 84332, 22248, 21307, 6582, 42573, 45084, 64367, 29655, 12959, 19912, 98710, 83215, 53132, 71565, 50924, 25828, 12476, 1338, 59775, 77770, 54873, 37718, 94363, 15804, 98465, 71628, 82019, 86237, 63772, 54402, 54351, 63707, 52581, 92430, 52652, 79738, 6736, 26487, 29899, 4672, 48343, 96884, 15226, 84586, 74015, 58349, 17086, 66763, 65317, 97152, 80374, 46659, 17262, 14499, 44147, 22561, 6047, 2099, 61306, 75688, 84415, 1091, 70189, 54246, 93327, 8916, 98413, 88689, 87314, 42121, 19276, 81683, 61351, 62900, 86729, 8013, 24203, 32640, 97947, 76762, 90025, 35682, 48500, 77153, 57113, 8274, 95162, 55531, 65285, 71860, 12286, 23055, 15758, 1189, 80685, 6522, 1130, 66366, 49682, 65720, 36570, 10102, 34433, 80225, 14949, 61063, 3385, 99285, 96688, 84365, 78583, 55474, 37959, 91428, 53019, 98276, 116, 8374, 62507, 37246, 82605, 13511, 94535, 17176, 54607, 55768, 74560, 3840, 25974, 76329, 53332, 65805, 27008, 16017, 58867, 91582, 82083, 42945, 63592, 87157, 36116, 72279, 97004, 60627, 47720, 50571, 26283, 92235, 63057, 43295, 69950, 17849, 93643, 6795, 53796, 42110, 39088, 52002, 30008, 79958, 44853, 11789, 96201, 68908, 14296, 78704, 89690, 93449, 7259, 72788, 53872, 73421, 75857, 51499, 67308, 75804, 25081, 17883, 82325, 14147, 47454, 49870, 81698, 88948, 96695, 37488, 43256, 7383, 6962, 59817, 34022, 25209, 26767, 8682, 28186, 63724, 92216, 41400, 89835, 48696, 85511, 83150, 32502, 62275, 61667, 63500, 32206, 21584, 54097, 86942, 68907, 80956, 70218, 13568, 6432, 1251, 85326, 4328, 77649, 72098, 91474, 44066, 29015, 15696, 14289, 80878, 37432, 92967, 19620, 6201, 68332, 20742, 1968, 70936, 3729, 28976, 6945, 99774, 97387, 64147, 2907, 88461, 25980, 54226, 61089, 77327, 65086, 7578, 19772, 37094, 82208, 85574, 15925, 36594, 59226, 55763, 49027, 35374, 51874, 40609, 59642, 64459, 98559, 91913, 4185, 36827, 93551, 81433, 68492, 93522, 3319, 41603, 64846, 23744, 85095, 75325, 56332, 52969, 29342, 18801, 28440, 91340, 93279, 11367, 81745, 33263, 24640, 87480, 92743, 76237, 37726, 30705, 54361, 47531, 25135, 35727, 33370, 74702, 49274, 30090, 85315, 84589, 80596, 84074, 38846, 84391, 25238, 37331, 13278, 49241, 4276, 73000, 10988, 56692, 39748, 5711, 97227, 20632, 17577, 94961, 23238, 81333, 71051, 22255, 86699, 45295, 534, 21407, 69021, 33826, 35044, 48820, 59588, 18642, 24746, 94314, 8833, 59763, 73567, 60774, 63302, 59054, 5681, 90435, 38407, 64178, 19292, 12308, 49009, 80432, 42636, 78148, 79381, 46887, 89168, 11355, 77672, 7446, 76969, 76487, 48238, 42843, 40568, 36865, 43052, 11405, 26655, 82520, 16989, 98416, 20504, 2074, 64448, 75258, 55804, 10663, 97690, 67986, 78645, 38398, 9496, 29656, 18735, 42578, 72263, 10979, 59324, 3407, 78391, 19550, 37679, 35757, 25515, 94500, 46860, 22422, 22139, 7417, 72794, 58642, 70324, 24445, 21746, 30761, 33634, 51637, 59613, 17926, 10191, 64588, 16751, 57220, 68224, 34486, 78732, 78667, 32229, 59643, 89476, 63967, 17839, 38582, 48183, 5295, 5914, 119, 32446, 9457, 38554, 75049, 8784, 97864, 59983, 44054, 78668, 80682, 13958, 58223, 20372, 24173, 135, 14790, 46809, 24555, 44958, 27619, 27911, 2343, 56079, 75324, 55973, 26736, 27728, 19270, 31752, 66902, 76027, 77240, 21816, 94329, 53943, 29685, 16330, 17951, 43406, 43691, 2872, 26782, 48759, 78593, 71939, 67620, 37391, 95105, 98246, 30607, 99670, 72962, 42268, 809, 74180, 32570, 72042, 65208, 60676, 64119, 21086, 31507, 31462, 13054, 75627, 87389]
Tree:
(<p> (<defp> def p():{:x = 0.0{::} (<code> (<index> index =  (<n> 3)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<point> main[index]))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<point> main[index]))))))   (<combine> +)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))))))))) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> main[index]))))))))   (<combine> +)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 25)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index]))))))   (<combine> -)   (<data> (<point> main[index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<point> opposite[index]))))))   (<eval> <)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<point> main[index])))))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 30)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :})) {::} (<code> (<index> index =  (<n> 9)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> opposite[index])  +  (<ints> 9) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.4) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 6) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 7) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :})) {::} (<code> (<index> index =  (<n> 14)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 7)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}))))))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.6) )) :}) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.00001) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> main[index])  +  (<decimal> 0.2) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 3) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.000001) )) :})))) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 50)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> opposite[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 0) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 5)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 13)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}))))) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.01) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}))) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.0001) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> main[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.5) )) :}) :}) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}))) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 31)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) {::} (<code> (<index> index =  (<n> 42)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :})) {::} (<code> (<index> index =  (<n> 47)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}))))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  <  (<point> opposite[index])  +  (<decimal> 0.0000001) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  >  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 48)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<point> opposite[index]))))   (<eval> <)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :}) {::} (<code> (<index> index =  (<n> 23)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.6) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.8) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.000001) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 8) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 7) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.9) )) :})))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x +  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> >)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}))) {::} (<code> (<index> index =  (<n> 18)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :}) {::} (<code> (<index> index =  (<n> 12)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 41)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})))))))) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> if  (<data> (<combo> (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<combine> +)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<point> main[index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> -)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<combine> +)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))))))) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 8)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> main[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}))) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))))   (<eval> >)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<n_avg> (<mainPartial> sum(main[:-index])))))))))) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 39)) {::} (<if> if  (<data> (<combo> (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> -)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> opposite[index]))))))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}) {::} (<code> (<index> index =  (<n> 6)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<combo> (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))   (<combine> -)   (<data> (<point> opposite[index])))) :{:x =  (<expr> (x -  (<decimal> 0.0000001) )) :}) {::} (<code> (<index> index =  (<n> 11)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})) {::} (<code> (<index> index =  (<n> 38)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :})) {::} (<code> (<index> index =  (<n> 40)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 44)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.7) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 24)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.01) )) :}))) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 17)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :})))))) {::} (<code> (<index> index =  (<n> 45)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.8) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 1) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.1) )) :}) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x -  (<decimal> 0.8) )) :})) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 5000) :{:x =  (<expr> (x -  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x -  (<decimal> 0.00001) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 4) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}) :}) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :})) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}))) {::} (<code> (<index> index =  (<n> 21)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> if  (<data> (<point> opposite[index]))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x +  (<decimal> 0.1) )) :})) {::} (<code> (<index> index =  (<n> 27)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :})))) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<decimal> 0.5) :{:x =  (<expr> (x -  (<decimal> 0.3) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> main[index])  +  (<ints> 6) :{:x =  (<expr> (x +  (<decimal> 0.2) )) :}else:{:x =  (<expr> (x +  (<decimal> 0.8) )) :}) :}) {::} (<code> (<index> index =  (<n> 0)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :})) {::} (<code> (<index> index =  (<n> 10)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[-index:]))))   (<eval> <)   (<data> (<combo> (<data> (<point> opposite[index]))   (<combine> +)   (<data> (<point> main[index])))) :{:x =  (<expr> (x -  (<decimal> 0.001) )) :}))) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> >)   (<data> (<point> opposite[index])) :{:x =  (<expr> (x -  (<decimal> 0.1) )) :}))))) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> main[index])  >  (<point> main[index])  +  (<decimal> 0.001) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  >  (<point> opposite[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.7) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.2) )) :}) :}) {::} (<code> (<index> index =  (<n> 37)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 50) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :})) {::} (<code> (<index> index =  (<n> 49)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 5000) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 16)) {::} (<if> if  (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index]))))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[:-index])))) :{:x =  (<expr> (x -  (<decimal> 0.9) )) :}) {::} (<code> (<index> index =  (<n> 43)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.3) )) :})) {::} (<code> (<index> index =  (<n> 36)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 15)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.0000001) )) :})))) {::} (<code> (<index> index =  (<n> 28)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :})))) {::} (<code> (<index> index =  (<n> 22)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[:-index]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x +  (<decimal> 0.6) )) :})) {::} (<code> (<index> index =  (<n> 19)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 100) :{:x =  (<expr> (x +  (<decimal> 0.0001) )) :})) {::} (<code> (<index> index =  (<n> 2)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.001) )) :}) {::} (<code> (<index> index =  (<n> 34)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> >)   (<data> (<point> main[index])) :{:x =  (<expr> (x +  (<decimal> 0.4) )) :}))))))) {::} (<code> (<index> index =  (<n> 46)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[-index:])) ) >  (<smaller> 50) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})) {::} (<code> (<index> index =  (<n> 1)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 10000) :{:x =  (<expr> (x +  (<decimal> 0.01) )) :})))))) {::} (<code> (<index> index =  (<n> 29)) {::} (<if> if  (<data> (<combo> (<data> (<point> main[index]))   (<combine> -)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:]))))))   (<eval> <)   (<data> (<combo> (<data> (<combo> (<data> (<point> main[index]))   (<combine> +)   (<data> (<point> opposite[index]))))   (<combine> +)   (<data> (<n_avg> (<mainPartial> sum(main[-index:])))))) :{:x =  (<expr> (x +  (<decimal> 0.7) )) :}) {::} (<code> (<index> index =  (<n> 33)) {::} (<if> if  (<data> (<point> main[index]))   (<eval> <)   (<data> (<n_avg> (<oppositePartial> sum(opposite[-index:])))) :{:x =  (<expr> (x +  (<decimal> 0.00001) )) :}) {::} (<code> (<index> index =  (<n> 35)) {::} (<if> if main[index] < 1:{: (<compareDec> if  (<point> opposite[index])  <  (<point> opposite[index])  +  (<decimal> 0.3) :{:x =  (<expr> (x -  (<decimal> 0.4) )) :}) :}else:{: (<compareInt> if  (<point> opposite[index])  <  (<point> main[index])  +  (<ints> 2) :{:x =  (<expr> (x -  (<decimal> 0.000001) )) :}else:{:x =  (<expr> (x -  (<decimal> 0.7) )) :}) :}) {::} (<code> (<index> index =  (<n> 20)) {::} (<if> (<compareSum> if abs(sum(main) - sum(opposite)) >  (<larger> 1000) :{:x =  (<expr> (x +  (<decimal> 0.5) )) :})) {::} (<code> (<index> index =  (<n> 32)) {::} (<if> (<compareSum> if abs( (<mainPartial> sum(main[-index:]))  -  (<oppositePartial> sum(opposite[:-index])) ) >  (<smaller> 500) :{:x =  (<expr> (x -  (<decimal> 1.0) )) :}))) {::} (<code> (<index> index =  (<n> 26)) {::} (<if> if  (<data> (<n_avg> (<mainPartial> sum(main[:-index]))))   (<eval> <)   (<data> (<point> main[index])) :{:x =  (<expr> (x -  (<decimal> 0.6) )) :}))))))))) {::}return x:}) {::} (<callp> XXX_output_XXX = p()))

Fitness:
[0.9712337523971873, 0.9856168761985937]